<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Notes]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://soymadip.me/notes</link><image><url>https://soymadip.me/notes/site-lib/media/favicon.png</url><title>Notes</title><link>https://soymadip.me/notes</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Tue, 31 Dec 2024 10:02:46 GMT</lastBuildDate><atom:link href="https://soymadip.me/notes/site-lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Tue, 31 Dec 2024 10:00:13 GMT</pubDate><copyright><![CDATA[soymadip]]></copyright><ttl>60</ttl><dc:creator>soymadip</dc:creator><item><title><![CDATA[index]]></title><description><![CDATA[<a data-tooltip-position="top" aria-label="6. C++/index" data-href="6. C++/index" href="https://soymadip.me/notes/6.-c++/index.html#_0" class="internal-link" target="_self" rel="noopener nofollow">C++</a><br><a data-tooltip-position="top" aria-label="4. CSS/index" data-href="4. CSS/index" href="https://soymadip.me/notes/4.-css/index.html#_0" class="internal-link" target="_self" rel="noopener nofollow">CSS</a><br><a data-tooltip-position="top" aria-label="2. LINUX/index" data-href="2. LINUX/index" href="https://soymadip.me/notes/2.-linux/index.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Linux</a><br><a data-tooltip-position="top" aria-label="5. JavaScript/index" data-href="5. JavaScript/index" href="https://soymadip.me/notes/5.-javascript/index.html#_0" class="internal-link" target="_self" rel="noopener nofollow">JavaSctipt</a><br><a data-tooltip-position="top" aria-label="2.1 Bash/index" data-href="2.1 Bash/index" href="https://soymadip.me/notes/2.1-bash/index.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Bash</a><br><a data-tooltip-position="top" aria-label="1. Python/index" data-href="1. Python/index" href="https://soymadip.me/notes/1.-python/index.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Python</a><br><a data-tooltip-position="top" aria-label="Hyprland/index" data-href="Hyprland/index" href="https://soymadip.me/notes/hyprland/index.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Hyprlad</a>]]></description><link>https://soymadip.me/notes/index.html</link><guid isPermaLink="false">index.canvas</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 31 Dec 2024 09:58:12 GMT</pubDate></item><item><title><![CDATA[index]]></title><link>https://soymadip.me/notes/hyprland/index.html</link><guid isPermaLink="false">Hyprland/index.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 31 Dec 2024 09:15:09 GMT</pubDate></item><item><title><![CDATA[56 - Intro to oops]]></title><description><![CDATA[<img alt="PP &amp; OOP.png" src="https://soymadip.me/notes/1.-python/•-assets/pp-&amp;-oop.png" target="_self">In programming languages, mainly there are two approaches that are used to write program or code.
Procedural Programming
Object-Oriented Programming
The procedure we are following till now is the “Procedural Programming” approach. So, in this session, we will learn about Object Oriented Programming (OOP).<br><img alt="OOP.png" src="https://soymadip.me/notes/1.-python/•-assets/oop.png" target="_self">The basic idea of object-oriented programming (OOP) in Python is to use classes and objects to represent real-world concepts and entities.An object is an instance of a class, and it contains its own data and methods.
For example, you could create a class called "Person" that has properties such as name and age, and methods such as speak() and walk().
Each instance of the Person class would be a unique object with its own name and age, but they would all have the same methods to speak and walk.A class is a blueprint or template for creating objects.
It defines the properties and methods that an object of that class will have. Properties are the data or state of an object.methods are the actions or behaviour that an object can perform.One of the key features of OOP in Python is encapsulation,
which means that the internal state of an object is hidden and can only be accessed or modified through the object's methods. This helps to protect the object's data and prevent it from being modified in unexpected ways.
Another key feature of OOP in Python is inheritance,
which allows new classes to be created that inherit the properties and methods of an existing class. This allows for code reuse and makes it easy to create new classes that have similar functionality to existing classes.
Polymorphism is also supported in Python,
which means that objects of different classes can be treated as if they were objects of a common class. This allows for greater flexibility in code and makes it easier to write code that can work with multiple types of objects.
In summary
OOP in Python allows developers to model real-world concepts and entities using classes and objects, encapsulate data, reuse code through inheritance, and write more flexible code through polymorphism.
]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/56-intro-to-oops.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/56 - Intro to oops.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 31 Dec 2024 09:01:55 GMT</pubDate><enclosure url="https://soymadip.me/notes/1.-python/•-assets/pp-&amp;-oop.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/1.-python/•-assets/pp-&amp;-oop.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[58e.  '__init__()' - we don't need it]]></title><description><![CDATA[As we can see in <a data-tooltip-position="top" aria-label="replit" data-href="replit" href="https://soymadip.me/notes/.html" class="internal-link" target="_self" rel="noopener nofollow">Day 69</a> Replit, Harry created the class Employee without init() method.After asking God GPT, I found out this:<br><img alt="init.png" src="https://soymadip.me/notes/1.-python/•-assets/init.png" target="_self">But as God GPT explained, it's not a good practice to not use init().]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/58e.-&apos;__init__()&apos;-we-don&apos;t-need-it.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/58e.  &apos;__init__()&apos; - we don&apos;t need it.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 31 Dec 2024 07:31:02 GMT</pubDate><enclosure url="https://soymadip.me/notes/1.-python/•-assets/init.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/1.-python/•-assets/init.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[init]]></title><description><![CDATA[<img src="https://soymadip.me/notes/1.-python/•-assets/init.png" target="_self">]]></description><link>https://soymadip.me/notes/1.-python/•-assets/init.html</link><guid isPermaLink="false">1. Python/• Assets/init.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 31 Dec 2024 07:27:30 GMT</pubDate><enclosure url="https://soymadip.me/notes/1.-python/•-assets/init.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/1.-python/•-assets/init.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[OOP]]></title><description><![CDATA[<img src="https://soymadip.me/notes/1.-python/•-assets/oop.png" target="_self">]]></description><link>https://soymadip.me/notes/1.-python/•-assets/oop.html</link><guid isPermaLink="false">1. Python/• Assets/OOP.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 31 Dec 2024 07:23:52 GMT</pubDate><enclosure url="https://soymadip.me/notes/1.-python/•-assets/oop.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/1.-python/•-assets/oop.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[PP & OOP]]></title><description><![CDATA[<img src="https://soymadip.me/notes/1.-python/•-assets/pp-&amp;-oop.png" target="_self">]]></description><link>https://soymadip.me/notes/1.-python/•-assets/pp-&amp;-oop.html</link><guid isPermaLink="false">1. Python/• Assets/PP &amp; OOP.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 31 Dec 2024 07:22:33 GMT</pubDate><enclosure url="https://soymadip.me/notes/1.-python/•-assets/pp-&amp;-oop.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/1.-python/•-assets/pp-&amp;-oop.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[index]]></title><description><![CDATA[ ]]></description><link>https://soymadip.me/notes/6.-c++/index.html</link><guid isPermaLink="false">6. C++/index.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 31 Dec 2024 06:59:45 GMT</pubDate></item><item><title><![CDATA[nix-language]]></title><description><![CDATA[(reading-nix-language)=The Nix language is designed for conveniently creating and composing derivations – precise descriptions of how contents of existing files are used to derive new files.
It is a domain-specific, purely functional, lazily evaluated, dynamically typed programming language.:::{admonition} Notable uses of the Nix language
:class: note {term}Nixpkgs
The largest, most up-to-date software distribution in the world, and written in the Nix language. {term}NixOS
A Linux distribution that can be configured fully declaratively and is based on Nix and Nixpkgs.
Its underlying modular configuration system is written in the Nix language, and uses packages from Nixpkgs.
The operating system environment and services it provides are configured with the Nix language. :::You may quickly encounter Nix language expressions that look very complicated.
As with any programming language, the required amount of Nix language code closely matches the complexity of the problem it is supposed to solve, and reflects how well the problem – and its solution – is understood.
Building software is a complex undertaking, and Nix both exposes and allows managing this complexity with the Nix language.Yet, the Nix language itself has only few basic concepts that will be introduced in this tutorial, and which can be combined arbitrarily.
What may look complicated comes not from the language, but from how it is used.This is an introduction to reading the Nix language, for the purpose of following other tutorials and examples.Using the Nix language in practice entails multiple things:
Language: syntax and semantics
Libraries: builtins and pkgs.lib
Developer tools: testing, debugging, linting, formatting, ...
Generic build mechanisms: stdenv.mkDerivation, trivial builders, ...
Composition and configuration mechanisms: override, overrideAttrs, overlays, callPackage, ...
Ecosystem-specific packaging mechanisms: buildGoModule, buildPythonApplication, ...
NixOS module system: config, option, ...
This tutorial only covers the most important language features, briefly discusses libraries, and at the end will direct you to reference material and resources on the other components.This tutorial should enable you to read typical Nix language code and understand its structure.
Its goal is to highlight where the Nix language may differ from languages you are used to.It therefore shows the most common and distinguishing patterns in the Nix language:
<a class="internal-link" data-href="names-values" href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow">Assigning names and accessing values</a>
<br>Declaring and calling <a class="internal-link" data-href="functions" href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow">functions</a>
<br><a class="internal-link" data-href="libraries" href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow">Built-in and library functions</a>
<br><a class="internal-link" data-href="impurities" href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow">Impurities</a> to obtain build inputs
<br><a class="internal-link" data-href="derivations" href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow">Derivations</a> that describe build tasks
:::{important}
This tutorial does not explain all Nix language features in detail and does not go into specifics of syntactical rules.<br>See the <a data-tooltip-position="top" aria-label="https://nix.dev/manual/nix/2.18/language/index.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://nix.dev/manual/nix/2.18/language/index.html" target="_self">Nix manual</a> for a full language reference.
:::
Familiarity with software development
Familiarity with Unix shell, to read command line examples A {ref}Nix installation &lt;install-nix&gt; to run the examples No experience with functional programming: 2 hours
Familiar with functional programming: 1 hour
Proficient with functional programming: 30 minutes
We recommend to run all examples.
Play with them to validate your assumptions and test what you have learned.
Read detailed explanations if you want to make sure you fully understand the examples.
A piece of Nix language code is a Nix expression.
Evaluating a Nix expression produces a Nix value.
The content of a Nix file (file extension .nix) is a Nix expression.
:::{note}
To evaluate means to transform an expression into a value according to the language rules.
:::This tutorial contains many examples of Nix expressions.
Each one is followed by the expected evaluation result.The following example is a Nix expression adding two numbers::class: expression
1 + 2
:class: value
3
<br>Use <a data-tooltip-position="top" aria-label="https://nix.dev/manual/nix/2.18/command-ref/new-cli/nix3-repl.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://nix.dev/manual/nix/2.18/command-ref/new-cli/nix3-repl.html" target="_self"><code></code></a>nix repl to evaluate Nix expressions interactively (by typing them on the command line):$ nix repl
Welcome to Nix 2.13.3. Type :? for help. nix-repl&gt; 1 + 2
3
:::{note}
The Nix language uses lazy evaluation, and nix repl by default only computes values when needed.Some examples show a fully evaluated data structure for clarity.
If your output does not match the example, try prepending :p to the input expression.Example:nix-repl&gt; { a.b.c = 1; }
{ a = { ... }; } nix-repl&gt; :p { a.b.c = 1; }
{ a = { b = { c = 1; }; }; }
<br>Type :q to exit <a data-tooltip-position="top" aria-label="https://nix.dev/manual/nix/2.18/command-ref/new-cli/nix3-repl.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://nix.dev/manual/nix/2.18/command-ref/new-cli/nix3-repl.html" target="_self"><code></code></a>nix repl.:::<br>Use <a data-tooltip-position="top" aria-label="https://nix.dev/manual/nix/2.18/command-ref/nix-instantiate.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://nix.dev/manual/nix/2.18/command-ref/nix-instantiate.html" target="_self"><code></code></a>nix-instantiate --eval to evaluate the expression in a Nix file.$ echo 1 + 2 &gt; file.nix
$ nix-instantiate --eval file.nix
3
:::{dropdown} Detailed explanationThe first command writes 1 + 2 to a file file.nix in the current directory.
The contents of file.nix are now 1 + 2, which you can check with$ cat file.nix
1 + 2
The second command runs nix-instantiate with the --eval option on file.nix, which reads the file and evaluates the contained Nix expression.
The resulting value is printed as output.--eval is required to evaluate the file and do nothing else.<br>
If --eval is omitted, nix-instantiate expects the expression in the given file to evaluate to a special value called a derivation, which we will come back to at the end of this tutorial in <a class="internal-link" data-href="derivations" href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow"></a>.::::::{note}
nix-instantiate --eval will try to read from default.nix if no file name is specified.$ echo 1 + 2 &gt; default.nix
$ nix-instantiate --eval
3
::::::{note}
The Nix language uses lazy evaluation, and nix-instantiate by default only computes values when needed.Some examples show a fully evaluated data structure for clarity.
If your output does not match the example, try adding the --strict option to nix-instantiate.Example:$ echo "{ a.b.c = 1; }" &gt; file.nix
$ nix-instantiate --eval file.nix
{ a = &lt;CODE&gt;; }
$ echo "{ a.b.c = 1; }" &gt; file.nix
$ nix-instantiate --eval --strict file.nix
{ a = { b = { c = 1; }; }; }
:::<br>White space is used to delimit <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Lexical_analysis#Lexical_token_and_lexical_tokenization" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Lexical_analysis#Lexical_token_and_lexical_tokenization" target="_self">lexical tokens</a>, where required.
It is otherwise insignificant.Line breaks, indentation, and additional spaces are for readers' convenience.The following are equivalent::class: expression
let x = 1; y = 2;
in x + y
:class: value
3
:class: expression
let x=1;y=2;in x+y
:class: value
3
(names-values)=Values in the Nix language can be primitive data types, lists, attribute sets, and functions.<br>We show examples of primitive data types and lists in the context of <a class="internal-link" data-href="attrset" href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow">attribute sets</a>.<br>
Later in this section we cover special features of character strings: <a class="internal-link" data-href="string-interpolation" href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow">string interpolation</a>, <a class="internal-link" data-href="file-system-paths" href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow">file system paths</a>, and <a class="internal-link" data-href="indented-strings" href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow">indented strings</a>.<br>
We deal with <a class="internal-link" data-href="functions" href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow">functions</a> separately.<br><a class="internal-link" data-href="attrset" href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow">Attribute sets</a> and <a class="internal-link" data-href="let" href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow"><code></code> expressions</a>let are used to assign names to values.
Assignments are denoted by a single equal sign (=).Whenever you encounter an equal sign (=) in Nix language code:
On its left is the assigned name.
On its right is the value, delimited by a semicolon (;).
(attrset)=An attribute set is a collection of name-value-pairs, where names must be unique.]]></description><link>https://soymadip.me/notes/nix/nix-language.html</link><guid isPermaLink="false">Nix/nix-language.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 31 Dec 2024 06:57:45 GMT</pubDate></item><item><title><![CDATA[92 - Function Caching]]></title><description><![CDATA[Function caching is a technique for improving the performance of a program by storing the results of a function call so that you can reuse the results instead of recomputing them every time the function is called. This can be particularly useful when a function is computationally expensive, or when the inputs to the function are unlikely to change frequently.In Python, function caching can be achieved using the functools.lru_cache decorator. The functools.lru_cache decorator is used to cache the results of a function so that you can reuse the results instead of recomputing them every time the function is called. Here's an example:import functools @functools.lru_cache(maxsize=None)
def fib(n): if n &lt; 2: return n return fib(n-1) + fib(n-2) print(fib(20))
# Output: 6765
As you can see, the functools.lru_cache decorator is used to cache the results of the fib function. The maxsize parameter is used to specify the maximum number of results to cache. If maxsize is set to None, the cache will have an unlimited size.Function caching can have a significant impact on the performance of a program, particularly for computationally expensive functions. By caching the results of a function, you can avoid having to recompute the results every time the function is called, which can save a significant amount of time and computational resources.Another benefit of function caching is that it can simplify the code of a program by removing the need to manually cache the results of a function. With the functools.lru_cache decorator, the caching is handled automatically, so you can focus on writing the core logic of your program.Function caching is a technique for improving the performance of a program by storing the results of a function so that you can reuse the results instead of recomputing them every time the function is called. In Python 3, function caching can be achieved using the functools.lru_cache decorator, which provides an easy and efficient way to cache the results of a function. Whether you're writing a computationally expensive program, or just want to simplify your code, function caching is a great technique to have in your toolbox.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/92-function-caching.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/92 - Function Caching.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 31 Dec 2024 06:31:11 GMT</pubDate></item><item><title><![CDATA[_Modern C++ Coding Guidelines]]></title><description><![CDATA[We are using Modern C++11.
Smart pointers, Lambdas, and C++11 multithreading primitives are our friend.Quick note
The great thing about "standards" is that there are many to chose from: <a data-tooltip-position="top" aria-label="https://isocpp.org/wiki/faq/coding-standards" rel="noopener nofollow" class="external-link is-unresolved" href="https://isocpp.org/wiki/faq/coding-standards" target="_self">ISO</a>, <a data-tooltip-position="top" aria-label="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md" target="_self">Sutter &amp; Stroustrup</a>, <a data-tooltip-position="top" aria-label="http://wiki.ros.org/CppStyleGuide" rel="noopener nofollow" class="external-link is-unresolved" href="http://wiki.ros.org/CppStyleGuide" target="_self">ROS</a>, <a data-tooltip-position="top" aria-label="https://www.kernel.org/doc/Documentation/process/coding-style.rst" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.kernel.org/doc/Documentation/process/coding-style.rst" target="_self">LINUX</a>, <a data-tooltip-position="top" aria-label="https://google.github.io/styleguide/cppguide.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://google.github.io/styleguide/cppguide.html" target="_self">Google's</a>, <a data-tooltip-position="top" aria-label="https://msdn.microsoft.com/en-us/library/888a6zcz.aspx" rel="noopener nofollow" class="external-link is-unresolved" href="https://msdn.microsoft.com/en-us/library/888a6zcz.aspx" target="_self">Microsoft's</a>, <a data-tooltip-position="top" aria-label="http://atlas-computing.web.cern.ch/atlas-computing/projects/qa/draft_guidelines.html" rel="noopener nofollow" class="external-link is-unresolved" href="http://atlas-computing.web.cern.ch/atlas-computing/projects/qa/draft_guidelines.html" target="_self">CERN's</a>, <a data-tooltip-position="top" aria-label="https://gcc.gnu.org/wiki/CppConventions" rel="noopener nofollow" class="external-link is-unresolved" href="https://gcc.gnu.org/wiki/CppConventions" target="_self">GCC's</a>, <a data-tooltip-position="top" aria-label="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0475c/CJAJAJCJ.html" rel="noopener nofollow" class="external-link is-unresolved" href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0475c/CJAJAJCJ.html" target="_self">ARM's</a>, <a data-tooltip-position="top" aria-label="http://llvm.org/docs/CodingStandards.html" rel="noopener nofollow" class="external-link is-unresolved" href="http://llvm.org/docs/CodingStandards.html" target="_self">LLVM's</a> and probably thousands of others. Unfortunately most of these can't even agree on something as basic as how to name a class or a constant. This is probably due to the fact that these standards often carry lots of legacy issues due to supporting existing code bases. The intention behind this document is to create guidance that remains as close to ISO, Sutter &amp; Stroustrup and ROS while resolving as many conflicts, disadvantages and inconsistencies as possible among them.
Formatting the syntax of C++ is normalized by the clang-format tool which has settings checked intothis project in the file .clang-format. These settings are set to match the formatting guidelineslisted below. You can "format" a file using clang-format command line or by enabling Visual Studioautomatic-clang formatting either during every edit or when you save the file. All files have beenformatted this way and the github workflow called clang-format will also ensure all pull requestsare correctly formatted so it should stay clean. Obviously this does not include external code likeEigen or rpclib. If you find a bug in clang-format you can disable clang formatting of a specific block of code byusing the following comments pair:
// clang-format off ... // clang-format on Avoid using any sort of Hungarian notation on names and "_ptr" on pointers.Use a namespace qualified #ifdef to protect against multiple inclusion:
#ifndef msr_airsim_MyHeader_hpp #define msr_airsim_MyHeader_hpp //--your code #endif The reason we don't use #pragma once is because it's not supported if same header file exists at multiple places (which might be possible under ROS build system!).Inside function or method body place curly bracket on same line. Outside that the Namespace, Class and methods levels use separate line.<br>This is called <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Indent_style#K.26R_style" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Indent_style#K.26R_style" target="_self">K&amp;R style</a> and its variants are widely used in C++ vs other styles which are more popular in other languages. Notice that curlies are not required if you have single statement, but complex statements are easier to keep correct with the braces.
int main(int argc, char* argv[])
{ while (x == y) { f0(); if (cont()) { f1(); } else { f2(); f3(); } if (x &gt; 100) break; }
} Religiously review all non-scalar parameters you declare to be candidate for const and references. If you are coming from languages such as C#/Java/Python,the most often mistake you would make is to pass parameters by value instead of const T&amp;; Especially most of the strings, vectors and maps you want to pass as const T&amp;; (if they are readonly) or T&amp; (if they are writable). Also add const suffix to methods as much as possible.When overriding virtual method, use override suffix.This is really about memory management. A simulator has much performance critical code, so we try and avoid overloading the memory managerwith lots of calls to new/delete. We also want to avoid too much copying of things on the stack, so we pass things by reference when ever possible.But when the object really needs to live longer than the call stack you often need to allocate that object onthe heap, and so you have a pointer. Now, if management of the lifetime of that object is going to be tricky we recommend using <br><a data-tooltip-position="top" aria-label="https://cppstyle.wordpress.com/c11-smart-pointers/" rel="noopener nofollow" class="external-link is-unresolved" href="https://cppstyle.wordpress.com/c11-smart-pointers/" target="_self">C++ 11 smart pointers</a>. But smart pointers do have a cost, so don’t use them blindly everywhere. For private code where performance is paramount, raw pointers can be used. Raw pointers are also often needed when interfacing with legacy systemsthat only accept pointer types, for example, sockets API. But we try to wrap those legacy interfaces asmuch as possible and avoid that style of programming from leaking into the larger code base. Religiously check if you can use const everywhere, for example, const float * const xP. Avoid using prefix or suffix to indicate pointer types in variable names, i.e. use my_obj instead of myobj_ptr except in cases where it might make sense to differentiate variables better, for example, int mynum = 5; int* mynum_ptr = mynum;In Unreal C++ code, when checking if a pointer is null, it is preferable to use IsValid(ptr). In addition to checking for a null pointer, this function will also return whether a UObject is properly initialized. This is useful in situations where a UObject is in the process of being garbage collected but still set to a non-null value.The C++ code base uses four spaces for indentation (not tabs).Files should be committed with Unix line breaks. When working on Windows, git can be configured to checkout files with Windows line breaks and automatically convert from Windows to Unix line breaks when committing by running the following command:
git config --global core.autocrlf true When working on Linux, it is preferable to configure git to checkout files with Unix line breaks by running the following command:
git config --global core.autocrlf input <br>For more details on this setting, see <a data-tooltip-position="top" aria-label="https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings" target="_self">this documentation</a>.Yes, and it's on purpose because no one likes to read 200 page coding guidelines. The goal here is to cover only most significant things which are <br>already not covered by <a data-tooltip-position="top" aria-label="http://shitalshah.com/p/how-to-enable-and-use-gcc-strict-mode-compilation/" rel="noopener nofollow" class="external-link is-unresolved" href="http://shitalshah.com/p/how-to-enable-and-use-gcc-strict-mode-compilation/" target="_self">strict mode compilation in GCC</a> and Level 4 <br>warnings-as-errors in VC++. If you had like to know about how to write better code in C++, please see <a data-tooltip-position="top" aria-label="https://herbsutter.com/gotw/" rel="noopener nofollow" class="external-link is-unresolved" href="https://herbsutter.com/gotw/" target="_self">GotW</a> <br>and <a data-tooltip-position="top" aria-label="http://shop.oreilly.com/product/0636920033707.do" rel="noopener nofollow" class="external-link is-unresolved" href="http://shop.oreilly.com/product/0636920033707.do" target="_self">Effective Modern C++</a> book.]]></description><link>https://soymadip.me/notes/6.-c++/_modern-c++-coding-guidelines.html</link><guid isPermaLink="false">6. C++/_Modern C++ Coding Guidelines.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 31 Dec 2024 05:08:09 GMT</pubDate></item><item><title><![CDATA[_Google C++ Guidelines (me)]]></title><description><![CDATA[
Indentation: Use 2 spaces for indentation, not tabs.
Line length: Limit lines to 80 characters, with exceptions for long lines like URLs or function calls.
Braces: Use braces for all control flow statements (if, for, while, etc.), even for single statements or empty blocks.
Whitespace: Use a space between keywords and parentheses (e.g., if (x &gt; 0)).
No space before or after parentheses in function calls (e.g., foo(x)).
Use spaces around operators (e.g., x + y), but not immediately before or after parentheses. Naming Conventions: Variables: Use lower_snake_case for variable names.
Constants: Use kCamelCase for constants.
Functions: Use CamelCase for function names.
Classes/Structs: Use CamelCase for class/struct names. Block Comments: Use /* comment */ for block comments.
Line Comments: Use // comment for single-line comments.
Documentation Comments: Use /// or /** ... */ for documentation, especially for public APIs.
Commenting Style: Start with a capital letter and avoid ending with punctuation unless it's a question.
Keep comments clear and concise. Explain "why" something is done, not just "what" is done. Files: Each file should contain only one class or functionality if possible. Split large files into smaller ones based on logical units.
Headers and Implementation Files: Use .h for headers and .cc for implementation files.
Include guards in header files (#ifndef, #define, #endif).
Prefer forward declarations over includes when possible in header files. Namespacing: Use the namespace keyword to define and enclose related classes or functions. Exceptions: Prefer exceptions to return codes for error handling.
Exception Safety: Write exception-safe code to ensure resources are released correctly during exceptions.
Assert: Use assert() for conditions that should never fail in debug builds. Smart Pointers: Prefer std::unique_ptr and std::shared_ptr over raw pointers for automatic memory management.
RAII: Use Resource Acquisition Is Initialization (RAII) to manage resources like file handles and memory.
Avoid Memory Leaks: Ensure dynamically allocated memory is properly deallocated. Prefer standard library containers vector, std::map, etc. over raw arrays or home-grown data structures.
Use std::unique_ptr for ownership and std::shared_ptr for shared ownership. Use const where applicable to indicate that variables or objects should not be modified.
For pointer types, use const to specify whether the pointer or the data it points to is constant. Avoid using namespace std; in header files or large code blocks to prevent name clashes.
Limit macros: Prefer constants or inline functions over macros.
Type safety: Prefer static and dynamic type checking over casts (e.g., avoid reinterpret_cast unless necessary).
]]></description><link>https://soymadip.me/notes/6.-c++/_google-c++-guidelines-(me).html</link><guid isPermaLink="false">6. C++/_Google C++ Guidelines (me).md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 31 Dec 2024 05:06:57 GMT</pubDate></item><item><title><![CDATA[index]]></title><link>https://soymadip.me/notes/3.-html/index.html</link><guid isPermaLink="false">3. HTML/index.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 29 Dec 2024 13:04:21 GMT</pubDate></item><item><title><![CDATA[2. HTML Elements]]></title><description><![CDATA[An HTML element is a complete set that consists of a start tag (or opening tag), content, and an end tag (or closing tag).HTML Element = Start Tag + Content + End TagExample:&lt;h1&gt;This is our first heading&lt;/h1&gt;
In this example,&nbsp;&lt;h1&gt;&nbsp;is the start tag, "This is our first heading" is the content, and&nbsp;&lt;/h1&gt;&nbsp;is the end tag. Together, they form an HTML element.There are 2 types of HTML Elements: Inline Elements Block elements “inline-block-image.jpg” could not be found.Inline Elements don't start on a new line. It only takes the width required to cover the content. They are part of the flow within other elements.
Inline elements can contain other inline elements, But they generally shouldn't contain block-level elements which can lead to unexpected behavior in terms of layout and styling.
<img alt="elements_inline.png" src="https://soymadip.me/notes/3.-html/assets/elements_inline.png" target="_self">
&lt;span&gt;: A generic inline container for text
&lt;a&gt;: Defines a hyperlink
&lt;strong&gt;: Defines important text
<br>&lt;em&gt;: Defines emphasized text<img referrerpolicy="no-referrer">: Embeds an image
&lt;input&gt;: Defines an input control
&lt;select&gt;: Drop down list
&lt;button&gt;: Buttons.
<br>Some <a data-tooltip-position="top" aria-label="5a. Short list of HTML Tags > Text Formatting Tags" data-href="5a. Short list of HTML Tags#Text Formatting Tags" href="https://soymadip.me/notes/.html" class="internal-link" target="_self" rel="noopener nofollow">Text Formatting Tags</a> like &lt;b&gt; &lt;i&gt; &lt;u&gt; etc.
Block-level elements are those that start on a new line and take up the entire width of their container by default.
They essentially claim all the horizontal space for themselves, pushing any content that comes after them to a new line.
Block Elements:
Always start on a new line.
Take up the full width available.
Width and height can be controlled via CSS.
Can contain other block-level as well as inline elements. &lt;address&gt;
&lt;aside&gt;
&lt;article&gt;
&lt;blockquote&gt;
&lt;canvas&gt;
&lt;dd&gt;
&lt;div&gt;
&lt;dl&gt;
&lt;dt&gt;
&lt;fieldset&gt;
&lt;figcaption&gt;
&lt;figure&gt;
&lt;footer&gt;
&lt;form&gt;
&lt;h1&gt; to &lt;h6&gt;
&lt;header&gt;
&lt;hr&gt;
&lt;li&gt;
&lt;main&gt;
&lt;nav&gt;
&lt;noscript&gt;
&lt;ol&gt;
&lt;p&gt;
&lt;pre&gt;
&lt;section&gt;
&lt;table&gt;
&lt;tfoot&gt;
&lt;ul&gt;
&lt;video&gt;
A nested HTML element is an HTML structure where one element is placed inside another element.
The enclosing element is often referred to as the "parent,"
while the enclosed element is called the "child."
Nested HTML Element = One HTML Element Inside Another HTML ElementFor example:&lt;h1&gt;&lt;b&gt;This is our first heading&lt;/b&gt;&lt;/h1&gt;
In this example, the&nbsp;&lt;b&gt;&nbsp;element (child) is nested inside the&nbsp;&lt;h1&gt;&nbsp;element (parent).An empty HTML element is one that does not have a closing tag or content. These elements are also known as "void elements" or "self-closing elements".Empty HTML Element = Tags with No ContentFor example:&lt;br/&gt;
This is a&nbsp;break tag, which has no content and no closing tag. It's used to insert a line break within text or other inline elements. ]]></description><link>https://soymadip.me/notes/3.-html/2.-html-elements.html</link><guid isPermaLink="false">3. HTML/2. HTML Elements.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 29 Dec 2024 12:57:29 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/elements_inline.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/elements_inline.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[0. Emmet - The VS Code linter]]></title><description><![CDATA[Emmet is a web-developer’s toolkit that can greatly improve your HTML &amp; CSS workflow. It is a plugin for many popular text editors which greatly improves HTML &amp; CSS workflow.Emmet allows you to write a line of simple code called an ‘abbreviation’, and then expand that code into a full block of HTML or CSS. This can save a lot of time when you’re writing HTML or CSS code.in HTML, you could write:ul&gt;li*5
And Emmet will expand this into:&lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
By typing ! we can get boiler plate code for HTML:&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt;
&lt;body&gt; &lt;/body&gt;
&lt;/html&gt; ]]></description><link>https://soymadip.me/notes/3.-html/0.-emmet-the-vs-code-linter.html</link><guid isPermaLink="false">3. HTML/0. Emmet - The VS Code linter.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 29 Dec 2024 12:55:56 GMT</pubDate></item><item><title><![CDATA[0. How an website works]]></title><description><![CDATA[<img alt="webpage-structure.png" src="https://soymadip.me/notes/3.-html/assets/webpage-structure.png" target="_self">
In building a webpage, think of HTML, CSS, and JavaScript as different parts of a car. HTML is like the car's skeleton, forming the basic structure and frame. CSS adds the paint and finishing touches, making the car look appealing with color, style, and design. JavaScript is similar to the engine and mechanical parts, infusing the car with functionality, movement, and interactive features. Similarly, when developing a website, HTML lays out the structure, CSS enhances its visual appeal, and JavaScript provides interactivity and dynamic contentWhen we want to access any information on the internet, we search for it using a web browser. The web browser retrieves the content from web servers, where it is stored in the form of HTML documents.An HTML document is created by writing code with specific tags in a code editor of your choice. The document is then saved with the&nbsp;'.html'&nbsp;extension. Once saved, the browser interprets the HTML document, reads it, and renders the web page.<br><img alt="how page works.png" src="https://soymadip.me/notes/3.-html/assets/how-page-works.png" target="_self" style="width: 990px; max-width: 100%;">
The text editor has the HTML code of a website. This website can now be viewed in a beautifully rendered format using a computer program known as a web browser.
<br>Web Browser(client) requests websites like&nbsp;<a data-tooltip-position="top" aria-label="https://www.codewithharry.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.codewithharry.com/" target="_self">www.codewithharry.com</a>&nbsp;from the web server.
Web server in return sends HTML, CSS, and JavaScript files to it.
HTML, CSS, and JavaScript files are parsed by a web browser which is responsible for showing you a beautiful website.
]]></description><link>https://soymadip.me/notes/3.-html/0.-how-an-website-works.html</link><guid isPermaLink="false">3. HTML/0. How an website works.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 29 Dec 2024 12:55:52 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/webpage-structure.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/webpage-structure.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1. HTML Page structure]]></title><description><![CDATA[An HTML document is structured using a set of nested tags. Each tag is enclosed within&nbsp;&lt;…&gt;&nbsp;angle brackets and acts as a container for content or other HTML tags. Let's take a look at a basic HTML document structure:&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt; &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt; &lt;!-- content --&gt;
&lt;/body&gt;
&lt;/html&gt;
A typical HTML Page looks like this:&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Page title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt; &lt;h1&gt;This is a heading&lt;/h1&gt;
&lt;p&gt;This is a paragraph.&lt;/p&gt;
&lt;p&gt;This is another paragraph.&lt;/p&gt; &lt;/body&gt;
&lt;/html&gt;These are the essential elements for a basic HTML document:&nbsp;&lt;!DOCTYPE html&gt;,&nbsp;&lt;html&gt;,&nbsp;&lt;head&gt;,&nbsp;&lt;title&gt;,&nbsp;&lt;/head&gt;,&nbsp;&lt;body&gt;,&nbsp;&lt;/body&gt;,&nbsp;&lt;/html&gt;The&nbsp;&lt;!DOCTYPE html&gt;&nbsp;declaration informs the web browser about the HTML version being used.
The latest version is HTML5. But if this changes in the future (maybe 10 years down the line), the doctype declaration will be helpful!&lt;!DOCTYPE html&gt;
The&nbsp;&lt;html&gt;&nbsp;tag is the root element that encapsulates all the content on the page.
The&nbsp;&lt;/html&gt;&nbsp;tag marks the end of the&nbsp;&lt;html&gt;&nbsp;section.&lt;html&gt; &lt;/html&gt;
The&nbsp;&lt;head&gt;&nbsp;tag contains metadata and links to external resources like CSS and JavaScript files.
The&nbsp;&lt;/head&gt;&nbsp;tag marks the end of the&nbsp;&lt;head&gt;&nbsp;section.&lt;head&gt; &lt;/head&gt;
The&nbsp;&lt;title&gt;&nbsp;tag sets the title of the web page, which is displayed in the browser's title bar or tab.&lt;title&gt; Document &lt;/title&gt;
The&nbsp;&lt;body&gt;&nbsp;tag contains the visible content of the web page. This is where text, images, and other elements go.
The&nbsp;&lt;/body&gt;&nbsp;tag marks the end of the visible content of the web page.&lt;body&gt; &lt;/body&gt; The&nbsp;&lt;!DOCTYPE html&gt;&nbsp;tag specifies that the document is an HTML5 document.
The&nbsp;&lt;html lang="en"&gt;&nbsp;tag defines the document to be in English.
The&nbsp;&lt;head&gt;&nbsp;section contains metadata and the title of the webpage, which appears in the browser's title bar.
The&nbsp;&lt;body&gt;&nbsp;section contains the content that will be displayed on the webpage.
The h1 and p are two types of tags. We will learn about more tags in the later section
]]></description><link>https://soymadip.me/notes/3.-html/1.-html-page-structure.html</link><guid isPermaLink="false">3. HTML/1. HTML Page structure.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 29 Dec 2024 12:55:48 GMT</pubDate></item><item><title><![CDATA[index]]></title><link>https://soymadip.me/notes/1.-python/index.html</link><guid isPermaLink="false">1. Python/index.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 28 Dec 2024 22:11:38 GMT</pubDate></item><item><title><![CDATA[index]]></title><link>https://soymadip.me/notes/2.1-bash/index.html</link><guid isPermaLink="false">2.1 Bash/index.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 28 Dec 2024 22:11:14 GMT</pubDate></item><item><title><![CDATA[index]]></title><link>https://soymadip.me/notes/4.-css/index.html</link><guid isPermaLink="false">4. CSS/index.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 28 Dec 2024 22:10:40 GMT</pubDate></item><item><title><![CDATA[index]]></title><link>https://soymadip.me/notes/5.-javascript/index.html</link><guid isPermaLink="false">5. JavaScript/index.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 28 Dec 2024 22:05:27 GMT</pubDate></item><item><title><![CDATA[index]]></title><link>https://soymadip.me/notes/2.-linux/index.html</link><guid isPermaLink="false">2. LINUX/index.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 28 Dec 2024 21:57:06 GMT</pubDate></item><item><title><![CDATA[7. HTML Lists]]></title><description><![CDATA[HTML lists allow web developers to group a set of related items in lists.
starts with the &lt;ul&gt; tag. Each list item starts with the &lt;li&gt; tag.
Example:
&lt;ul&gt; &lt;li&gt;item 1&lt;/li&gt; &lt;li&gt;item 2&lt;/li&gt; &lt;li&gt;item 3&lt;/li&gt; &lt;/ul&gt; Live:
<img alt="list_unordered.png" src="https://soymadip.me/notes/3.-html/assets/list_unordered.png" target="_self"> An ordered list starts with the &lt;ol&gt; tag. Each list item starts with the &lt;li&gt; tag.
Example: &lt;ol&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ol&gt; Live:<br>
<img alt="list_ordered.png" src="https://soymadip.me/notes/3.-html/assets/list_ordered.png" target="_self"> A description list is a list of terms, with a description of each term.
The &lt;dl&gt; tag is the container for the list.
The &lt;dt&gt; tag defines the term that you want to explain.
The &lt;dd&gt; tag describes each term
Example:
&lt;dl&gt; &lt;dt&gt;Coffee&lt;/dt&gt; &lt;dd&gt;- black hot drink&lt;/dd&gt; &lt;dt&gt;Milk&lt;/dt&gt; &lt;dd&gt;- white cold drink&lt;/dd&gt; &lt;/dl&gt; Live:<br>
<img alt="list_description.png" src="https://soymadip.me/notes/3.-html/assets/list_description.png" target="_self">
]]></description><link>https://soymadip.me/notes/3.-html/7.-html-lists.html</link><guid isPermaLink="false">3. HTML/7. HTML Lists.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 28 Dec 2024 21:50:33 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/list_unordered.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/list_unordered.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[61 - Inheritance in Python]]></title><description><![CDATA[When a class derives from another class,
The child class will inherit all the public and protected properties and methods from the parent class.
In addition, it can have its own properties and methods,this is called as inheritance.class ParentClass: Body of base class class Derived/ChildClass(ParentClass): Body of derived class Derived class inherits features from the base/Parent class where new features can be added to it.
This results in re-usability of code. Single inheritance
Multiple inheritance
Multilevel inheritance
Hierarchical Inheritance
Hybrid Inheritance We will see the explanation and example of each type of inheritance in the later tutorials Single inheritance enables a derived class to inherit properties from a single parent class, thus enabling code re-usability and the addition of new features to existing code.
class Parent: def func1(self): print("This function is in parent class.") class Child(Parent): def func2(self): print("This function is in child class.") object = Child()
object.func1()
object.func2() # Output:
This function is in parent class.
This function is in child class.
When a class can be derived from more than one base class this type of inheritance is called multiple inheritances. In multiple inheritances, all the features of the base classes are inherited into the derived class. class Mother: mothername = "" def mother(self): print(self.mothername) class Father: fathername = "" def father(self): print(self.fathername) class Son(Mother, Father): def parents(self): print("Father name is :", self.fathername) print("Mother :", self.mothername)
s1 = Son()
s1.fathername = "Mommy"
s1.mothername = "Daddy"
s1.parents() # Output:
Father name is : Mommy
Mother name is : Daddy
In multilevel inheritance, features of the base class and the derived class are further inherited into the new derived class. This is similar to a relationship representing a child and a grandfather. class Grandfather: def __init__(self, grandfathername): self.grandfathername = grandfathername class Father(Grandfather): def __init__(self, fathername, grandfathername): self.fathername = fathername Grandfather.__init__(self, grandfathername)
class Son(Father): def __init__(self, sonname, fathername, grandfathername): self.sonname = sonname Father.__init__(self, fathername, grandfathername) def print_name(self): print('Grandfather name :', self.grandfathername) print("Father name :", self.fathername) print("Son name :", self.sonname)
s1 = Son('Prince', 'Rampal', 'Lal mani')
print(s1.grandfathername)
s1.print_name() # Output:
George
Grandfather name : George
Father name : Philip
Son name : Charles
When more than one derived class are created from a single base this type of inheritance is called hierarchical inheritance. In this program, we have a parent (base) class and two child (derived) classes.class Parent: def func1(self): print("This function is in parent class.") class Child1(Parent): def func2(self): print("This function is in child 1.") class Child2(Parent): def func3(self): print("This function is in child 2.") object1 = Child1()
object2 = Child2()
object1.func1()
object1.func2()
object2.func1()
object2.func3() # Output:
This function is in parent class.
This function is in child 1.
This function is in parent class.
This function is in child 2.
Inheritance consisting of multiple types of inheritance is called hybrid inheritance.class School: def func1(self): print("This function is in school.") class Student1(School): def func2(self): print("This function is in student 1. ") class Student2(School): def func3(self): print("This function is in student 2.") class Student3(Student1, School): def func4(self): print("This function is in student 3.") object = Student3()
object.func1()
object.func2() # Output:
This function is in school.
This function is in student 1.
]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/61-inheritance-in-python.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/61 - Inheritance in Python.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 28 Dec 2024 17:45:34 GMT</pubDate></item><item><title><![CDATA[Formatting Output]]></title><description><![CDATA[*To format data we can use escape sequences*.
The most common ones are: \n - newline &amp; \t - tab We can also format the output by using the iomanip library.
Include it as <a href="https://soymadip.me/notes?query=tag:include" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#include">#include</a> .
Once it is included, we can format output using the iomanip library. For example, we can set the width of an output using the setw command.#include &lt;iostream&gt;
#include &lt;iomanip&gt; using namespace std; int main() { cout &lt;&lt; "\n\nThe text without any formatting.\n"; cout &lt;&lt; "Ints" &lt;&lt; "Floats" &lt;&lt; "Doubles" &lt;&lt; "\n"; cout &lt;&lt; "\nThe text with setw(15)\n"; cout &lt;&lt; "Ints" &lt;&lt; setw(15) &lt;&lt; "Floats" &lt;&lt; setw(15) &lt;&lt; "Doubles" &lt;&lt; "\n"; cout &lt;&lt; "\n\nThe text with tabs\n"; cout &lt;&lt; "Ints\t" &lt;&lt; "Floats\t" &lt;&lt; "Doubles" &lt;&lt; "\n"; return 0;
}
Output will be: The text without any formating
IntsFloatsDoubles The text with setw(15)
Ints Floats Doubles The text with tabs
IntsFloatsDoubles
]]></description><link>https://soymadip.me/notes/6.-c++/formatting-output.html</link><guid isPermaLink="false">6. C++/Formatting Output.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 28 Dec 2024 06:45:49 GMT</pubDate></item><item><title><![CDATA[Enumerated Constants]]></title><description><![CDATA[C++ also allows for enumerated constants.
This means the programmer can create a new variable type and then assign a finite number of values to it. The syntax of the enum keyword:-enum type_name { value1, value2, value3, . .
} object_names; For example: enum MONTH {Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec}; //OUTPUT:-
// Jan = 0
// Feb = 1
// etc.
In this example the enum variable MONTH has twelve possible values. These 12 values translate into 12 integer values.The program below demonstrates the use of the enum variable./*Enum example*/ #include &lt;iostream&gt; using namespace std; int main()
{ //define MONTH as having 12 possible values enum MONTH {Jan, Feb, Mar, Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec}; //define bestMonth as a variable type MONTHS MONTH bestMonth; //assign bestMonth one of the values of MONTHS bestMonth = Jan; //now we can check the value of bestMonths just //like any other variable if(bestMonth == Jan) { cout&lt;&lt;"I'm not so sure January is the best month\n"; } return 0;
} //OUTPUT:-
I'm not so sure January is the best month Note
we can read more about enumerated variables at <a data-tooltip-position="top" aria-label="http://www.cplusplus.com/doc/tutorial/other_data_types/" rel="noopener nofollow" class="external-link is-unresolved" href="http://www.cplusplus.com/doc/tutorial/other_data_types/" target="_self">C++ Data Types</a>
]]></description><link>https://soymadip.me/notes/6.-c++/enumerated-constants.html</link><guid isPermaLink="false">6. C++/Enumerated Constants.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 28 Dec 2024 06:12:55 GMT</pubDate></item><item><title><![CDATA[Constants]]></title><description><![CDATA[In C++ we can define a variable as a constant. Meaning, its value does not change for the life of the program.Info
We use const keyword to define constant. For example: const int weightGoal = 100;
With this statement we have set the integer weightGoal to 100. It cannot be changed during the program.
If we want to change the value of weightGoal, we will have to edit the source code and recompile it.Look at the error messages that are generated when we attempt to compile and execute the code below. You will see that our attempt to change a constant variable fails.//Goal: use constant variables #include &lt;iostream&gt;
using namespace std; int main()
{ const int weightGoal = 100; cout&lt;&lt;"WeightGoal = "&lt;&lt;weightGoal&lt;&lt;"\n"; weightGoal = 200; cout&lt;&lt;"WeightGoal = "&lt;&lt;weightGoal&lt;&lt;"\n"; return 0;
} //OUTPUT:-
man.cpp: In function ‘int main()’:
man.cpp:8:16: error: assignment of read-only variable ‘weightGoal’ 8 | weightGoal = 200; | ~~~~~~~~~~~^~~~~ ]]></description><link>https://soymadip.me/notes/6.-c++/constants.html</link><guid isPermaLink="false">6. C++/Constants.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 28 Dec 2024 06:00:54 GMT</pubDate></item><item><title><![CDATA[23 - List Methods]]></title><description><![CDATA[This method sorts the list in ascending order. The original list is updatedcolors = ["voilet", "indigo", "blue", "green"]
colors.sort()
print(colors) num = [4,2,5,3,6,1,2,1,2,8,9,7]
num.sort()
print(num)
['blue', 'green', 'indigo', 'voilet']
[1, 1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9] Info
What if you want to print the list in descending order?
We must give reverse=True as a parameter in the sort method.
colors = ["voilet", "indigo", "blue", "green"]
colors.sort(reverse=True)
print(colors) num = [4,2,5,3,6,1,2,1,2,8,9,7]
num.sort(reverse=True)
print(num)
['voilet', 'indigo', 'green', 'blue']
[9, 8, 7, 6, 5, 4, 3, 2, 2, 2, 1, 1]
Info
The reverse parameter is set to False by default.
Note
Do not mistake the reverse parameter with the reverse method.
This method reverses the order of the list. colors = ["voilet", "indigo", "blue", "green"]
colors.reverse()
print(colors) num = [4,2,5,3,6,1,2,1,2,8,9,7]
num.reverse()
print(num)
['green', 'blue', 'indigo', 'voilet']
[7, 9, 8, 2, 1, 2, 1, 6, 3, 5, 2, 4]
This method returns the index of the first occurrence( দুটো থাকলেও ১ম টাই বলবে ) of the list item.colors = ["voilet", "green", "indigo", "blue", "green"]
print(colors.index("green")) num = [4,2,5,3,6,1,2,1,3,2,8,9,7]
print(num.index(3))
Output:1
3
Returns the count of the number of items with the given value.colors = ["voilet", "green", "indigo", "blue", "green"]
print(colors.count("green")) num = [4,2,5,3,6,1,2,1,3,2,8,9,7]
2
3
Returns copy of the list. This can be done to perform operations on the list without modifying the original list. colors = ["voilet", "green", "indigo", "blue"]
newlist = colors.copy()
print(colors)
print(newlist)
['voilet', 'green', 'indigo', 'blue']
['voilet', 'green', 'indigo', 'blue']
This method appends items to the end of the existing list &amp; changes the list.colors = ["voilet", "indigo", "blue"]
colors.append("green")
print(colors)
['voilet', 'indigo', 'blue', 'green']
This method inserts an item at the given index. User has to specify index and the item to be inserted within the insert() method &amp; changes the list.colors = ["voilet", "indigo", "blue"]
# [0] [1] [2] colors.insert(1, "green") #inserts item at index 1
# updated list: colors = ["voilet", "green", "indigo", "blue"]
# indexs [0] [1] [2] [3] print(colors)
['voilet', 'green', 'indigo', 'blue']
This method adds an entire list or any other collection datatype (set, tuple, dictionary) to the existing list.#add a list to a list
colors = ["voilet", "indigo", "blue"]
rainbow = ["green", "yellow", "orange", "red"]
colors.extend(rainbow)
print(colors)
['voilet', 'indigo', 'blue', 'green', 'yellow', 'orange', 'red'] pop() is used to remove an item from list.
countries = ["Spain", "Italy", "India", "England", "Germany"] contries.pop(3)
print(contries)
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/23-list-methods.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/23 - List Methods.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 16 Dec 2024 14:43:14 GMT</pubDate></item><item><title><![CDATA[33 - Dictionary in python]]></title><description><![CDATA[Dictionaries (aka associative array) are ordered collection of data items. They store multiple items in a single variable. Dictionary items are key-value pairs that are separated by commas and enclosed within curly brackets { }. Example- info = {'name':'Karan', 'age':19, 'eligible':True}
print(info) #Output:
{'name': 'Karan', 'age': 19, 'eligible': True}
Info we can also write dictionaries like this: info = { 'name': 'Karan', 'age': 19, 'eligible': True
} This can be used to make code more user-friendly. Values in a dictionary can be accessed using keys by mentioning keys either in square brackets or by using get method.info = {'name':'Karan', 'age':19, 'eligible':True} print(info['name'])
print(info.get('eligible')) # i use this one #Output:
Karan
True We can print all of the values in the dictionary using values() method.
info = {'name':'Karan', 'age':19, 'eligible':True}
print(info.values()) #Output:
dict_values(['Karan', 19, True]) We can print all the keys in the dictionary using keys() method.
info = {'name':'Karan', 'age':19, 'eligible':True}
print(info.keys()) #Output:
dict_keys(['name', 'age', 'eligible']) We can print all the key-value pairs in the dictionary using items() method.
info = {'name':'Karan', 'age':19, 'eligible':True}
print(info.items()) #Output:
dict_items([('name', 'Karan'), ('age', 19), ('eligible', True)])
The clear() method Removes all the items from the dictionary. info = {'name':'Karan', 'age':19, 'eligible':True}
info.clear()
print(info) # Output:
{}
The pop() method removes the key-value pair whose key is passed as a parameter.info = {'name':'Karan', 'age':19, 'eligible':True}
info.pop('eligible')
print(info) #Output:
{'name': 'Karan', 'age': 19}
we can also use the del keyword to remove a dictionary item. If key is not provided, then the del keyword will delete the dictionary entirely.
info = {'name':'Karan', 'age':19, 'eligible':True, 'DOB':2003}
del info['age']
print(info) del info
print(info) #Output:
{'name': 'Karan', 'eligible': True, 'DOB': 2003} NameError: name 'info' is not defined
The popitem() method removes the last key-value pair from the dictionary.info = {'name':'Karan', 'age':19, 'eligible':True, 'DOB':2003}
info.popitem()
print(info) #Output:
{'name': 'Karan', 'age': 19, 'eligible': True}
The update() method updates the value of the key provided to it,
If the item already exists in the dictionary, Else it creates a new key-value pair.
info = {'name':'Karan', 'age':19, 'eligible':True}
print(info) info.update({'age':20})
print(info) #Output:
{'name': 'Karan', 'age': 19, 'eligible': True} {'name': 'Karan', 'age': 20, 'eligible': True, 'DOB': 2001} Using this method, we can copy a dictionary.
info = {'name': 'Karan', 'age': 19, 'eligible': True}
n_info = info.copy()
print(n_info) # Output:
{'name': 'Karan', 'age': 19, 'eligible': True} We can use loop with Dictionaries with .item() Dict = {'name':'Karan', 'age':19, 'eligible':True, 'DOB':2003} for k,v in Dict.items(): # k,v represents keys, values. print(f'{k}:',v) # Output:
name: Karan
age: 19
eligible: True
DOB: 2003 ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/33-dictionary-in-python.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/33 - Dictionary in python.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 27 Sep 2024 02:45:54 GMT</pubDate></item><item><title><![CDATA[Docs]]></title><description><![CDATA[SHIFT
CAPS
CTRL/CONTROL
ALT
MOD2
MOD3
SUPER/WIN/LOGO/MOD4
MOD5]]></description><link>https://soymadip.me/notes/hyprland/docs.html</link><guid isPermaLink="false">Hyprland/Docs.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 24 Sep 2024 02:28:10 GMT</pubDate></item><item><title><![CDATA[README]]></title><description><![CDATA[<a href="https://github.com/mikeroyal?tab=followers" target="_self" rel="noopener nofollow" class="is-unresolved"> </a><img src="https://custom-icon-badges.demolab.com/github/followers/mikeroyal?color=236ad3&amp;labelColor=1155ba&amp;style=for-the-badge&amp;logo=person-add&amp;label=Follow&amp;logoColor=white" title="Follow for Updates" alt="followers" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> <br><img alt="Maintenance" src="https://img.shields.io/maintenance/yes/2024?style=for-the-badge" referrerpolicy="no-referrer" target="_self" class="is-unresolved"><br>
<img alt="Last-Commit" src="https://img.shields.io/github/last-commit/mikeroyal/nixos-guide?style=for-the-badge" referrerpolicy="no-referrer" target="_self" class="is-unresolved">A guide on setting up your NixOS Desktop with all the essential Applications, Tools, and Games to make your experience with NixOS great! This may not be perfect guide for everyone but I feel there is at least one or more perfect solutions for New and Advanced NixOS users.<br>Note
You can easily convert this markdown file to a PDF in <a data-tooltip-position="top" aria-label="https://code.visualstudio.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://code.visualstudio.com/" target="_self">VSCode</a> using this handy extension <a data-tooltip-position="top" aria-label="https://marketplace.visualstudio.com/items?itemName=yzane.markdown-pdf" rel="noopener nofollow" class="external-link is-unresolved" href="https://marketplace.visualstudio.com/items?itemName=yzane.markdown-pdf" target="_self">Markdown PDF</a>.
<br> <img src="https://user-images.githubusercontent.com/45159366/128645106-874b3883-1d6f-46b8-86f4-2cefd54d4117.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> <br>
<a data-tooltip-position="top" aria-label="Nix/NixOS-Guide-main/README > Getting Started" data-href="Nix/NixOS-Guide-main/README#Getting Started" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#Getting_Started_0" class="internal-link" target="_self" rel="noopener nofollow">Getting Started</a> <br>
<a data-tooltip-position="top" aria-label="Nix/NixOS-Guide-main/README > NixOS Developer Resources" data-href="Nix/NixOS-Guide-main/README#NixOS Developer Resources" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#NixOS_Developer_Resources_0" class="internal-link" target="_self" rel="noopener nofollow">NixOS Developer Resources</a> <br>
<a data-tooltip-position="top" aria-label="Nix/NixOS-Guide-main/README > YouTube Tutorials" data-href="Nix/NixOS-Guide-main/README#YouTube Tutorials" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#YouTube_Tutorials_0" class="internal-link" target="_self" rel="noopener nofollow">YouTube Tutorials</a> <br>
<a data-tooltip-position="top" aria-label="Nix/NixOS-Guide-main/README > NixOS Tools and Modules" data-href="Nix/NixOS-Guide-main/README#NixOS Tools and Modules" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#NixOS_Tools_and_Modules_0" class="internal-link" target="_self" rel="noopener nofollow">NixOS Tools &amp; Modules</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#NixOS-Desktop" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#NixOS-Desktop" target="_self">NixOS Desktop</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#programming-languages--with-nixos-support" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#programming-languages--with-nixos-support" target="_self">Programming Languages &amp; Frameworks with NixOS support</a> <br><a class="internal-link" data-href="#C" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#C_0" target="_self" rel="noopener nofollow">C</a>
<br><a class="internal-link" data-href="#python" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#python_0" target="_self" rel="noopener nofollow">Python</a>
<br><a class="internal-link" data-href="#ruby" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#ruby_0" target="_self" rel="noopener nofollow">Ruby</a>
<br><a class="internal-link" data-href="h#Go" href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow">Go</a>
<br><a class="internal-link" data-href="#rust" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#rust_0" target="_self" rel="noopener nofollow">Rust</a>
<br><a class="internal-link" data-href="#scala" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#scala_0" target="_self" rel="noopener nofollow">Scala</a>
<br><a class="internal-link" data-href="#Clojure" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#Clojure_0" target="_self" rel="noopener nofollow">Clojure</a>
<br><a class="internal-link" data-href="#haskell" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#haskell_0" target="_self" rel="noopener nofollow">Haskell</a>
<br><a class="internal-link" data-href="#nodejs" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#nodejs_0" target="_self" rel="noopener nofollow">Node.js</a>
<br><a class="internal-link" data-href="#php" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#php_0" target="_self" rel="noopener nofollow">PHP</a>
<br><a class="internal-link" data-href="#Perl" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#Perl_0" target="_self" rel="noopener nofollow">Perl</a>
<br><a class="internal-link" data-href="#Java" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#Java_0" target="_self" rel="noopener nofollow">Java</a>
<br><a class="internal-link" data-href="#Lua" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#Lua_0" target="_self" rel="noopener nofollow">Lua</a>
<br><a class="internal-link" data-href="#LLVM" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#LLVM_0" target="_self" rel="noopener nofollow">LLVM</a>
<br><a class="internal-link" data-href="#Julia" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#Julia_0" target="_self" rel="noopener nofollow">Julia</a>
<br><a class="internal-link" data-href="#R" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#R_0" target="_self" rel="noopener nofollow">R</a>
<br><a class="internal-link" data-href="#Arduino" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#Arduino_0" target="_self" rel="noopener nofollow">Arduino</a>
<br><a class="internal-link" data-href="#Crystal" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#Crystal_0" target="_self" rel="noopener nofollow">Crystal</a>
<br><a class="internal-link" data-href="#lisp" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#lisp_0" target="_self" rel="noopener nofollow">Lisp</a>
<br><a class="internal-link" data-href="#nim" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#nim_0" target="_self" rel="noopener nofollow">Nim</a>
<br><a class="internal-link" data-href="#Elm" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#Elm_0" target="_self" rel="noopener nofollow">Elm</a>
<br><a class="internal-link" data-href="#elixir" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#elixir_0" target="_self" rel="noopener nofollow">Elixir</a>
<br><a class="internal-link" data-href="#erlang" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#erlang_0" target="_self" rel="noopener nofollow">Erlang</a>
<br><a class="internal-link" data-href="#dotnet" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#dotnet_0" target="_self" rel="noopener nofollow">DotNet</a>
<br><a class="internal-link" data-href="#cuda" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#cuda_0" target="_self" rel="noopener nofollow">CUDA</a>
<br><a class="internal-link" data-href="#qt" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#qt_0" target="_self" rel="noopener nofollow">Qt</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#getting-software" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#getting-software" target="_self">Getting Software</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide/blob/main/README.md#gaming" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide/blob/main/README.md#gaming" target="_self">Gaming</a> <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#steam" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#steam" target="_self">Steam</a>
<br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#protondb" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#protondb" target="_self">ProtonDB</a>
<br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#lutris" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#lutris" target="_self">Lutris</a>
<br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#gamehub" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#gamehub" target="_self">GameHub</a>
<br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#epic-games-store" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#epic-games-store" target="_self">Epic Games Store</a>
<br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#game-streaming" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#game-streaming" target="_self">Game Streaming</a>
<br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#game-emulators" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#game-emulators" target="_self">Game Emulators</a>
<br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#graphics-performance" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#graphics-performance" target="_self">Graphics Performance</a>
<br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#wine" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#wine" target="_self">WINE</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#setting-up-a-macos-workspace" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#setting-up-a-macos-workspace" target="_self">Setting up a macOS Workspace</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#setting-up-a-windows-11-workspace" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#setting-up-a-windows-11-workspace" target="_self">Setting up a Windows 11 Workspace</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#using-android-and-android-apps-on-linux" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#using-android-and-android-apps-on-linux" target="_self">Using Android and Android Apps on Linux</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#professional-audio--video-editing" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#professional-audio--video-editing" target="_self">Professional Audio/Video Editing</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#kubernetes" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#kubernetes" target="_self">Kubernetes</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#machine-learning" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#machine-learning" target="_self">Machine Learning</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#robotics" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#robotics" target="_self">Robotics</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#open-source-security" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#open-source-security" target="_self">Open Source Security</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#differential-privacy" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#differential-privacy" target="_self">Differential Privacy</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#cloud-native-development" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#cloud-native-development" target="_self">Cloud Native Development</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#devops-development" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#devops-development" target="_self">DevOps Development</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#networking" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#networking" target="_self">Networking</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#databases" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#databases" target="_self">Databases</a> <br><a data-tooltip-position="top" aria-label="Nix/NixOS-Guide-main/README > Table of Contents" data-href="Nix/NixOS-Guide-main/README#Table of Contents" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#Table_of_Contents_0" class="internal-link" target="_self" rel="noopener nofollow">Back to Top</a><br><a data-tooltip-position="top" aria-label="https://nixos.org/" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.org/" target="_self">NixOS</a> is a Linux distribution built on top of the <a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Nix" target="_self">Nix package manager</a>. It has tools dedicated to DevOps and deployment tasks.<br><a data-tooltip-position="top" aria-label="https://nixcloud.io/tour/" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixcloud.io/tour/" target="_self">Nix Tour</a> is an interactive tour that uses the actual package manager to learn you the language by example, in the browser.<br><a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Nix" target="_self">Nix</a> is a package manager and build system that parses reproducible build instructions specified in the <a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Nix_Expression_Language" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Nix_Expression_Language" target="_self">Nix Expression Language</a>, is a pure functional language with lazy evaluation. Nix expressions are pure functions taking dependencies as arguments and producing derivation specifying a reproducible build environment for the package. Nix stores the results of the build in unique addresses specified by a hash of the complete dependency tree, creating an immutable package store that allows for atomic upgrades, rollbacks and concurrent installation of different versions of a package, essentially eliminating <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Dependency_hell" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Dependency_hell" target="_self">dependency hell</a>.<br><a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Nix_Expression_Language" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Nix_Expression_Language" target="_self">Nix Expression Language</a> is a pure, lazy, functional language. Purity means that operations in the language don't have side-effects (for instance, there is no variable assignment). The language is not a full-featured, general purpose language. Its main job is to describe packages, compositions of packages, and the variability within packages.<br><a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Nixpkgs" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Nixpkgs" target="_self">Nixpkgs</a> is the largest repository of <a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Nix" target="_self">Nix</a> packages(over 80,000 packages) and <a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/NixOS" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/NixOS" target="_self">NixOS</a> modules. The repository is <a data-tooltip-position="top" aria-label="https://github.com/nixos/nixpkgs" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nixos/nixpkgs" target="_self">hosted on GitHub</a> and maintained by the community, with official backing from the <a data-tooltip-position="top" aria-label="https://nixos.org/" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.org/" target="_self">NixOS Foundation</a>. Additionally, checkout <a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Language-specific_package_helpers" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Language-specific_package_helpers" target="_self">Language-specific package helpers</a> and <a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Alternative_Package_Sets" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Alternative_Package_Sets" target="_self">Alternative Package Sets</a>.<br><a data-tooltip-position="top" aria-label="https://search.nixos.org/packages" rel="noopener nofollow" class="external-link is-unresolved" href="https://search.nixos.org/packages" target="_self">NixOS Packages Search</a> is a tool for searching through NixOS packages.<br> <img src="https://user-images.githubusercontent.com/45159366/173939766-8972583c-855e-4a9b-b9f1-761b60ea255e.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> NixOS Packages Search
<br><a data-tooltip-position="top" aria-label="https://github.com/vlinkz/nix-software-center" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/vlinkz/nix-software-center" target="_self">Nix Software Center</a> is a simple gtk4/libadwaita software center to easily install and manage nix packages.<br> <img src="https://user-images.githubusercontent.com/45159366/211189056-cd719480-ce81-466f-9c8d-562b7296db01.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> NixOS Software Center
<br><a data-tooltip-position="top" aria-label="https://flakehub.com/new" rel="noopener nofollow" class="external-link is-unresolved" href="https://flakehub.com/new" target="_self">FlakeHub</a> is a platform developed by <a data-tooltip-position="top" aria-label="https://determinate.systems/" rel="noopener nofollow" class="external-link is-unresolved" href="https://determinate.systems/" target="_self">Determinate Systems</a> for discovering and publishing <a data-tooltip-position="top" aria-label="https://zero-to-nix.com/concepts/flakes" rel="noopener nofollow" class="external-link is-unresolved" href="https://zero-to-nix.com/concepts/flakes" target="_self">Nix flakes</a>. <a data-tooltip-position="top" aria-label="https://determinate.systems/posts/introducing-flakehub" rel="noopener nofollow" class="external-link is-unresolved" href="https://determinate.systems/posts/introducing-flakehub" target="_self">FlakeHub</a> provides the Nix ecosystem with a variety of new capabilities:
The ability to explore the Nix flake landscape.
Semantic versioning for flakes, including version modifiers like ~ (flexible patch) and = (exact match).
Automated flake publishing with GitHub Actions.
<br> <img src="https://github.com/mikeroyal/NixOS-Guide/assets/45159366/b2b7526d-2192-4ee0-990c-d9733c3a9a20" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> FlakeHub
<br><a data-tooltip-position="top" aria-label="https://github.com/DeterminateSystems/nix-installer" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/DeterminateSystems/nix-installer" target="_self">Determinate Nix Installer</a> is an opinionated alternative to the official <a data-tooltip-position="top" aria-label="https://nixos.org/download.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.org/download.html" target="_self">Nix install scripts</a>.The nix-installer tool is ready to use in a number of environments:<br>Podman Linux Containers |	✓ (via <a data-tooltip-position="top" aria-label="https://systemd.io/" rel="noopener nofollow" class="external-link is-unresolved" href="https://systemd.io/" target="_self">systemd</a>) |	✓ |	Stable|
|Docker Containers |	|✓ |	Stable|<br>
|Linux (i686) |	✓ (via <a data-tooltip-position="top" aria-label="https://systemd.io/" rel="noopener nofollow" class="external-link is-unresolved" href="https://systemd.io/" target="_self">systemd</a>) |	✓ |Unstable|<br><a data-tooltip-position="top" aria-label="Nix/NixOS-Guide-main/README > Table of Contents" data-href="Nix/NixOS-Guide-main/README#Table of Contents" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#Table_of_Contents_0" class="internal-link" target="_self" rel="noopener nofollow">Back to Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/" target="_self">NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://nixos.org/guides/nix-pills/" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.org/guides/nix-pills/" target="_self">NixOS Pills - Developer Guides</a> <br>
<a data-tooltip-position="top" aria-label="https://nixos.org/learn.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.org/learn.html" target="_self">NixOS Learn</a> <br>
<a data-tooltip-position="top" aria-label="https://nixos.org/manual/nix/stable/#chap-installation" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.org/manual/nix/stable/#chap-installation" target="_self">Nix Package Manager Manual</a> <br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Home_Manager" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Home_Manager" target="_self">Home Manager - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://shopify.engineering/what-is-nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://shopify.engineering/what-is-nix" target="_self">What Is Nix — Developer Tooling | Shopify Engineering</a> <br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Configuration_Collection" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Configuration_Collection" target="_self">NixOS configurations collection</a> <br>
<a data-tooltip-position="top" aria-label="https://www.linode.com/docs/guides/install-nixos-on-linode/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.linode.com/docs/guides/install-nixos-on-linode/" target="_self">Install and Configure NixOS on a Linode</a> <br>
<a data-tooltip-position="top" aria-label="https://zero-to-nix.com/start/install" rel="noopener nofollow" class="external-link is-unresolved" href="https://zero-to-nix.com/start/install" target="_self">Zero to Nix from Determinate Systems</a> <br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/index.php?title=Cheatsheet&amp;useskin=vector" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/index.php?title=Cheatsheet&amp;useskin=vector" target="_self">Cheatsheet - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://nix.dev/" rel="noopener nofollow" class="external-link is-unresolved" href="https://nix.dev/" target="_self">nix.dev guide for developers</a> <br>
<a data-tooltip-position="top" aria-label="https://search.nix.gsc.io" rel="noopener nofollow" class="external-link is-unresolved" href="https://search.nix.gsc.io" target="_self">Hound - search across all/selected Nix-related repositories.</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/tazjin/nix-1p" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/tazjin/nix-1p" target="_self">Nix(A One Pager) - A one page introduction to Nix, the language</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/justinwoo/nix-shorts/" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/justinwoo/nix-shorts/" target="_self">Nix Shorts</a> <br>
<a data-tooltip-position="top" aria-label="https://ianthehenry.com/posts/how-to-learn-nix/" rel="noopener nofollow" class="external-link is-unresolved" href="https://ianthehenry.com/posts/how-to-learn-nix/" target="_self">How to Learn Nix tutorials by Ian Henry</a> <br>
<a data-tooltip-position="top" aria-label="https://ghedam.at/24353/tutorial-getting-started-with-home-manager-for-nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://ghedam.at/24353/tutorial-getting-started-with-home-manager-for-nix" target="_self">Getting started with Home Manager for Nix</a> <br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/NixOS_on_ARM/Raspberry_Pi_4" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/NixOS_on_ARM/Raspberry_Pi_4" target="_self">NixOS Wiki - Raspberry Pi 4</a> <br>
<a data-tooltip-position="top" aria-label="https://hydra.nixos.org/job/nixos/trunk-combined/nixos.sd_image.aarch64-linux" rel="noopener nofollow" class="external-link is-unresolved" href="https://hydra.nixos.org/job/nixos/trunk-combined/nixos.sd_image.aarch64-linux" target="_self">NixOS aarm64 SD image</a> <br>
<a data-tooltip-position="top" aria-label="https://nixery.dev/" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixery.dev/" target="_self">nixery.dev</a> <br>
<a data-tooltip-position="top" aria-label="https://discourse.nixos.org/" rel="noopener nofollow" class="external-link is-unresolved" href="https://discourse.nixos.org/" target="_self">NixOS Discourse Forum</a> <br>
<a data-tooltip-position="top" aria-label="https://nixcon.org/" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixcon.org/" target="_self">NixCon- annual community conference</a> <br>
<a data-tooltip-position="top" aria-label="https://nixos.org/community.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.org/community.html" target="_self">NixOS Community</a> <br>
<a data-tooltip-position="top" aria-label="https://nixos.org/governance.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.org/governance.html" target="_self">NixOS Governance</a> <br>
<a data-tooltip-position="top" aria-label="https://nixos.org/donate.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.org/donate.html" target="_self">Consider Donating to the NixoS Project</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/ryan4yin/nixos-and-flakes-book" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/ryan4yin/nixos-and-flakes-book" target="_self">NixOS &amp; Flakes Book</a> <br>
<a data-tooltip-position="top" aria-label="https://josiahalenbrown.substack.com/p/managing-your-nixos-configuration" rel="noopener nofollow" class="external-link is-unresolved" href="https://josiahalenbrown.substack.com/p/managing-your-nixos-configuration" target="_self">Managing your NixOS configuration with Flakes and Home Manager!</a> <br><a class="internal-link" data-href="#table-of-contents" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#table-of-contents_0" target="_self" rel="noopener nofollow">Back to the Top</a><br><a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=fuWPuJZ9NcU" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=fuWPuJZ9NcU" target="_self"></a><img title="NixOS is Mindblowing" alt="NixOS is Mindblowing" src="https://ytcards.demolab.com/?id=fuWPuJZ9NcU&amp;lang=en&amp;background_color=%230d1117&amp;title_color=%23ffffff&amp;stats_color=%23dedede&amp;width=240" referrerpolicy="no-referrer" target="_self" class="is-unresolved"><br>
<a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=ck4J2Faa7Fc" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=ck4J2Faa7Fc" target="_self"></a><img title="NixOS Is The Power User Distro (Now With An Easy Installer!)" alt="NixOS Is The Power User Distro (Now With An Easy Installer!)" src="https://ytcards.demolab.com/?id=ck4J2Faa7Fc&amp;lang=en&amp;background_color=%230d1117&amp;title_color=%23ffffff&amp;stats_color=%23dedede&amp;width=240" referrerpolicy="no-referrer" target="_self" class="is-unresolved"><br>
<a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=AGVXJ-TIv3Y" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=AGVXJ-TIv3Y" target="_self"></a><img title="NixOS Setup Guide - Configuration / Home-Manager / Flakes" alt="NixOS Setup Guide - Configuration / Home-Manager / Flakes" src="https://ytcards.demolab.com/?id=AGVXJ-TIv3Y&amp;lang=en&amp;background_color=%230d1117&amp;title_color=%23ffffff&amp;stats_color=%23dedede&amp;width=240" referrerpolicy="no-referrer" target="_self" class="is-unresolved"><br>
<a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=9fWrxmEYGAs" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=9fWrxmEYGAs" target="_self"></a><img title="NixOS Intro - Installation and basic usage" alt="NixOS Intro - Installation and basic usage" src="https://ytcards.demolab.com/?id=9fWrxmEYGAs&amp;lang=en&amp;background_color=%230d1117&amp;title_color=%23ffffff&amp;stats_color=%23dedede&amp;width=240" referrerpolicy="no-referrer" target="_self" class="is-unresolved"><br>
<a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=jXd-hkP4xnU" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=jXd-hkP4xnU" target="_self"></a><img title="Nixpkgs - Python packaging, and development workflow." alt="Nixpkgs - Python packaging, and development workflow." src="https://ytcards.demolab.com/?id=jXd-hkP4xnU&amp;lang=en&amp;background_color=%230d1117&amp;title_color=%23ffffff&amp;stats_color=%23dedede&amp;width=240" referrerpolicy="no-referrer" target="_self" class="is-unresolved"><br>
<a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=oPymb2-IXbg" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=oPymb2-IXbg" target="_self"></a><img title="NixOS: How it works and how to install it!" alt="NixOS: How it works and how to install it!" src="https://ytcards.demolab.com/?id=oPymb2-IXbg&amp;lang=en&amp;background_color=%230d1117&amp;title_color=%23ffffff&amp;stats_color=%23dedede&amp;width=240" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> <br><a data-tooltip-position="top" aria-label="Nix/NixOS-Guide-main/README > Table of Contents" data-href="Nix/NixOS-Guide-main/README#Table of Contents" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#Table_of_Contents_0" class="internal-link" target="_self" rel="noopener nofollow">Back to Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://github.com/nixos/hydra" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nixos/hydra" target="_self">Hydra</a> is Nix's official continuous integration and build system. <br>
<a data-tooltip-position="top" aria-label="https://github.com/xtruder/kubenix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/xtruder/kubenix" target="_self">Kubenix</a> is a Kubernetes resource builder written in Nix. <br>
<a data-tooltip-position="top" aria-label="https://github.com/xtruder/nix-kubernetes" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/xtruder/nix-kubernetes" target="_self">Nix-kubernetes</a> is a Kubernetes deployment manager written in nix. <br>
<a data-tooltip-position="top" aria-label="https://github.com/svanderburg/disnix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/svanderburg/disnix" target="_self">Disnix</a> is a microservice architecture built with Nix. <br>
<a data-tooltip-position="top" aria-label="https://github.com/TaktInc/hail" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/TaktInc/hail" target="_self">Hail</a> is a service for pull-based continuous deployment. <br>
<a data-tooltip-position="top" aria-label="https://github.com/DBCDK/morph" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/DBCDK/morph" target="_self">Morph</a> is a NixOS deployment tool. <br>
<a data-tooltip-position="top" aria-label="https://nixery.dev/" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixery.dev/" target="_self">Nixery</a> is a ad-hoc container images from Nix. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/home-manager" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/home-manager" target="_self">Home Manager</a> is a tool to manage your user configuration just like NixOS.s. <br>
<a data-tooltip-position="top" aria-label="https://github.com/Jovian-Experiments/Jovian-NixOS" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Jovian-Experiments/Jovian-NixOS" target="_self">Jovian NixOS</a> is a set of packages and configurations for running NixOS on the Steam Deck. <br>
<a data-tooltip-position="top" aria-label="https://github.com/pta2002/nixvim" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/pta2002/nixvim" target="_self">NixVim</a> is a NeoVim distribution built with Nix modules and Nixpkgs. <br>
<a data-tooltip-position="top" aria-label="https://gitlab.com/simple-nixos-mailserver/nixos-mailserver" rel="noopener nofollow" class="external-link is-unresolved" href="https://gitlab.com/simple-nixos-mailserver/nixos-mailserver" target="_self">Simple Nixos Mailserver</a> is a complete mailserver, managed with NixOS modules. <br>
<a data-tooltip-position="top" aria-label="https://github.com/DeterminateSystems/flake-checker" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/DeterminateSystems/flake-checker" target="_self">Nix Flake Checker</a> is a tool from Determinate Systems that performs "health" checks on the flake.lock files in your flake-powered Nix projects. Its goal is to help your Nix projects stay on recent and supported versions of Nixpkgs. <br>
<a data-tooltip-position="top" aria-label="https://numtide.github.io/nixos-anywhere/" rel="noopener nofollow" class="external-link is-unresolved" href="https://numtide.github.io/nixos-anywhere/" target="_self">NixOS Anywhere</a> is a tool that let's you install NixoS everywhere via ssh on a target machine running x86_64 Linux with <a data-tooltip-position="top" aria-label="https://man7.org/linux/man-pages/man8/kexec.8.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://man7.org/linux/man-pages/man8/kexec.8.html" target="_self">kexec</a> support. <br>
<a data-tooltip-position="top" aria-label="https://github.com/danth/stylix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/danth/stylix" target="_self">Stylix</a> is a system-wide colorscheming and typography for NixOS. <br>
<a data-tooltip-position="top" aria-label="https://github.com/freuk/awesome-nix-hpc" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/freuk/awesome-nix-hpc" target="_self">Awesome-Nix-HPC</a> is a High Performance Computing package sets. <br>
<a data-tooltip-position="top" aria-label="https://github.com/LnL7/nix-darwin" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/LnL7/nix-darwin" target="_self">Nix-darwin</a> is a tool to manage macOS configuration just like on NixOS. <br>
<a data-tooltip-position="top" aria-label="https://github.com/bandithedoge/nixpkgs-firefox-darwin" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/bandithedoge/nixpkgs-firefox-darwin" target="_self">Nixpkgs-firefox-darwin</a> is a nikpkg to automatically updated Firefox binary packages for macOS. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/nixpkgs-wayland" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/nixpkgs-wayland" target="_self">Nixpkgs-wayland</a> is a bleeding-edge Wayland packages. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/NUR/" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/NUR/" target="_self">NUR(Nix User Repositories)</a> is the mother of all overlays, allowing access to user repositories and installing packages via attributes. <br>
<a data-tooltip-position="top" aria-label="https://github.com/kamadorueda/alejandra" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/kamadorueda/alejandra" target="_self">Alejandra</a> is a opinionated Nix code formatter optimized for speed and consistency. <br>
<a data-tooltip-position="top" aria-label="https://github.com/Shopify/comma" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Shopify/comma" target="_self">Comma</a> is a tool that quickly runs any binary; wraps together nix run and nix-index <br>
<a data-tooltip-position="top" aria-label="https://github.com/zhaofengli/colmena" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/zhaofengli/colmena" target="_self">Colmena</a> is a simple, stateless NixOS deployment tool modeled after NixOps and morph. <br>
<a data-tooltip-position="top" aria-label="https://cgit.krebsco.de/krops/about/" rel="noopener nofollow" class="external-link is-unresolved" href="https://cgit.krebsco.de/krops/about/" target="_self">Krops</a> is a lightweight toolkit to deploy NixOS systems, remotely or locally. <br>
<a data-tooltip-position="top" aria-label="https://github.com/saschagrunert/kubernix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/saschagrunert/kubernix" target="_self">KuberNix</a> is a single-dependency Kubernetes clusters via Nix packages. <br>
<a data-tooltip-position="top" aria-label="https://github.com/tweag/terraform-nixos" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/tweag/terraform-nixos" target="_self">Terraform-nixos</a> is a set of Terraform modules designed to deploy NixOS. <br>
<a data-tooltip-position="top" aria-label="https://terranix.org" rel="noopener nofollow" class="external-link is-unresolved" href="https://terranix.org" target="_self">Terranix</a> is a tool to use Nix and the NixOS module system to write your Terraform code. <br>
<a data-tooltip-position="top" aria-label="https://github.com/hercules-ci/arion#readme" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/hercules-ci/arion#readme" target="_self">Arion</a> is a configure Docker Compose with Nix modules. <br>
<a data-tooltip-position="top" aria-label="https://github.com/serokell/deploy-rs" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/serokell/deploy-rs" target="_self">Deploy-rs</a> is a simple multi-profile Nix-flake deploy tool. <br>
<a data-tooltip-position="top" aria-label="https://github.com/fractalide/fractalide" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/fractalide/fractalide" target="_self">Fractalide</a> is a reusable Reproducible Composable Software. <br>
<a data-tooltip-position="top" aria-label="https://github.com/Mic92/nixos-shell" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Mic92/nixos-shell" target="_self">Nixos-shell</a> is a simple headless VM configuration using Nix (similar to Vagrant). <br>
<a data-tooltip-position="top" aria-label="https://github.com/arnarg/pushnix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/arnarg/pushnix" target="_self">Pushnix</a> is a simple cli utility that pushes NixOS configuration and triggers a rebuild using ssh. <br>
<a data-tooltip-position="top" aria-label="https://github.com/musnix/musnix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/musnix/musnix" target="_self">Musnix</a> is a real-time audio modules for NixOS. <br>
<a data-tooltip-position="top" aria-label="https://github.com/matthewbauer/nix-bundle" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/matthewbauer/nix-bundle" target="_self">Nix-bundle</a> is a package Nix attributes into single-file executables. <br>
<a data-tooltip-position="top" aria-label="https://github.com/erikarvstedt/extra-container" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/erikarvstedt/extra-container" target="_self">Extra-container</a> is a run declarative NixOS containers from the command line. Similar to nixos-shell (chrisfarms). <br>
<a data-tooltip-position="top" aria-label="https://github.com/nixcloud/nixcloud-webservices" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nixcloud/nixcloud-webservices" target="_self">Nixcloud-webservices</a> is a set of nixpkgs extension for web-related technologies. <br>
<a data-tooltip-position="top" aria-label="https://github.com/DavHau/mach-nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/DavHau/mach-nix" target="_self">Mach-nix</a> is a tool that makes it easy to create and share reproducible python environments or packages. Existing tools for python package management often suffer from reproducibility and complexity issues, requiring a multitude of tools and additional virtualization layers to work sufficiently. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/impermanence" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/impermanence" target="_self">Impermanence</a> is a set of modules to help you handle persistent state on systems with ephemeral root storage. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/vagrant-nixos-plugin" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/vagrant-nixos-plugin" target="_self">NixOS Vagrant Plugin</a> is a plugin that adds nix provisioning for <a data-tooltip-position="top" aria-label="https://nixos.org/" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.org/" target="_self">NixOS</a> guests to <a data-tooltip-position="top" aria-label="https://www.vagrantup.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.vagrantup.com/" target="_self">Vagrant</a>. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/fenix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/fenix" target="_self">Fenix</a> is a Rust toolchains and Rust analyzer nightly for nix. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/NixOS-WSL" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/NixOS-WSL" target="_self">NixOS-WSL</a> is a minimal root filesystem for running NixOS on WSL. It can be used with DistroLauncher as install.tar.gz or as input to wsl --import --version 2. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nixbitcoin/nix-bitcoin/" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nixbitcoin/nix-bitcoin/" target="_self">Nix-bitcoin</a> is a set of NixOS modules to install a bitcoin node with emphasis on security. <br>
<a data-tooltip-position="top" aria-label="https://github.com/Mic92/nixpkgs-review" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Mic92/nixpkgs-review" target="_self">Nixpkgs-review</a> is a review nixpkgs pull requests. <br>
<a data-tooltip-position="top" aria-label="https://github.com/Mic92/nix-update" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Mic92/nix-update" target="_self">Nix-update</a> is a swiss army knife for updating nix packages. <br>
<a data-tooltip-position="top" aria-label="https://github.com/madjar/nox" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/madjar/nox" target="_self">Nox</a> is a set of tools to make Nix easier to use. <br>
<a data-tooltip-position="top" aria-label="https://github.com/Gabriel439/nix-diff" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Gabriel439/nix-diff" target="_self">Nix-diff</a> is a tool to compare Nix derivations. <br>
<a data-tooltip-position="top" aria-label="https://github.com/FRidh/niff" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/FRidh/niff" target="_self">Niff</a> is a tool to compare two Nix expressions to determine what attributes changes. <br>
<a data-tooltip-position="top" aria-label="https://github.com/peterhoeg/nix-upgrade-scripts" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/peterhoeg/nix-upgrade-scripts" target="_self">Nix-upgrade-scripts</a> is a set of tools for Nixpkgs maintainers to upgrade packages. <br>
<a data-tooltip-position="top" aria-label="https://github.com/grafted-in/nixops-manager" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/grafted-in/nixops-manager" target="_self">Nixops-manager</a> is a NixOps wrapper for Git repositories. <br>
<a data-tooltip-position="top" aria-label="https://github.com/taktoa/narfuse" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/taktoa/narfuse" target="_self">Narfuse</a> is a FUSE filesystem for mounting Nix archive (NAR) files as a virtual Nix store. <br>
<a data-tooltip-position="top" aria-label="https://github.com/craigmbooth/nix-visualize" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/craigmbooth/nix-visualize" target="_self">Nix-visualize</a> is a tool to visualize the dependencies of a given package. <br>
<a data-tooltip-position="top" aria-label="https://github.com/rycee/home-manager" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/rycee/home-manager" target="_self">Home-manager</a> is a system for managing a user environment using Nix. <br>
<a data-tooltip-position="top" aria-label="https://github.com/guibou/nixGL" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/guibou/nixGL" target="_self">NixGl</a> is a wrapper to run OpenGL applications outside of NixOS. <br>
<a data-tooltip-position="top" aria-label="https://github.com/serokell/nixfmt" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/serokell/nixfmt" target="_self">Nixfmt</a> is a formatter for Nix code. <br>
<a data-tooltip-position="top" aria-label="https://github.com/bennofs/nix-index" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/bennofs/nix-index" target="_self">Nix-index</a> is a tool that quickly locate Nix packages with specific files. <br>
<a data-tooltip-position="top" aria-label="https://github.com/msteen/nix-prefetch" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/msteen/nix-prefetch" target="_self">Nix-prefetch</a> is a universal tool for updating source checksums. <br>
<a data-tooltip-position="top" aria-label="https://github.com/utdemir/nix-tree" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/utdemir/nix-tree" target="_self">Nix-tree</a> is a tool that let's you interactively browse the dependency graph of Nix derivations. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nerdypepper/statix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nerdypepper/statix" target="_self">Statix</a> is a linter/fixer to check for and fix antipatterns in Nix code. <br>
<a data-tooltip-position="top" aria-label="https://github.com/xzfc/cached-nix-shell" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/xzfc/cached-nix-shell" target="_self">Cached-nix-shell</a> is a nix-shell replacement that uses caching to open subsequent shells quickly. <br>
<a data-tooltip-position="top" aria-label="https://cachix.org/" rel="noopener nofollow" class="external-link is-unresolved" href="https://cachix.org/" target="_self">Cachix</a> is a hosted binary cache service; free for open-source projects. <br>
<a data-tooltip-position="top" aria-label="https://github.com/numtide/devshell" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/numtide/devshell" target="_self">Devshell</a> is a mkShell with extra bits and a toml config option to be able to onboard non-nix users. <br>
<a data-tooltip-position="top" aria-label="https://github.com/numtide/flake-utils" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/numtide/flake-utils" target="_self">Flake-utils</a> - Pure Nix flake utility functions to help with writing flakes. <br>
<a data-tooltip-position="top" aria-label="https://github.com/hercules-ci/gitignore.nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/hercules-ci/gitignore.nix" target="_self">Gitignore.nix</a> - The most feature-complete and easy-to-use .gitignore integration. <br>
<a data-tooltip-position="top" aria-label="https://github.com/target/lorri/" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/target/lorri/" target="_self">Lorri</a> is a much better nix-shell for development that augments direnv. <br>
<a data-tooltip-position="top" aria-label="https://github.com/fluidattacks/makes" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/fluidattacks/makes" target="_self">Makes</a> is a Nix-based CI/CD pipeline framework for building, testing, and releasing projects in any language, from anywhere. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nmattia/niv/" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nmattia/niv/" target="_self">Niv</a> is a easy dependency management for Nix projects with package pinning. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/nix-direnv" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/nix-direnv" target="_self">Nix-direnv</a> is a fast loader and flake-compliant configuration for the direnv environment auto-loader. <br>
<a data-tooltip-position="top" aria-label="https://github.com/Mic92/nixpkgs-review" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Mic92/nixpkgs-review" target="_self">Nixpkgs-review</a> is the best tool to verify that a pull-request in Nixpkgs is building properly. <br>
<a data-tooltip-position="top" aria-label="https://github.com/cachix/pre-commit-hooks.nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/cachix/pre-commit-hooks.nix" target="_self">Pre-commit-hooks.nix</a> is a tool to run linters/formatters at commit time and on your CI. <br>
<a data-tooltip-position="top" aria-label="https://github.com/danielfullmer/robotnix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/danielfullmer/robotnix" target="_self">Robotnix</a> is a declarative and reproducible build system for Android (AOSP) images. <br>
<a data-tooltip-position="top" aria-label="https://github.com/jtojnar/nixpkgs-hammering" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/jtojnar/nixpkgs-hammering" target="_self">Nixpkgs-hammering</a> is a nixpkg to beat your package expressions into a shape. <br>
<a data-tooltip-position="top" aria-label="https://github.com/thiagokokada/nix-alien" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/thiagokokada/nix-alien" target="_self">Nix-alien</a> is a tool to run unpatched binaries on Nix/NixOS easily. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/disko" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/disko" target="_self">Disko</a> is a declarative disk partitioning tool using Nix. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/NixOS-WSL" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/NixOS-WSL" target="_self">NixOS on WSL</a> is a minimal root filesystem for running NixOS on WSL. It can be used with DistroLauncher as install.tar.gz or as input to wsl --import --version 2. <br>
<a data-tooltip-position="top" aria-label="https://github.com/jollheef/appvm" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/jollheef/appvm" target="_self">Appvm</a> is a simple application VMs (hypervisor-based sandbox) based on Nix package manager. It uses one read-only /nix directory for all appvms. So creating a new appvm (but not first) is just about one minute. <br>
<a data-tooltip-position="top" aria-label="https://github.com/astro/deadnix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/astro/deadnix" target="_self">Deadnix</a> is a tool that scan .nix files for dead code (unused variable bindings). <br>
<a data-tooltip-position="top" aria-label="https://github.com/nlewo/nix2container" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nlewo/nix2container" target="_self">nix2container</a> isa tool that provides an efficient container development workflow with images built by Nix: it doesn't write tarballs to the Nix store and allows to skip already pushed layers (without having to rebuild them). <br>
<a data-tooltip-position="top" aria-label="https://gitlab.com/simple-nixos-mailserver/nixos-mailserver" rel="noopener nofollow" class="external-link is-unresolved" href="https://gitlab.com/simple-nixos-mailserver/nixos-mailserver" target="_self">nixos-mailserver</a> is a complete and Simple Nixos Mailserver. <br><a data-tooltip-position="top" aria-label="Nix/NixOS-Guide-main/README > Table of Contents" data-href="Nix/NixOS-Guide-main/README#Table of Contents" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#Table_of_Contents_0" class="internal-link" target="_self" rel="noopener nofollow">Back to Top</a>
<br><a data-tooltip-position="top" aria-label="https://github.com/nix-community/nixos-generators" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/nixos-generators" target="_self">nixos-generators</a> is a NixOS config and build multiple different images types including VirtualBox VMs, Azure images, and installation ISOs. <br><a data-tooltip-position="top" aria-label="https://github.com/samuela/nixos-up" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/samuela/nixos-up" target="_self">nixos-up</a> is a super easy NixOS installer that can be used from the installation ISO.
<br><a data-tooltip-position="top" aria-label="https://numtide.github.io/nixos-anywhere/" rel="noopener nofollow" class="external-link is-unresolved" href="https://numtide.github.io/nixos-anywhere/" target="_self">NixOS Anywhere</a> is a tool that let's you install NixoS everywhere via ssh on a target machine running x86_64 Linux with <a data-tooltip-position="top" aria-label="https://man7.org/linux/man-pages/man8/kexec.8.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://man7.org/linux/man-pages/man8/kexec.8.html" target="_self">kexec</a> support. If you're installing NixOS, the nixos-anywhere (formerly known as nixos-remote) tool allows you to pre-configure the whole process.
<br><a data-tooltip-position="top" aria-label="https://github.com/Jovian-Experiments/Jovian-NixOS" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Jovian-Experiments/Jovian-NixOS" target="_self">Jovian NixOS</a> is a set of packages and configurations for running NixOS on the Steam Deck. <br><a data-tooltip-position="top" aria-label="https://github.com/peterhoeg/nix-upgrade-scripts" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/peterhoeg/nix-upgrade-scripts" target="_self">nix-upgrade-scripts</a> - Tools for Nixpkgs maintainers to upgrade packages.
<br><a data-tooltip-position="top" aria-label="https://github.com/Mic92/nixpkgs-review" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Mic92/nixpkgs-review" target="_self">nixpkgs-review</a> - Review nixpkgs pull requests. <br><a data-tooltip-position="top" aria-label="https://github.com/bennofs/nix-index" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/bennofs/nix-index" target="_self">nix-index</a> - Quickly locate nix packages with specific files.
<br><a data-tooltip-position="top" aria-label="https://github.com/symphorien/nix-du" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/symphorien/nix-du" target="_self">nix-du</a> - Find which gc-roots take disk space in a nix store.
<br><a data-tooltip-position="top" aria-label="https://github.com/nix-hackers/nix-info" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-hackers/nix-info" target="_self">nix-info</a> - Homebrew info querying for Nix.
<br><a data-tooltip-position="top" aria-label="https://github.com/flyingcircusio/userscan" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/flyingcircusio/userscan" target="_self">userscan</a> - Scans directories containing manually compiled programs and registers them with the Nix garbage collector.
<br> <img src="https://user-images.githubusercontent.com/45159366/173939768-31847173-88ab-45f0-8501-0980d1a2a29e.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> NixOS Desktop with the new Calamares Installer
<br> <img src="https://user-images.githubusercontent.com/45159366/128645111-b2a92dd2-f246-4df0-b05c-5b0ffce05448.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> NixOS with the Plasma Desktop
<br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/C" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/C" target="_self">C - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/MaskRay/ccls" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/MaskRay/ccls" target="_self">ccls</a> is a C/C++/Objective-C language server. <br><a data-tooltip-position="top" aria-label="Nix/NixOS-Guide-main/README > Table of Contents" data-href="Nix/NixOS-Guide-main/README#Table of Contents" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#Table_of_Contents_0" class="internal-link" target="_self" rel="noopener nofollow">Back to Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Python" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Python" target="_self">Python - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/DavHau/mach-nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/DavHau/mach-nix" target="_self">Mach-nix</a> is a tool to create highly reproducible python environments. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/poetry2nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/poetry2nix" target="_self">Poetry2nix</a> is a tool to build Python packages directly from <a data-tooltip-position="top" aria-label="https://python-poetry.org/" rel="noopener nofollow" class="external-link is-unresolved" href="https://python-poetry.org/" target="_self">Poetry's</a> poetry.lock. No conversion step needed. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/pypi2nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/pypi2nix" target="_self">Pypi2nix</a> is a tool to generate Nix expressions for Python packages. <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Ruby" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Ruby" target="_self">Ruby - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/bundix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/bundix" target="_self">Bundix</a> is a tool that generates a Nix expression for your Bundler-managed application. <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Go" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Go" target="_self">Go - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/tweag/gomod2nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/tweag/gomod2nix" target="_self">Gomod2nix</a> is a tool to convert applications using Go modules to Nix expressions. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nixcloud/dep2nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nixcloud/dep2nix" target="_self">Dep2nix</a> is a tool using golang/dep to create a deps.nix file for go projects to package them for nixpkgs. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/vgo2nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/vgo2nix" target="_self">Vgo2nix</a> is a tool to Convert go.mod files to nixpkgs buildGoPackage compatible deps.nix files. <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Rust" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Rust" target="_self">Rust - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/fenix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/fenix" target="_self">Fenix</a> is a Rust toolchains and Rust analyzer nightly for nix. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nmattia/naersk" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nmattia/naersk" target="_self">Naersk</a> is a build to Rust packages directly from Cargo.lock. No conversion step needed. <br>
<a data-tooltip-position="top" aria-label="https://github.com/yusdacra/nix-cargo-integration" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/yusdacra/nix-cargo-integration" target="_self">Nix-cargo-integration</a> is a library that allows easy and effortless integration for Cargo projects. <br>
<a data-tooltip-position="top" aria-label="https://github.com/mozilla/nixpkgs-mozilla" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mozilla/nixpkgs-mozilla" target="_self">Nixpkgs-mozilla</a> is Mozilla's overlay with Rust toolchains and Firefox. <br>
<a data-tooltip-position="top" aria-label="https://github.com/yusdacra/rust-nix-templater" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/yusdacra/rust-nix-templater" target="_self">Rust-nix-templater</a> is a tool that generates Nix build and development files for Rust projects. <br>
<a data-tooltip-position="top" aria-label="https://github.com/oxalica/rust-overlay" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/oxalica/rust-overlay" target="_self">Rust-overlay</a> is a pure and reproducible nix overlay of binary distributed Rust toolchains. <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://gitlab.com/teozkr/Sbtix" rel="noopener nofollow" class="external-link is-unresolved" href="https://gitlab.com/teozkr/Sbtix" target="_self">Sbtix</a> isa tool that generates a Nix definition that represents your SBT project's dependencies. It then uses this to build a Maven repo containing the stuff your project needs, and feeds it back to your SBT build. <br>
<a data-tooltip-position="top" aria-label="https://github.com/zaninime/sbt-derivation" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/zaninime/sbt-derivation" target="_self">Sbt-derivation</a> is a mkDerivation for sbt, similar to buildGoModule. <br>
<a data-tooltip-position="top" aria-label="https://github.com/gvolpe/sbt-nix.g8" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/gvolpe/sbt-nix.g8" target="_self">Sbt-nix.g8</a> is a <a data-tooltip-position="top" aria-label="https://github.com/foundweekends/giter8" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/foundweekends/giter8" target="_self">giter8</a> template for new Scala projects with Nix support. <br> <a class="internal-link" data-href="#table-of-contents" href="https://soymadip.me/notes/nix/nixos-guide-main/readme.html#table-of-contents_0" target="_self" rel="noopener nofollow">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=clojure" rel="noopener nofollow" class="external-link is-unresolved" href="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=clojure" target="_self">Clojure Packages for NixOS</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/jlesquembre/clj-nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/jlesquembre/clj-nix" target="_self">Clj-nix</a> is Nix helpers for Clojure projects. <br>
<a data-tooltip-position="top" aria-label="https://github.com/hlolli/clj2nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/hlolli/clj2nix" target="_self">Clj2nix</a> is a tool that converts deps.edn to a nix expression. <br>
<a data-tooltip-position="top" aria-label="https://github.com/bevuta/clojure-nix-locker" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/bevuta/clojure-nix-locker" target="_self">Clojure-nix-locker</a> is a simple and flexible tool to build clojure projects with Nix. <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Haskell" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Haskell" target="_self">Haskell - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/NixOS/cabal2nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/NixOS/cabal2nix" target="_self">Cabal2nix</a> is a tool that converts a Cabal file into a Nix build expression. <br>
<a data-tooltip-position="top" aria-label="https://github.com/input-output-hk/haskell.nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/input-output-hk/haskell.nix" target="_self">Haskell.nix</a> is an alternative Haskell Infrastructure for Nixpkgs. <br>
<a data-tooltip-position="top" aria-label="https://github.com/matthewbauer/nix-haskell-mode" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/matthewbauer/nix-haskell-mode" target="_self">Nix-haskell-mode</a> is an automatic Haskell setup in Emacs. <br>
<a data-tooltip-position="top" aria-label="https://github.com/pwm/nixkell" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/pwm/nixkell" target="_self">Nixkell</a> is a Haskell project template using Nix and direnv. <br>
<a data-tooltip-position="top" aria-label="https://github.com/input-output-hk/stack2nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/input-output-hk/stack2nix" target="_self">Stack2nix</a> is a tool to generate nix expressions for Haskell projects. <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Node.js" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Node.js" target="_self">Node.js - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/nmattia/napalm" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nmattia/napalm" target="_self">Napalm</a> - Support for building npm packages in Nix with a lightweight npm registry. <br>
<a data-tooltip-position="top" aria-label="https://github.com/svanderburg/node2nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/svanderburg/node2nix" target="_self">Node2nix</a> - Generate Nix expression from a package.json (or package-lock.json) (to be stored as files). <br>
<a data-tooltip-position="top" aria-label="https://github.com/tweag/npmlock2nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/tweag/npmlock2nix" target="_self">Npmlock2nix</a> - Generate Nix expressions from a package-lock.json (in-memory), primarily for web projects. <br>
<a data-tooltip-position="top" aria-label="https://github.com/nix-community/yarn2nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/nix-community/yarn2nix" target="_self">Yarn2nix</a> - Generate Nix expressions from a yarn.lock file. <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/PHP" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/PHP" target="_self">PHP - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/svanderburg/composer2nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/svanderburg/composer2nix" target="_self">Composer2nix</a> is a tool to generate Nix expressions to build composer packages. <br>
<a data-tooltip-position="top" aria-label="https://github.com/stephank/composer-plugin-nixify" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/stephank/composer-plugin-nixify" target="_self">Composer-plugin-nixify</a> is a composer plugin to help with Nix packaging. <br>
<a data-tooltip-position="top" aria-label="https://github.com/fossar/composition-c4" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/fossar/composition-c4" target="_self">Composition-c4</a> is support for building composer packages from a composer.lock (using IFD). <br>
<a data-tooltip-position="top" aria-label="https://github.com/fossar/nix-phps" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/fossar/nix-phps" target="_self">Nix-phps</a> is a Flake containing old and unmaintained PHP versions (intended for CI use). <br>
<a data-tooltip-position="top" aria-label="https://github.com/loophp/nix-shell/" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/loophp/nix-shell/" target="_self">Nix-shell</a> is a Nix shells for PHP development. <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Perl" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Perl" target="_self">Perl- NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=perl" rel="noopener nofollow" class="external-link is-unresolved" href="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=perl" target="_self">Perl packages for NixOS</a> <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Java" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Java" target="_self">Java - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=java" rel="noopener nofollow" class="external-link is-unresolved" href="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=java" target="_self">Java Packages for NixOS</a> <br>
<a data-tooltip-position="top" aria-label="https://github.com/fzakaria/mvn2nix" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/fzakaria/mvn2nix" target="_self">mvn2nix</a> is a tool to easily package your Maven Java application with the Nix package manager. <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Lua" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Lua" target="_self">Lua - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=lua" rel="noopener nofollow" class="external-link is-unresolved" href="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=lua" target="_self">Lua packages for NixOS</a> <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/LLVM" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/LLVM" target="_self">LLVM - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=llvm" rel="noopener nofollow" class="external-link is-unresolved" href="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=llvm" target="_self">LLVM packages for NixOS</a> <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.wiki/wiki/Julia" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.wiki/wiki/Julia" target="_self">Julia - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=julia" rel="noopener nofollow" class="external-link is-unresolved" href="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=julia" target="_self">Julia packages for NixOS</a> <br> <a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://nixos.org/manual/nixpkgs/stable/#r" rel="noopener nofollow" class="external-link is-unresolved" href="https://nixos.org/manual/nixpkgs/stable/#r" target="_self">R - NixOS Wiki</a> <br>
<a data-tooltip-position="top" aria-label="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=r" rel="noopener nofollow" class="external-link is-unresolved" href="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=r" target="_self">R packages for NixOS</a> <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>
<br>
<a data-tooltip-position="top" aria-label="https://github.com/boredom101/nixduino" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/boredom101/nixduino" target="_self">nixduino</a> is a Nix-based tool to help build Arduino sketches. <br>
<a data-tooltip-position="top" aria-label="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=Arduino" rel="noopener nofollow" class="external-link is-unresolved" href="https://search.nixos.org/packages?channel=22.05&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=Arduino" target="_self">Arduino packages for NixOS</a> <br><a data-tooltip-position="top" aria-label="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/mikeroyal/NixOS-Guide#table-of-contents" target="_self">Back to the Top</a>]]></description><link>https://soymadip.me/notes/nix/nixos-guide-main/readme.html</link><guid isPermaLink="false">Nix/NixOS-Guide-main/README.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 24 Sep 2024 02:24:30 GMT</pubDate><enclosure url="https://user-images.githubusercontent.com/45159366/128645103-795eebbd-f853-47cc-8087-916dfd98347b.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/45159366/128645103-795eebbd-f853-47cc-8087-916dfd98347b.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[66 - Instance vs class variables]]></title><description><![CDATA[In Python, variables can be defined at the class level or at the instance level. Understanding the difference between these types of variables is crucial for writing efficient and maintainable code.Class variables are defined at the class level and are shared among all instances of the class. They are defined outside of any method and are usually used to store information that is common to all instances of the class. For example, a class variable can be used to store the number of instances of a class that have been created.class MyClass: class_variable = 0 def __init__(self): MyClass.class_variable += 1 def print_class_variable(self): print(MyClass.class_variable) obj1 = MyClass()
obj1.print_class_variable() # Output: 1 obj2 = MyClass()
obj2.print_class_variable() # Output: 2 In the example above, the class_variable is shared among all instances of the class MyClass. When we create new instances of MyClass, the value of class_variable is incremented. When we call the print_class_variable method on 'obj1' and 'obj2', we get the same value of class_variable.Instance variables are defined at the instance level and are unique to each instance of the class. They are defined inside the init method and are usually used to store information that is specific to each instance of the class.
For example, an instance variable can be used to store the name of an employee in a class that represents an employee.class MyClass: def __init__(self, name): self.name = name def print_name(self): print(self.name) obj1 = MyClass("John")
obj2 = MyClass("Jane") obj1.print_name() # Output: John
obj2.print_name() # Output: Jane
In the example above, each instance of the class MyClass has its own value for the name variable. When we call the print_name method on obj1 and obj2, we get different values for name.Priority of variables: In summary, class variables are shared among all instances of a class and are used to store information that is common to all instances. Instance variables are unique to each instance of a class and are used to store information that is specific to each instance. Understanding the difference between class variables and instance variables is crucial for writing efficient and maintainable code in Python.It's also worth noting that, in python, class variables are defined outside of any methods and don't need to be explicitly declared as class variable. They are defined in the class level and can be accessed via classname.varibale_name or self.class.variable_name. But instance variables are defined inside the methods and need to be explicitly declared as instance variable by using self.variable_name.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/66-instance-vs-class-variables.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/66 - Instance vs class variables.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 10 Aug 2024 12:06:32 GMT</pubDate></item><item><title><![CDATA[62 - Access Specifiers or Modifiers]]></title><description><![CDATA[Access specifiers or access modifiers in python programming are used to limit the access of class variables and class methods outside of class while implementing the concepts of inheritance.
Let us see the each one of access specifiers in details: Public access modifier
Private access modifier
Protected access modifier
All the variables and methods (member functions) in python are by default public.
Any instance variable in a class followed by the ‘self’ keyword like self.var_name are public accessed.class Student: # constructor is defined def __init__(self, age, name): self.age = age # public variable self.name = name # public variable obj = Student(21,"Harry")
print(obj.age)
print(obj.name) # Output:
21
Harry By definition, Private members of a class (variables or methods) are those members which are only accessible inside the class.
We cannot use private members outside of class.
In Python, there is no strict concept of "private" access modifiers like in some other programming languages.
However, a convention has been established to indicate that a variable or method should be considered private by prefixing its name with a double underscore()_. This is known as a "weak internal use indicator" and it is a convention only, not a strict rule.
Code outside the class can still access these "private" variables and methods with name mangling, but _it is generally understood that they should not be accessed or modified.class Student: def __init__(self, age, name): self.__age = age # An indication of private variable def __funName(self): # An indication of private function self.y = 34 print(self.y) class Subject(Student): pass obj = Student(21,"Harry")
obj1 = Subject # calling by object of class Student
print(obj.__age)
print(obj.__funName()) # calling by object of class Subject
print(obj1.__age)
print(obj1.__funName()) # Output:
AttributeError: 'student' object has no attribute '__age'
AttributeError: 'student' object has no method '__funName()'
AttributeError: 'subject' object has no attribute '__age'
AttributeError: 'student' object has no method '__funName()'
Private members of a class cannot be accessed or inherited outside of class.
If we try to access or to inherit the properties of private members to child class (derived class). Then it will show the error.Name mangling in Python is a technique used __to protect class-private and superclass-private attributes__ _from being accidentally overwritten_ __by subclasses__. Names of class-private and superclass-private attributes are transformed by the addition of a single leading underscore and a double leading underscore respectively.class MyClass: def __init__(self): self._nonmangled_attribute = "I am a nonmangled attribute" self.__mangled_attribute = "I am a mangled attribute" my_object = MyClass() print(my_object._nonmangled_attribute) # Output: I am a nonmangled attribute
print(my_object.__mangled_attribute) # Throws an AttributeError
print(my_object._MyClass__mangled_attribute) # Output: I am a mangled attribute
In the example above, the attribute _nonmangled_attribute is marked as nonmangled by convention, but can still be accessed from outside the class. The attribute __mangled_attribute is private and its name is "mangled" to _MyClass__mangled_attribute, so it can't be accessed directly from outside the class, but you can access it by calling _MyClass__mangled_attribute__dir__ is a method, used to print all available methods &amp; attributes of a object.
More info in <a data-tooltip-position="top" aria-label="71 - dir(), __dict__ &amp; help() methods > The `dir()` method" data-href="71 - dir(), __dict__ &amp; help() methods#The `dir()` method" href="https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/71-dir(),-__dict__-&amp;-help()-methods.html#The_`dir()`_method_0" class="internal-link" target="_self" rel="noopener nofollow">Day 71.</a>
class MyClass: def __init__(self): self._nonmangled_attribute = "I am a nonmangled attribute" self.__mangled_attribute = "I am a mangled attribute" my_object = MyClass()
print(a.__dir__()) # Output:
['_nonmangled_attribute', '_MyClass__mangled_attribute', '__module__', '__init__', '__dict__', '__weakref__', '__doc__', '__new__', '__repr__', '__hash__', '__str__', '__getattribute__', '__setattr__', '__delattr__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__sizeof__', '__dir__', '__class__'] In object-oriented programming (OOP), the term "protected" is used to describe a member (i.e., a method or attribute) of a class that is intended to be accessed only by the class itself and its subclasses.
In Python, the convention for indicating that a member is protected is to prefix its name with a single underscore ()_.
For example, if a class has a method called _my_method, it is indicating that the method should only be accessed by the class itself and its subclasses.It's important to note that the single underscore is just a naming convention, and does not actually provide any protection or restrict access to the member.
The syntax we follow to make any variable protected is to write variable name followed by a single underscore (_) ie. _varName.class Student: def __init__(self): self._name = "Harry" def _funName(self): # protected method return "CodeWithHarry" class Subject(Student): #inherited class pass obj = Student()
obj1 = Subject()
# calling by object of Student class
print(obj._name) print(obj._funName()) # calling by object of Subject class
print(obj1._name) print(obj1._funName()) # Output:
Harry
CodeWithHarry Harry
CodeWithHarry
]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/62-access-specifiers-or-modifiers.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/62 - Access Specifiers or Modifiers.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 10 Aug 2024 08:12:09 GMT</pubDate></item><item><title><![CDATA[12 - String Slicing]]></title><description><![CDATA[We can find the length of a string using len() function.fruit = "Mango"
len1 = len(fruit)
print("Mango is a", len1, "letter word.") # Output:
Mango is a 5 letter word. A string is essentially a sequence of characters also called an array. Thus we can access the elements of this array. pie = "ApplePie"
print(pie[:5]) #Slicing from Start
print(pie[5:]) #Slicing till End
print(pie[2:6]) #Slicing in between
print(pie[-8:]) #Slicing using negative index ## Output:
Apple
Pie
pleP
ApplePie
Note
This method of specifying the start and end index to specify a part of a string is called slicing. There's another shorter method to slice a string:
def from_string(string): name, age = string.split('-') return (name, int(age)) # This is shorter version of:
def from_string(string): name = string.split('-')[0] age = string.split('-')[1] return (name, int(age)) print(from_string("goofle-12")) # output:
('goofle', 12) Strings are arrays and arrays are iterable. Thus we can loop through strings.alphabets = "ABCDE"
for i in alphabets: print(i) # Output :
A
B
C
D
E
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/12-string-slicing.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/12 - String Slicing.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 05 Aug 2024 18:03:56 GMT</pubDate></item><item><title><![CDATA[14 - if-else Statements]]></title><description><![CDATA[Sometimes the programmer needs to check the evaluation of certain expression(s), whether the expression(s) evaluate to True or False. If the expression evaluates to False, then the program execution follows a different path than it would have if the expression had evaluated to True.Based on this, the conditional statements are further classified into following types:
if
if-else
if-else-elif
nested if-else-elif.
Execute the block of code inside if statement. After execution return to the code out of the if……else block.\Execute the block of code inside else statement. After execution return to the code out of the if……else block.applePrice = 210
budget = 200
if (applePrice &lt;= budget): print("Alexa, add 1 kg Apples to the cart.")
else: print("Alexa, do not add Apples to the cart.")
Alexa, do not add Apples to the cart.
Sometimes, the programmer may want to evaluate more than one condition, this can be done using an elif statement.Execute the block of code inside if statement if the initial expression evaluates to True. After execution return to the code out of the if block.Execute the block of code inside the first elif statement if the expression inside it evaluates True. After execution return to the code out of the if block.Execute the block of code inside the second elif statement if the expression inside it evaluates True. After execution return to the code out of the if block.
.
.
.
Execute the block of code inside the nth elif statement if the expression inside it evaluates True. After execution return to the code out of the if block.Execute the block of code inside else statement if none of the expression evaluates to True. After execution return to the code out of the if block.num = 0
if (num &lt; 0): print("Number is negative.")
elif (num == 0): print("Number is Zero.")
else: print("Number is positive.")
Number is Zero.
We can use if, if-else, elif statements inside other if statements as well. Example:num = 18
if (num &lt; 0): print("Number is negative.")
elif (num &gt; 0): if (num &lt;= 10): print("Number is between 1-10") elif (num &gt; 10 and num &lt;= 20): print("Number is between 11-20") else: print("Number is greater than 20")
else: print("Number is zero")
Output:Number is between 11-20 If we wanna use 2 conditions in if or elfi statement, we have yo use and:
time1 = 10
if(time1&lt;5 and time1&gt;12): print("Good Moening Sir")
Good Moening Sir
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/14-if-else-statements.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/14 - if-else Statements.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 05 Aug 2024 18:03:32 GMT</pubDate></item><item><title><![CDATA[71 - dir(), __dict__ & help()  methods]]></title><description><![CDATA[In Python, there are 3 built-in functions that are commonly used to get information about objects: dir()
__dict__ help()
Let's take a look at each of them:
The dir() function returns a list of all the attributes and methods (including dunder methods) available for an object.
It is a useful tool for discovering what you can do with an object. Example:
x = [1, 2, 3]
print(dir(x)) #Output
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] The __dict__ attribute returns a dictionary representation of an object's attributes. It is a useful tool for introspection. Example:
class Person: def __init__(self, name, age): self.name = name self.age = age
p = Person("John", 30)
print(p.__dict__) #Output:
{'name': 'John', 'age': 30} The help() function is used to get help documentation for an object, including a description of its attributes and methods. Example:- print(help(str)) #output:
Help on class str in module builtins: class str(object) | str(object='') -&gt; str | str(bytes_or_buffer[, encoding[, errors]]) -&gt; str | | Create a new string object from the given object. If encoding or | errors is specified, then the object must expose a data buffer | that will be decoded using the given encoding and error handler. | Otherwise, returns the result of object.__str__() (if defined) | or repr(object). | encoding defaults to sys.getdefaultencoding(). | errors defaults to 'strict'.
In conclusion
dir(), __dict__, and help() are useful built-in functions in Python that can be used to get information about objects. They are valuable tools for introspection and discovery.
]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/71-dir(),-__dict__-&amp;-help()-methods.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/71 - dir(), __dict__ &amp; help()  methods.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 05 Aug 2024 18:02:50 GMT</pubDate></item><item><title><![CDATA[58 - Constructors]]></title><description><![CDATA[A constructor is a special method in a class used to create and initialize an object of a class. There are different types of constructors. Constructor is invoked automatically when an object of a class is created.A constructor is a unique function that gets called automatically when an object is created of a class.
The main purpose of a constructor is to initialize or assign values to the data members of that class. It cannot return any value other than None.def __init__(self): # initializations
__init__() is one of the reserved functions in Python. In Object Oriented Programming, it is known as a constructor.There are 2 types of constructors in Python:
Default Constructor
Parameterized Constructor
When the constructor doesn't accept any arguments from the object and has only one argument, self, in the constructor, it is known as a Default constructor.class Details: def __init__(self): print("animal Crab belongs to Crustaceans group")
obj1=Details() # Output:
animal Crab belongs to Crustaceans group
When the constructor accepts arguments along with self, it is known as parameterized constructor.These arguments can be used inside the class to assign the values to the data members. class Details: def __init__(self, animal, group): # `self` is passed as object automatically self.animal = animal # the arguments that are required. self.group = group obj1 = Details("Crab", "Crustaceans")
print(obj1.animal, "belongs to the", obj1.group, "group.") # Output:
Crab belongs to the Crustaceans group.
]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/58-constructors.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/58 - Constructors.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 05 Aug 2024 18:02:35 GMT</pubDate></item><item><title><![CDATA[49 - readlines() method]]></title><description><![CDATA[Python provides several ways to manipulate files. Today, we will discuss how to handle files in Python.Before we can perform any operations on a file, we must first open it. Python provides the open() function to open a file. It takes two arguments: the name of the file and the mode in which the file should be opened. The mode can be 'r' for reading, 'w' for writing, or 'a' for appending.Here's an example of how to open a file for reading:f = open('myfile.txt', 'r')
By default, the open() function returns a file object that can be used to read from or write to the file, depending on the mode.There are various modes in which we can open files.
create (x): This mode creates a file and gives an error if the file already exists. read (r): This mode opens the file for reading only and gives an error if the file does not exist. This is the default mode if no mode is passed as a parameter.
write (w): This mode opens the file for writing only and creates a new file if the file does not exist.
append (a): This mode opens the file for appending only and creates a new file if the file does not exist. Apart from these modes we also need to specify how the file must be handled. text (t): t mode is used to handle text files. t refers to the text mode. There is no difference between r and rt or w and wt since text mode is the default. The default mode is 'r' (open for reading text, synonym of 'rt' ).
binary (b): used to handle binary files (images, pdfs, etc).
Once we have a file object, we can use various methods to read from the file.
The read() method reads the entire contents of the file and returns it as a string.
f = open('myfile.txt', 'r')
contents = f.read()
print(contents)
To write to a file, we first need to open it in write mode.f = open('myfile.txt', 'w') We can then use the write() method to write to the file.f = open('myfile.txt', 'w')
f.write('Hello, world!') Keep in mind that writing to a file will overwrite its contents. If you want to append to a file instead of overwriting it, you can open it in append mode.f = open('myfile.txt', 'a')
f.write('Hello, world!')
f.close()
Info
If we run a loop, file won't be overwritten until the loop finishes. Like:
f = open('myfile.txt', 'w')
lines = ['line 1', 'line 2', 'line 3']
lines = ['line 1', 'line 2', 'line 3']
for line in lines: f.write(line + '\n') f.close() # Output in myfile.txt:
line 1
line 2
line 3 It is important to close a file after you are done with it. This releases the resources used by the file and allows other programs to access it.To close a file, you can use the close() method.f = open('myfile.txt', 'r')
# ... do something with the file
f.close() Alternatively, you can use the with statement to automatically close the file after you are done with it.with open('myfile.txt', 'r') as f: # ... do something with the file ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/49-readlines()-method.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/49 - readlines() method.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 16 Jul 2024 18:10:32 GMT</pubDate></item><item><title><![CDATA[22 - Introduction to Lists]]></title><description><![CDATA[
Lists are ordered collection of data items.
List items are separated by commas and enclosed within square brackets [ ]. Lists are mutable, meaning we can alter them after creation.
Example 1:lst1 = [1,2,2,3,5,4,6]
lst2 = ["Red", "Green", "Blue"]
print(lst1)
print(lst2)
Output:[1, 2, 2, 3, 5, 4, 6]
['Red', 'Green', 'Blue']
Example 2:details = ["Abhijeet", 18, "FYBScIT", 9.8]
print(details)
Output:# List Index
Each item/element in a list has its own unique index. This index can be used to access any particular item from the list. The first item has index [0], second item has index [1], third item has index [2] and so on.colors = ["Red", "Green", "Blue", "Yellow", "Green"]
# [0] [1] [2] [3] [4] We can access list items by using its index with the square bracket syntax []. For example colors[0] will give "Red", colors[1] will give "Green" and so on...As we have seen that list items have index, as such we can access items using these indexes.colors = ["Red", "Green", "Blue", "Yellow", "Green"]
# [0] [1] [2] [3] [4]
print(colors[2])
print(colors[4])
print(colors[0])
Blue
Green
Red
Similar to positive indexing, negative indexing is also used to access items, but from the end of the list. The last item has index [-1], second last item has index [-2], third last item has index [-3] and so on.colors = ["Red", "Green", "Blue", "Yellow", "Green"]
# [-5] [-4] [-3] [-2] [-1]
print(colors[-1])
print(colors[-3])
print(colors[-5])
Green
Blue
Red
We can check if a given item is present in the list. This is done using the in keyword.colors = ["Red", "Green", "Blue", "Yellow", "Green"]
if "Yellow" in colors: print("Yellow is present.")
else: print("Yellow is absent.")
Yellow is present.
colors = ["Red", "Green", "Blue", "Yellow", "Green"]
if "Orange" in colors: print("Orange is present.")
else: print("Orange is absent.")
Orange is absent.
You can print a range of list items by specifying where you want to start, where do you want to end and if you want to skip elements in between the range. Syntax:listName[start : end : jumpIndex]
Note: jump Index is optional. We will see this in later examples.animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"]
print(animals[3:7])	#using positive indexes
print(animals[-7:-2])	#using negative indexes'
['mouse', 'pig', 'horse', 'donkey']
['bat', 'mouse', 'pig', 'horse', 'donkey']
Here, we provide index of the element from where we want to start and the index of the element till which we want to print the values.Note: The element of the end index provided will not be included. animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"]
print(animals[4:])	#using positive indexes
print(animals[-4:])	#using negative indexes
['pig', 'horse', 'donkey', 'goat', 'cow']
['horse', 'donkey', 'goat', 'cow'] When no end index is provided, the interpreter prints all the values till the end.
animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"]
print(animals[:6])	#using positive indexes
print(animals[:-3])	#using negative indexes
['cat', 'dog', 'bat', 'mouse', 'pig', 'horse']
['cat', 'dog', 'bat', 'mouse', 'pig', 'horse'] When no start index is provided, the interpreter prints all the values from start up to the end index provided. animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"] print(animals[::2]) #using positive indexes
['cat', 'bat', 'pig', 'donkey', 'cow'] Here, python jumps from start to end with 2 jump index.
animals = ["cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow"]
print(animals[1:8:3])
['dog', 'pig', 'goat
Here, jump index is 3. Hence it prints every 3rd element within given index.['Abhijeet', 18, 'FYBScIT', 9.8]
As we can see, a single list can contain items of different data types.]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/22-introduction-to-lists.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/22 - Introduction to Lists.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 07 Jul 2024 10:48:46 GMT</pubDate></item><item><title><![CDATA[3- Variables and Data Types]]></title><description><![CDATA[Variable is like a container that holds data. Very similar to how our containers in kitchen holds sugar, salt etc
Creating a variable is like creating a placeholder in memory and assigning it some value. In Python its as easy as writing:a = 1
b = True
c = "Harry"
d = None ``` These are four variables of different data types. ## What is a Data Type?
Data type specifies the type of value a variable holds. This is required in programming to do various operations without causing an error. \
In python, we can print the type of any operator using type function:
```python
a = 1
print(type(a))
b = "1"
print(type(b))
By default, python provides the following built-in data types:"Hello World!!!", "Python Programming"
Why "" is required?
because if we create a variable of same name, "" will indicate that we are refering to the variable without quote.
All real numbers.
Example: 1-100, 10000-333333 .......
All numbers with . value.
Example: 10.2, 232.32323 ............ All unreal numbers.
Example: 6 + 2i Boolean data consists of values True or False.A list is an ordered<a data-footref="ord" href="https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/3-variables-and-data-types.html#fn-1-5d302a2f4984496b_0" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a> collection of data with elements separated by a comma and enclosed within square brackets. Lists are mutable and can be modified after creation. Example: list1 = [8, 2.3, [-4, 5], ["apple", "banana"]]
print(list1) Output:
[8, 2.3, [-4, 5], ['apple', 'banana']] Note
As shown in example, Lists Can contain other lists
<br>A tuple is an ordered<a data-footref="ord" href="https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/3-variables-and-data-types.html#fn-1-5d302a2f4984496b_0" class="footnote-link" target="_self" rel="noopener nofollow">[1-1]</a> collection of data with elements separated by a comma and enclosed within parentheses. Tuples are immutable and can not be modified after creation. Example: tuple1 = (("parrot", "sparrow"), ("Lion", "Tiger"))
print(tuple1) Output:
(('parrot', 'sparrow'), ('Lion', 'Tiger'))
<br>A dictionary is an unordered<a data-footref="uord" href="https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/3-variables-and-data-types.html#fn-2-5d302a2f4984496b_0" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a> collection of data containing a key:value pair. The key:value pairs are enclosed within curly brackets. Example: dict1 = {"name":"Sakshi", "age":20, "canVote":True}
print(dict1) Output:
{'name': 'Sakshi', 'age': 20, 'canVote': True} <br>Ordered data types are a type of data type that has a natural ordering or ranking. In other words, the values in an ordered data type can be put in a one-to-one correspondence with the positive integers. This means that each value can be assigned a unique position or ranking, and the values can be compared to determine their relative order. In other terms, they have an index number.<a href="https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/3-variables-and-data-types.html#fnref-1-5d302a2f4984496b_0" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a><a href="https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/3-variables-and-data-types.html#fnref-1-1-5d302a2f4984496b_0" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br>Types of data that doesn't have index numbers.<a href="https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/3-variables-and-data-types.html#fnref-2-5d302a2f4984496b_0" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/3-variables-and-data-types.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/3- Variables and Data Types.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 07 Jul 2024 10:20:34 GMT</pubDate></item><item><title><![CDATA[10- Taking User Input]]></title><description><![CDATA[In python, we can take user input directly by using input() function.This input function gives a return value as string/character hence we have to pass that into a variablevariable=input()
But input function returns the value as string. Hence we have to typecast them whenever required to another datatype.variable=int(input())
variable=float(input())
We can also display a text using input function. This will make input() function take user input and display a message as wella=input("Enter the name: ")
print(a) # Output: Enter the name: Harry
Harry ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/10-taking-user-input.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/10- Taking User Input.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 07 Jul 2024 09:23:30 GMT</pubDate></item><item><title><![CDATA[12.e - Loops in string]]></title><description><![CDATA[Strings are arrays and arrays are <a data-tooltip-position="top" aria-label="https://teamtreehouse.com/community/hey-im-confused-on-what-a-iterable-is-what-does-it-mean" rel="noopener nofollow" class="external-link is-unresolved" href="https://teamtreehouse.com/community/hey-im-confused-on-what-a-iterable-is-what-does-it-mean" target="_self">iterable</a>. Thus we can loop through strings.
## Example:alphabets = "ABCDE"
for i in alphabets: print(i) # Output :
A
B
C
D
E
<br>Note
More about loops in <a data-href="17 - For Loops" href="https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/17-for-loops.html#_0" class="internal-link" target="_self" rel="noopener nofollow">17 - For Loops</a> &amp; <a data-href="18 - while Loops in Python." href="https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/18-while-loops-in-python..html#_0" class="internal-link" target="_self" rel="noopener nofollow">18 - while Loops in Python.</a>
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/12.e-loops-in-string.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/12.e - Loops in string.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 07 Jul 2024 09:10:22 GMT</pubDate></item><item><title><![CDATA[0 - What is Programming and Python]]></title><description><![CDATA[Programming is a way for us to tell computers what to do. Computer is a very dumb machine and it only does what we tell it to do. Hence we learn programming and tell computers to do what we are very slow at - computation.
If I ask you to calculate 5+6, you will immediately say 11.
How about 23453453 X 56456?You will start searching for a calculator or jump to a new tab to calculate the same.
This 100 days of code series will help you learn python from starting to the end. We will start from 0 and by the time we end this course, I promise you will be a Job ready Python developer!
Python is a dynamically typed, general purpose programming language that supports an object-oriented programming approach as well as a functional programming approach.
Python is an interpreted and a high-level programming language.
It was created by Guido Van Rossum in 1989. Python is simple and easy to understand.
It is Interpreted and platform-independent which makes debugging very easy.
Python is an open-source programming language.
Python provides very big library support. Some of the popular libraries include NumPy, Tensorflow, Selenium, OpenCV, etc.
It is possible to integrate other programming languages within python. Python is used in Data Visualization to create plots and graphical representations.
Python helps in Data Analytics to analyze and understand raw data for insights and trends.
It is used in AI and Machine Learning to simulate human behavior and to learn from past data without hard coding.
It is used to create web applications.
It can be used to handle databases.
It is used in business and accounting to perform complex mathematical operations along with quantitative and qualitative analysis.
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/0-what-is-programming-and-python.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/0 - What is Programming and Python.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 07 Jul 2024 08:14:07 GMT</pubDate></item><item><title><![CDATA[1 - Escape Sequence Characters]]></title><description><![CDATA[Sequence of characters after backslash \ → Escape Sequence characters
Escape Sequence characters comprise of more than one character but represent one character when used within the strings.<img alt="Esacpe Sequence Charactars.png" src="https://soymadip.me/notes/1.-python/•-assets/esacpe-sequence-charactars.png" target="_self">]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/1-escape-sequence-characters.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/1 - Escape Sequence Characters.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 07 Jul 2024 07:55:42 GMT</pubDate><enclosure url="https://soymadip.me/notes/1.-python/•-assets/esacpe-sequence-charactars.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/1.-python/•-assets/esacpe-sequence-charactars.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Esacpe Sequence Charactars]]></title><description><![CDATA[<img src="https://soymadip.me/notes/1.-python/•-assets/esacpe-sequence-charactars.png" target="_self">]]></description><link>https://soymadip.me/notes/1.-python/•-assets/esacpe-sequence-charactars.html</link><guid isPermaLink="false">1. Python/• Assets/Esacpe Sequence Charactars.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 07 Jul 2024 07:48:03 GMT</pubDate><enclosure url="https://soymadip.me/notes/1.-python/•-assets/esacpe-sequence-charactars.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/1.-python/•-assets/esacpe-sequence-charactars.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[0 - Symbols]]></title><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/0-symbols.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/0 - Symbols.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 07 Jul 2024 07:10:41 GMT</pubDate></item><item><title><![CDATA[2 - Operators]]></title><description><![CDATA[Python has different types of operators for different operations. To create a calculator we require arithmetic operators.n = 15
m = 7
ans1 = n+m
print("Addition of",n,"and",m,"is", ans1)
ans2 = n-m
print("Subtraction of",n,"and",m,"is", ans2)
ans3 = n*m
print("Multiplication of",n,"and",m,"is", ans3)
ans4 = n/m
print("Division of",n,"and",m,"is", ans4)
ans5 = n%m
print("Modulus of",n,"and",m,"is", ans5)
ans6 = n//m
print("Floor Division of",n,"and",m,"is", ans6)
Here 'n' and 'm' are two variables in which the integer value is being stored. Variables 'ans1' , 'ans2' ,'ans3', 'ans4','ans5' and 'ans6' contains the outputs corresponding to addition, subtraction,multiplication, division, modulus and floor division respectively.]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/2-operators.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/2 - Operators.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 05 Jul 2024 09:45:16 GMT</pubDate></item><item><title><![CDATA[4 - Type Casting]]></title><description><![CDATA[Type casting is the process of converting one data type to another data type.Info
Type Casting is also known as Type converting.
In Python, we can convert one data type to another data type using the following functions:str() - converts any data type into a string type
int() - converts any data type into integer type
float() - converts any data type into float type
tuple() - This function is used to convert to a tuple.
dict() - This function is used to convert a tuple of order (key, value) into a dictionary.
list() - This function is used to convert any data type to a list type.
set() - This function returns the type after converting to set.ord() - converts characters into ASCII code
hex() - converts integers to hexadecima
oct() - converts integer to octal
complex() - This function converts real numbers to complex(real, imag) number.
bool() - This function converts any data type to Boolean data type.
chr( )- converts ASCII code to its corresponding character
bin() - converts integer to binary string
bytearray() - returns array of given byte size
memoryview() - returns memory view object]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/4-type-casting.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/4 - Type Casting.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 03 Jul 2024 13:40:56 GMT</pubDate></item><item><title><![CDATA[XDG directory specs]]></title><description><![CDATA[The XDG Base Directory Specification defines a set of environment variables for managing user-specific configuration, data, and cache files in a consistent way across different applications and environments. These environment variables help to avoid cluttering the home directory with numerous configuration and data files. XDG_CONFIG_HOME: Purpose: Specifies the base directory for user-specific configuration files.
Default: $HOME/.config
Example: If an application needs to store its configuration files, it should place them in a subdirectory of XDG_CONFIG_HOME, such as $XDG_CONFIG_HOME/myapp/config. XDG_CONFIG_DIRS: Purpose: Specifies the preference-ordered set of base directories to search for configuration files.
Default: /etc/xdg
Example: Applications should search for configuration files in these directories in addition to XDG_CONFIG_HOME, using the first found configuration file. XDG_DATA_HOME: Purpose: Specifies the base directory for user-specific data files.
Default: $HOME/.local/share
Example: Applications should store data files in a subdirectory of XDG_DATA_HOME, such as $XDG_DATA_HOME/myapp/data. XDG_DATA_DIRS: Purpose: Specifies the preference-ordered set of base directories to search for data files.
Default: /usr/local/share:/usr/share
Example: Applications should search for data files in these directories in addition to XDG_DATA_HOME, using the first found data file. XDG_CACHE_HOME: Purpose: Specifies the base directory for user-specific non-essential (cached) data.
Default: $HOME/.cache
Example: Applications should place their cache files in a subdirectory of XDG_CACHE_HOME, such as $XDG_CACHE_HOME/myapp/cache. XDG_RUNTIME_DIR: Purpose: Specifies the base directory for user-specific runtime files and other file objects (such as sockets, named pipes, etc.).
Default: The directory should be set by the system and typically has a more complex path, often in /run/user/UID.
Example: This directory is intended for short-lived files like sockets and temporary files. Applications adhering to the XDG Base Directory Specification will store their configuration, data, and cache files in the appropriate directories, making it easier for users to manage these files and maintain a cleaner home directory. Here's an example of how an application might use these variables:#!/bin/bash # Ensure XDG variables are set
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}
XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache} # Example application name
APP_NAME="myapp" # Paths for storing configuration, data, and cache files
CONFIG_DIR="$XDG_CONFIG_HOME/$APP_NAME"
DATA_DIR="$XDG_DATA_HOME/$APP_NAME"
CACHE_DIR="$XDG_CACHE_HOME/$APP_NAME" # Create directories if they don't exist
mkdir -p "$CONFIG_DIR" "$DATA_DIR" "$CACHE_DIR" # Print the directories for demonstration
echo "Configuration files will be stored in: $CONFIG_DIR"
echo "Data files will be stored in: $DATA_DIR"
echo "Cache files will be stored in: $CACHE_DIR"
Running this script will create the necessary directories and print their paths, ensuring that the application follows the XDG Base Directory Specification.The XDG Base Directory Specification provides a standardized way for applications to store configuration, data, and cache files. By using the specified environment variables (XDG_CONFIG_HOME, XDG_CONFIG_DIRS, XDG_DATA_HOME, XDG_DATA_DIRS, XDG_CACHE_HOME, XDG_RUNTIME_DIR), applications can maintain a cleaner and more organized file structure, making it easier for users to manage their personal files and settings.]]></description><link>https://soymadip.me/notes/2.-linux/xdg-directory-specs.html</link><guid isPermaLink="false">2. LINUX/XDG directory specs.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 15 Jun 2024 03:24:50 GMT</pubDate></item><item><title><![CDATA[Parameter expansion]]></title><description><![CDATA[ Parameter expansion is a powerful feature in bash (and other POSIX-compliant shells) that allows you to manipulate variables and their values. It's commonly used for tasks like providing default values, removing prefixes or suffixes, and performing simple text transformations.The basic syntax of parameter expansion is ${parameter} or ${parameter:-word}.
${parameter}: Expands to the value of parameter.
${parameter:-word}: If parameter is unset or null, expands to word; otherwise, expands to the value of parameter. Default Values:
You can provide a default value for a variable that hasn't been set. Here's the syntax:
${variable:-defaultValue} If variable is not set or is null, this will return defaultValue.
Assign Default Value: ${parameter:=word} Assigns word to parameter if parameter is unset or null; otherwise, retains the value of parameter. Error if Null or Unset:
You can display an error message if a variable is null or not set.
${variable:?errorMessage} If variable is not set or is null, this will display errorMessage.
Substring Expansion:
You can get a substring of a variable.
${variable:offset:length} This will return a substring of variable starting at offset and of length length.
Length of a String:
You can get the length of a string stored in a variable.
${#variable} This will return the length of the value stored in variable.
Replace Substring:
You can replace a substring in a variable.
${variable/pattern/replacement} This will replace the first match of pattern with replacement in variable.
Replace All Substrings:
You can replace all occurrences of a substring in a variable.
${variable//pattern/replacement} This will replace all matches of pattern with replacement in variable.
Use Alternate Value: ${parameter:+word} Expands to word if parameter is set and not null; otherwise, expands to null. Remove Prefix: ${parameter#prefix} Removes the shortest match of prefix from the beginning of parameter. Remove Suffix: ${parameter%suffix} Removes the shortest match of suffix from the end of parameter. Substring: ${parameter:start:length} Extracts a substring of length length from parameter, starting at position start. If length is omitted, extracts to the end of the string.
Let's illustrate these operators with examples:# Example variables
unset var1
var2="value2"
var3="" # Use default value
echo "${var1:-default}" # Output: default
echo "${var2:-default}" # Output: value2 # Assign default value
echo "${var1:=default}" # Output: default (and sets var1 to "default")
echo "${var2:=default}" # Output: value2 (var2 already has a value) # Use alternate value
echo "${var1:+alt}" # Output: (var1 is unset or null, so no output)
echo "${var2:+alt}" # Output: alt # Remove prefix
var="prefix_value"
echo "${var#prefix_}" # Output: value # Remove suffix
var="value_suffix"
echo "${var%suffix}" # Output: value # Substring
var="substring"
echo "${var:3:5}" # Output: string
Parameter expansion is commonly used in scripting for tasks such as:
Providing default values for variables.
Checking if variables are set or empty.
Manipulating strings by removing prefixes, suffixes, or extracting substrings.
Performing simple conditional logic based on variable values.
Parameter expansion is a versatile feature in bash that allows for dynamic manipulation of variables and their values. By mastering parameter expansion, you can write more concise and flexible shell scripts for a variety of tasks.]]></description><link>https://soymadip.me/notes/2.1-bash/parameter-expansion.html</link><guid isPermaLink="false">2.1 Bash/Parameter expansion.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 15 Jun 2024 03:23:53 GMT</pubDate></item><item><title><![CDATA[Brace Expansion]]></title><description><![CDATA[Brace expansion is a feature in bash (and other Unix shells) that allows you to generate arbitrary strings. It can be used for creating lists of strings, filenames, or paths efficiently. Here are the key points and examples to help you understand how brace expansion works:The basic syntax of brace expansion is:{item1,item2,item3}
This will expand into:item1 item2 item3
echo {apple,banana,cherry}
Output:apple banana cherry
echo file{1,2,3}.txt
Output:file1.txt file2.txt file3.txt
mkdir -p project/{src,docs,tests}
This will create the following directories:project/src
project/docs
project/tests
Braces can be nested to generate more complex patterns.echo {A,B{1,2},C}
Output:A B1 B2 C
You can use brace expansion to generate a sequence of numbers or letters.echo {1..5}
Output:1 2 3 4 5
echo {a..e}
Output:a b c d e
You can combine lists and ranges for more complex expansions.echo file{a..c}_{1..3}.txt
Output:filea_1.txt filea_2.txt filea_3.txt fileb_1.txt fileb_2.txt fileb_3.txt filec_1.txt filec_2.txt filec_3.txt
touch file{1..3}.txt
This creates:file1.txt file2.txt file3.txt
mkdir -p project/{src/{main,tests},docs,build}
This will create:project/
├── build
├── docs
└── src ├── main └── tests
echo pre{a,b,c}post
Output:preapost prebpost precpost
mkdir -p backup/{2024-06-{01..30}}
This will create directories for each day in June 2024:backup/
├── 2024-06-01
├── 2024-06-02
├── 2024-06-03
...
├── 2024-06-30
Brace expansion is a powerful tool in bash for generating multiple strings, filenames, or directory names from a pattern. It saves time and reduces errors compared to manually typing out each item. Remember:
Use {} to define a list of items.
Use {start..end} for ranges.
Combine and nest braces for more complex patterns.
]]></description><link>https://soymadip.me/notes/2.1-bash/brace-expansion.html</link><guid isPermaLink="false">2.1 Bash/Brace Expansion.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 15 Jun 2024 03:22:25 GMT</pubDate></item><item><title><![CDATA[9. Forms in HTML]]></title><description><![CDATA[ option 1 Option 2 Username: Password: Gender: Male Female Tick-able checkbox HTML forms are essential for collecting user input on web pages.
Whether it's a search bar, a login screen, or a multi-field registration form, HTML forms play a key role in web interactions. They enable users to submit data, which can be processed, stored, or returned by a server.
Forms serve as the gateway between the user and the server, allowing for dynamic, interactive web experiences. They are crucial for tasks such as user authentication, data submission, feedback collection, and more. Simply put, forms make websites more engaging and functional.
The fundamental structure of an HTML form is encapsulated within the&nbsp;&lt;form&gt;&nbsp;tags.
Inside these tags, you'll place various form controls like text fields, checkboxes, radio buttons, and buttons for submitting the form. &lt;form action="/submit" method="post"&gt; &lt;!-- Text input for username --&gt; &lt;label for="username"&gt;Username:&lt;/label&gt; &lt;input type="text" id="username" name="username" required&gt; &lt;br&gt;&lt;br&gt; &lt;!-- Password input --&gt; &lt;label for="password"&gt;Password:&lt;/label&gt; &lt;input type="password" id="password" name="password" required&gt; &lt;br&gt;&lt;br&gt; &lt;!-- Radio buttons for gender --&gt; &lt;label&gt;Gender:&lt;/label&gt; &lt;input type="radio" id="male" name="gender" value="male"&gt; &lt;label for="male"&gt;Male&lt;/label&gt; &lt;input type="radio" id="female" name="gender" value="female"&gt; &lt;label for="female"&gt;Female&lt;/label&gt; &lt;br&gt;&lt;br&gt; &lt;!-- Submit button --&gt; &lt;input type="submit" value="Submit"&gt; &lt;/form&gt;
The&nbsp;&lt;input&gt;&nbsp;tag is commonly used to create form controls. The attributes of this tag define the control's behavior.&lt;input type="" name="" value=""&gt;
]]></description><link>https://soymadip.me/notes/3.-html/9.-forms-in-html.html</link><guid isPermaLink="false">3. HTML/9. Forms in HTML.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 13 Jun 2024 05:03:05 GMT</pubDate></item><item><title><![CDATA[6a. Short list of HTML Tags]]></title><description><![CDATA[<img alt="Pictorial Representation of Tags.png" src="https://soymadip.me/notes/3.-html/assets/pictorial-representation-of-tags.png" target="_self">An HTML tag acts as a container for content or other HTML tags.
Tags are words enclosed within&nbsp;&lt;&nbsp;and&nbsp;&gt;&nbsp;angle brackets. They serve as keywords that instruct the web browser on how to format and display the content.In HTML, tags can be broadly categorized into two types:These are tags that come in pairs, consisting of an opening tag and a corresponding closing tag.
The content goes between these two tags.
Opening Tag: The opening tag starts with&nbsp;&lt;&nbsp;and ends with&nbsp;&gt;. For example,&nbsp;&lt;p&gt;.
Closing Tag: The closing tag also starts with&nbsp;&lt;&nbsp;but includes a forward slash&nbsp;/&nbsp;before the tag name, and ends with&nbsp;&gt;. For example,&nbsp;&lt;/p&gt;. Paragraphs:&nbsp;&lt;p&gt;This is a paragraph.&lt;/p&gt;
Headings:&nbsp;&lt;h1&gt;This is a heading.&lt;/h1&gt;&nbsp; These are tags that don't require a closing tag. They are self-contained, encapsulating all the information within a single tag.
A self-closing tag starts with&nbsp;&lt;&nbsp;and ends with&nbsp;/&gt;&nbsp;(though the&nbsp;/&nbsp;is optional in HTML5). For example,&nbsp;&lt;img /&gt;&nbsp;or&nbsp;&lt;br&gt;.
Note:
Later if you happen to use react or a framework like Next.js, you will have to close the tag like this &lt;br/&gt; &lt;hr/&gt;.
So it is better to cultivate the habit! Line Break:&nbsp;&lt;br/&gt;
Horizontal Rule:&nbsp;&lt;hr/&gt;
Image:&nbsp;&lt;img src="image.jpg" alt="An example image"/&gt;
Here are some commonly used tags in HTML. These are the only tags used 70% of the time:
&lt;!DOCTYPE html&gt;: Specifies the document type.
&lt;html&gt;: Encloses the entire HTML document.
&lt;head&gt;: Contains meta-information and links to scripts and stylesheets.
&lt;body&gt;: Contains the content of the web page. &lt;title&gt;: Sets the title of the web page.
&lt;meta&gt;: Provides metadata such as character set, author, and viewport settings.
&lt;link&gt;: Links external resources like stylesheets. &lt;header&gt;: Header section.
&lt;footer&gt;: Footer section.
&lt;article&gt;: Article.
&lt;section&gt;: Section.
&lt;nav&gt;: Navigation.
&lt;aside&gt;: Sidebar content. &lt;h1&gt;,&nbsp;&lt;h2&gt;,&nbsp;&lt;h3&gt;,&nbsp;&lt;h4&gt;,&nbsp;&lt;h5&gt;,&nbsp;&lt;h6&gt;: Headings
&lt;p&gt;: Paragraph.
&lt;pre&gt;: Pre-defined text.
&lt;b&gt;: Bold Text.
&lt;i&gt;: Italics Text.
&lt;u&gt;: Underline Text.
&lt;strike&gt;: Strike-through text.
&lt;big&gt;: Big Text.
&lt;small&gt;: Small Text.
&lt;sup&gt;: Superscript [ A2] Text.
&lt;sub&gt;: Subscript [O 2 ] Text.
&lt;marquee&gt;: Scrolling piece of text or an image.
&lt;br&gt;: Single Line-break.
&lt;hr&gt;: Horizontal rule. &lt;a&gt;: Anchor (used for links).
&lt;img&gt;: Image.
&lt;audio&gt;: Audio content.
&lt;video&gt;: Video content.
&lt;iframe&gt;: inline frames in webpage. &lt;ul&gt;: Unordered list.
&lt;ol&gt;: Ordered list.
&lt;li&gt;: List item.
&lt;dl&gt;: Description list &lt;dt&gt;: Defines the term (name)
&lt;dd&gt;: Describes each term. &lt;table&gt;: Table.
&lt;thead&gt;: Table header group.
&lt;tr&gt;: Table row.
&lt;th&gt;: Table header cell.
&lt;td&gt;: Table data cell.
&lt;tbody&gt;: Table body group.
&lt;tfoot&gt;: Table footer group. &lt;form&gt;: Form.
&lt;input&gt;: Input field.
&lt;textarea&gt;: Text area.
&lt;button&gt;: Button.
&lt;select&gt;: Dropdown list.
&lt;option&gt;: Options within a&nbsp;&lt;select&gt;&nbsp;or&nbsp;&lt;datalist&gt;.
]]></description><link>https://soymadip.me/notes/3.-html/6a.-short-list-of-html-tags.html</link><guid isPermaLink="false">3. HTML/6a. Short list of HTML Tags.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 13 Jun 2024 04:51:43 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/pictorial-representation-of-tags.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/pictorial-representation-of-tags.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Forms in HTML]]></title><description><![CDATA[ Dropdown option 1 Dropdown Option 2 Username: Password: Gender (Radio Box): Male Female Tick-able checkbox HTML forms are essential for collecting user input on web pages. Whether it's a search bar, a login screen, or a multi-field registration form, HTML forms play a key role in web interactions. They enable users to submit data, which can be processed, stored, or returned by a server.
Forms serve as the gateway between the user and the server, allowing for dynamic, interactive web experiences. They are crucial for tasks such as user authentication, data submission, feedback collection, and more. Simply put, forms make websites more engaging and functional.
The fundamental structure of an HTML form is encapsulated within the&nbsp;&lt;form&gt;&nbsp;tags.
Inside these tags, you'll place various form controls like text fields, checkboxes, radio buttons, and buttons for submitting the form. &lt;form action="/submit" method="post"&gt; &lt;!-- Text input for username --&gt; &lt;label for="username"&gt;Username:&lt;/label&gt; &lt;input type="text" id="username" name="username" required&gt; &lt;br&gt;&lt;br&gt; &lt;!-- Password input --&gt; &lt;label for="password"&gt;Password:&lt;/label&gt; &lt;input type="password" id="password" name="password" required&gt; &lt;br&gt;&lt;br&gt; &lt;!-- Radio buttons for gender --&gt; &lt;label&gt;Gender:&lt;/label&gt; &lt;input type="radio" id="male" name="gender" value="male"&gt; &lt;label for="male"&gt;Male&lt;/label&gt; &lt;input type="radio" id="female" name="gender" value="female"&gt; &lt;label for="female"&gt;Female&lt;/label&gt; &lt;br&gt;&lt;br&gt; &lt;!-- Submit button --&gt; &lt;input type="submit" value="Submit"&gt; &lt;/form&gt;
The&nbsp;&lt;input&gt;&nbsp;tag is commonly used to create form controls. The attributes of this tag define the control's behavior.&lt;input type="" name="" value=""&gt;
]]></description><link>https://soymadip.me/notes/3.-html/forms-in-html.html</link><guid isPermaLink="false">3. HTML/Forms in HTML.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 12 Jun 2024 12:43:43 GMT</pubDate></item><item><title><![CDATA[4. Id & Classes]]></title><description><![CDATA[HTML offers multiple ways to select and style elements. Two of the most commonly used selectors are IDs and Classes An ID is an attribute, a unique identifier assigned to only one HTML element within a page.
It is often used for unique styling and JavaScript manipulations.
&lt;div id="myUniqueID"&gt;This is a div with an ID.&lt;/div&gt; The class attribute lets you give the same name to multiple HTML elements. That way, you can easily change their look or behavior all at once. Classes are not unique and can be assigned to multiple elements. They are generally used for applying the same styles or behaviors to a group of elements.
&lt;div class="myClass"&gt;This is a div with a class.&lt;/div&gt;
&lt;p class="myClass"&gt;This is a paragraph with the same class.&lt;/p&gt; Uniqueness: IDs are unique, and classes can be reused.
JavaScript: IDs are often used for JavaScript operations.
Styling: Both can be used for styling, but IDs have higher specificity.
]]></description><link>https://soymadip.me/notes/3.-html/4.-id-&amp;-classes.html</link><guid isPermaLink="false">3. HTML/4. Id &amp; Classes.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 12 Jun 2024 12:19:36 GMT</pubDate></item><item><title><![CDATA[$PATH]]></title><description><![CDATA[PATH is an environment variable in Unix-like operating systems (including Linux and macOS) and Windows. It specifies a list of directories that the system searches for executable files when you type a command in the shell.
The PATH variable is a colon-separated list of directories.
Each directory in the list is searched in order until an executable file matching the command name is found.
Example of a typical PATH value on a Unix-like system:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/home/user/bin
When you enter a command like ls or python, the shell looks in each directory listed in PATH for an executable file with that name. If it finds one, it runs the command. If not, it returns an error indicating the command was not found.You can view the current PATH using the echo command:echo $PATH
To add a directory to PATH in a bash shell, you can modify it like this:export PATH=$PATH:/new/directory/path
Suppose you have a custom script located in /home/user/scripts and you want to be able to run it from anywhere without typing the full path. You would add /home/user/scripts to your PATH:export PATH=$PATH:/home/user/scripts
To make this change permanent, you can add the above line to your ~/.bashrc or ~/.bash_profile file.]]></description><link>https://soymadip.me/notes/2.-linux/$path.html</link><guid isPermaLink="false">2. LINUX/$PATH.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 09 Jun 2024 12:03:58 GMT</pubDate></item><item><title><![CDATA[JSON & JSONC]]></title><description><![CDATA[JSON (JavaScript Object Notation) is a lightweight data interchange format that's easy for humans to read and write and easy for machines to parse and generate. It is based on a subset of the JavaScript language and is often used to transmit data between a server and a web application, as well as for configuration files and data storage. Here's a guide to help you understand and work with JSON:JSON data is represented as key-value pairs within curly braces {}, and it can include the following data types:
Object: An unordered set of key-value pairs enclosed in {}.
Array: An ordered list of values enclosed in [].
String: A sequence of characters enclosed in double quotes "".
Number: An integer or floating point number.
Boolean: Either true or false.
Null: The empty value, represented as null.
{ "name": "John Doe", "age": 30, "isStudent": false, "address": { "street": "123 Main St", "city": "Anytown", "postalCode": "12345" }, "phoneNumbers": [ { "type": "home", "number": "555-555-5555" }, { "type": "work", "number": "555-555-1234" } ]
} Data is in key/value pairs:
"key": "value" Data is separated by commas:
"name": "John Doe", "age": 30 Curly braces hold objects:
{ "key": "value"
} Square brackets hold arrays:
"phoneNumbers": [ "555-555-5555", "555-555-1234"
] Here are some ways to work with JSON in different programming languages:JavaScript provides built-in methods to parse JSON strings and stringify JavaScript objects. Parsing JSON:
const jsonString = '{"name": "John Doe", "age": 30}';
const jsonObj = JSON.parse(jsonString);
console.log(jsonObj.name); // Output: John Doe Stringifying JavaScript objects:
const obj = { name: "John Doe", age: 30 };
const jsonString = JSON.stringify(obj);
console.log(jsonString); // Output: {"name":"John Doe","age":30} Python's standard library includes the json module for parsing and generating JSON. Parsing JSON:
import json json_string = '{"name": "John Doe", "age": 30}'
json_obj = json.loads(json_string)
print(json_obj['name']) # Output: John Doe Generating JSON:
import json obj = { "name": "John Doe", "age": 30 }
json_string = json.dumps(obj)
print(json_string) # Output: {"name": "John Doe", "age": 30} In Java, you can use libraries like org.json or Gson to work with JSON. Using org.json:
import org.json.JSONObject; String jsonString = "{\"name\": \"John Doe\", \"age\": 30}";
JSONObject jsonObj = new JSONObject(jsonString);
System.out.println(jsonObj.getString("name")); // Output: John Doe Using Gson:
import com.google.gson.Gson; Gson gson = new Gson();
String jsonString = "{\"name\": \"John Doe\", \"age\": 30}";
Person person = gson.fromJson(jsonString, Person.class);
System.out.println(person.name); // Output: John Doe class Person { String name; int age;
} Data Interchange: JSON is often used to exchange data between a client and a server in web applications.
Configuration Files: Many applications use JSON for configuration files because it is both human-readable and machine-readable.
APIs: RESTful APIs commonly use JSON to encode the data they return to clients.
JSON is a versatile and widely-used format for data interchange. Its simplicity and ease of use make it a popular choice for APIs, configuration files, and data storage. Understanding how to parse and generate JSON in different programming languages is a valuable skill for any developer.JSONC (JSON with Comments) is a useful format when you need to include comments in your JSON files, typically for configuration or documentation purposes.JSONC extends JSON by allowing comments, which can help document and clarify configuration settings. The comments can be either single-line (//) or multi-line (/* ... */). Single-Line Comments:
{ // This is a single-line comment "name": "John", "age": 30
} Multi-Line Comments:
{ /* This is a multi-line comment. It can span multiple lines. */ "name": "John", "age": 30
} Consider a typical configuration file with comments to explain each setting:{ // Server configuration "server": { // The hostname of the server "host": "localhost", // The port on which the server will listen "port": 8080 }, // Database configuration "database": { /* * The type of database. * Possible values: 'mysql', 'postgres', 'sqlite' */ "type": "mysql", "user": "admin", "password": "password123", "name": "my_database" }
}
To work with JSONC, you'll need tools or libraries that can parse and handle comments. Here are some examples: Node.js: Using the jsonc-parser library:
npm install jsonc-parser Example usage:
const fs = require('fs');
const jsonc = require('jsonc-parser'); const content = fs.readFileSync('config.jsonc', 'utf-8');
const jsonObject = jsonc.parse(content); console.log(jsonObject); Visual Studio Code: VS Code natively supports JSONC for settings files (settings.json) and will correctly parse and handle comments. Python: Using the commentjson library:
pip install commentjson Example usage:
import commentjson as json with open('config.jsonc', 'r') as file: config = json.load(file) print(config) Since JSONC is not a standard format, you might need to convert JSONC to standard JSON (without comments) for certain applications. This can be done by stripping out the comments. Many libraries that parse JSONC will provide an option to output standard JSON.]]></description><link>https://soymadip.me/notes/5.-javascript/json-&amp;-jsonc.html</link><guid isPermaLink="false">5. JavaScript/JSON &amp; JSONC.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 08 Jun 2024 16:45:35 GMT</pubDate></item><item><title><![CDATA[1. Syntax of CSS]]></title><description><![CDATA[CSS follows a rule-based structure. Each rule consists of a&nbsp;selector and a declaration block. Selectors pick the HTML elements, while declaration blocks contain pairs of properties and values.The general syntax for writing CSS.<img alt="basic_syntax.png" src="https://soymadip.me/notes/4.-css/assets/basic_syntax.png" target="_self" style="width: 400px; max-width: 100%;">selector { property: value;
}
Note: Semi-colon (;) at the end of each new property and property value is IMPORTANT.
For example:
h2{ color: blue;
} In the example: h2: h2 is the selector.
color: It's the property.
blue: The property value. Within the declaration block, there can be multiple pairs of properties and values.
Consider the example:
button{ color: white; background-color: black; border: transparent; border-radius: 5px;
} Here, 'button' is the selector, and there are multiple pairs of properties and values. Each pair is separated by a semicolon ";".
]]></description><link>https://soymadip.me/notes/4.-css/1.-syntax-of-css.html</link><guid isPermaLink="false">4. CSS/1. Syntax of CSS.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 31 May 2024 12:27:27 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/basic_syntax.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/basic_syntax.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[5. Fonts in CSS]]></title><description><![CDATA[Web safe fonts are typefaces that come pre-installed as default fonts on the majority of computers and devices, regardless of operating system.
Using a web safe font gives you the best chance of having your text appear as intended.Here are some examples of web safe fonts:
Arial:&nbsp;A sans-serif font
Verdana:&nbsp;A sans-serif font
Tahoma:&nbsp;A sans-serif font that's bolder than Arial and has less space between characters
Trebuchet MS:&nbsp;A sans-serif font designed by Vincent Connare in 1996 for Microsoft
Times New Roman:&nbsp;A serif font
Georgia:&nbsp;A serif font
Garamond:&nbsp;A classical font with a timeless look that's often used in printed books
Courier New:&nbsp;A monospace font
Brush Script MT:&nbsp;A cursive font
DejaVu Sans:&nbsp;A font that's known for its legibility on screen and in print
The font family property specifies the font stack. This is used to set the preferred font for the text content.
We can define multiple font family names separated by commas based on priority.
Syntax:selector{ font-family: font1, font2, font3;
}
Example:&lt;html lang="en"&gt;
&lt;head&gt; &lt;style&gt; h1{ font-family: 'Courier New', Courier, monospace; } h2{ font-family: 'Times New Roman', Times, serif; } &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt; &lt;h1&gt;CodeWithHarry&lt;/h1&gt; &lt;h2&gt;Hello World&lt;/h2&gt;
&lt;/body&gt;
&lt;/html&gt;
<img alt="Font-Family.png" src="https://soymadip.me/notes/4.-css/assets/font-family.png" target="_self" style="width: 700px; max-width: 100%;">
There are five generic font family names that serve as fallback options when specific fonts are not available: serif: generic serif fonts (like Times New Roman).
sans-serif: generic sans-serif fonts (like Arial or Helvetica).
monospace: generic monospaced fonts (like Courier New).
cursive: generic cursive fonts (for handwritten styles).
fantasy: generic fantasy fonts (for decorative styles). Tip: It is recommended to end the font family with any of these generic font family names.<br>To use custom fonts, we will be using&nbsp;<a data-tooltip-position="top" aria-label="https://fonts.google.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://fonts.google.com/" target="_self">Google Fonts</a>.Follow the steps:
<br>Go to&nbsp;<a rel="noopener nofollow" class="external-link is-unresolved" href="https://fonts.google.com/" target="_self">https://fonts.google.com/</a>
Select your preferred font.
Choose the fonts based on font weight.
Copy the import link and paste it on the top of the stylesheet.
Copy the font family and paste it wherever you want to use it.
The font style property sets the style of the font.
There are three types of font styles: italic, normal, and oblique. italic: Italic texts are slightly to the right.
normal: Default text style.
Oblique: Oblique is similar to italic but has less bend Example:&lt;html lang="en"&gt;
&lt;head&gt; &lt;style&gt; [[p1]] { font-style: italic; } [[p2]] { font-style: normal; } [[p3]] { font-style: oblique; } &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt; &lt;p id="p1"&gt;font-style: italic&lt;/p&gt; &lt;p id="p2"&gt;font-style: normal&lt;/p&gt; &lt;p id="p3"&gt;font-style: oblique&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
<br><img alt="Font-Style.png" src="https://soymadip.me/notes/4.-css/assets/font-style.png" target="_self" style="width: 700px; max-width: 100%;">Defines the colour of the text or typography.
Syntax:
selector{ color: red;
}
<br>For an in-depth explanation of colours, follow the&nbsp;<a data-tooltip-position="top" aria-label="4. Color is CSS" data-href="4. Color is CSS" href="https://soymadip.me/notes/4.-css/4.-color-is-css.html#_0" class="internal-link" target="_self" rel="noopener nofollow">CSS Color</a>&nbsp;Tutorial.The font size property sets the size of the fonts.
It has some predefined sizes, such as small, medium, large, larger, etc.
The most commonly used units for font size are px (pixels), em (ems), rem (root ems), and percentage (%). px:&nbsp;px is the absolute unit. This is useful for setting precise sizes.
em:&nbsp;em is the relative unit, based on the font size of the parent element. If the element's font size is 1.5 em, that means the element will be 1.5 times the size of the parent.
rem:&nbsp;rem is the relative unit, based on the font size of the root element, i.e.,&nbsp;&lt;html&gt;. Example:&lt;html lang="en"&gt;
&lt;head&gt; &lt;style&gt; [[p1]] { font-size: small; } [[p2]] { font-size: medium; } [[p3]] { font-size: large; } [[p4]] { font-size: larger; } [[p5]] { font-size: 25px; } [[p6]] { font-size: 2em; } [[p7]] { font-size: 2rem; } [[p8]] { font-size: 50%; } &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt; &lt;p id="p1"&gt;font-size: small&lt;/p&gt; &lt;p id="p2"&gt;font-size: medium&lt;/p&gt; &lt;p id="p3"&gt;font-size: largr&lt;/p&gt; &lt;p id="p4"&gt;font-size: larger&lt;/p&gt; &lt;p id="p5"&gt;font-size: 25px&lt;/p&gt; &lt;p id="p6"&gt;font-size: 2em&lt;/p&gt; &lt;p id="p7"&gt;font-size: 2rem&lt;/p&gt; &lt;p id="p8"&gt;font-size: 50%&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
<br><img alt="Font-Size.png" src="https://soymadip.me/notes/4.-css/assets/font-size.png" target="_self" style="width: 700px; max-width: 100%;">The CSS font variant property helps to toggle with the variations of the text.
There are two common values for the font-variant property. normal:&nbsp;The default value.
small-caps:&nbsp;This value renders the text in small capital letters. Example:&lt;html lang="en"&gt;
&lt;head&gt; &lt;style&gt; [[p1]] { font-variant: normal; } [[p2]] { font-variant: small-caps; } &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt; &lt;p id="p1"&gt;font-variant: normal;&lt;/p&gt; &lt;p id="p2"&gt;font-variant: small-caps;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
<br><img alt="Font-Varient.png" src="https://soymadip.me/notes/4.-css/assets/font-varient.png" target="_self" style="width: 700px; max-width: 100%;">The font-weight property controls the thickness or boldness of the text.
The values range from 100 (thin) to 900 (ultra-bold). Also have some predefined values such as lighter, bold, and bolder.
Example:&lt;html lang="en"&gt;
&lt;head&gt; &lt;style&gt; [[p1]] { font-weight: 100; } [[p2]] { font-weight: 200; } [[p8]] { font-weight: 800; } [[p9]] { font-weight: 900; } [[p10]] { font-weight: lighter; } [[p11]] { font-weight: bold; } [[p12]] { font-weight: bolder; } &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt; &lt;p id="p1"&gt;font-weight: 100&lt;/p&gt; &lt;p id="p2"&gt;font-weight: 200&lt;/p&gt; &lt;p id="p8"&gt;font-weight: 800&lt;/p&gt; &lt;p id="p9"&gt;font-weight: 900&lt;/p&gt; &lt;p id="p10"&gt;font-size: lighter&lt;/p&gt; &lt;p id="p11"&gt;font-size: bold&lt;/p&gt; &lt;p id="p12"&gt;font-size: bolder&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
<br><img alt="Font-Weight.png" src="https://soymadip.me/notes/4.-css/assets/font-weight.png" target="_self" style="width: 700px; max-width: 100%;">]]></description><link>https://soymadip.me/notes/4.-css/5.-fonts-in-css.html</link><guid isPermaLink="false">4. CSS/5. Fonts in CSS.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 13 May 2024 17:33:03 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/font-family.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/font-family.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[6b. Borders in CSS]]></title><description><![CDATA[CSS borders help define the visual boundaries of HTML elements. It can be text, div, p, h1, etc.
The following are the different properties of a CSS border:Border styles define the style of the border.There are various types of border styles; consider the code snippet:- &lt;html lang="en"&gt;
&lt;head&gt; &lt;style&gt; .none { border-style: none; } .hidden { border-style: hidden; } .dotted { border-style: dotted; } .dashed { border-style: dashed; } .solid { border-style: solid; } .double { border-style: double; } .groove { border-style: groove; } .ridge { border-style: ridge; } .inset { border-style: inset; } .outset { border-style: outset; } &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt; &lt;p class="none"&gt;no border&lt;/p&gt; &lt;p class="hidden"&gt;Hidden Border&lt;/p&gt; &lt;p class="dotted"&gt;Dotted Border&lt;/p&gt; &lt;p class="dashed"&gt;Dashed Border&lt;/p&gt; &lt;p class="solid"&gt;Solid border&lt;/p&gt; &lt;p class="double"&gt;Double Border&lt;/p&gt; &lt;p class="groove"&gt;Groove border&lt;/p&gt; &lt;p class="ridge"&gt;ridge border&lt;/p&gt; &lt;p class="inset"&gt;inset border&lt;/p&gt; &lt;p class="outset"&gt;Outset Border&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
<img alt="border-style.png" src="https://soymadip.me/notes/4.-css/assets/border-style.png" target="_self" style="width: 500px; max-width: 100%;">The border color property sets the colour of the border.
We can use colour_name, hex, rgb, or hsl to set the color.
<br>follow the <a data-tooltip-position="top" aria-label="4. Color is CSS" data-href="4. Color is CSS" href="https://soymadip.me/notes/4.-css/4.-color-is-css.html#_0" class="internal-link" target="_self" rel="noopener nofollow">CSS Color</a> Tutorial for more.
Consider the code snippet:&lt;html lang="en"&gt;
&lt;head&gt; &lt;style&gt; .dotted { border-style: dotted; color: purple; } .dashed { border-style: dashed; border-color: [[FF0000]]; } .solid { border-style: solid; border-color: rgb(100, 233, 12); } .double { border-style: double; border-color: hsl(10, 50, 30); } &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt; &lt;p class="dotted"&gt;Dotted Border&lt;/p&gt; &lt;p class="dashed"&gt;Dashed Border&lt;/p&gt; &lt;p class="solid"&gt;Solid border&lt;/p&gt; &lt;p class="double"&gt;Double Border&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
<br><img alt="border-color.png" src="https://soymadip.me/notes/4.-css/assets/border-color.png" target="_self" style="width: 400px; max-width: 100%;">Specifies the width of the border.
Sets the width of the border in pixels(px), or there are values like medium, thin, and thick to set the border width.Consider the code snippet:&lt;html lang="en"&gt; &lt;head&gt; &lt;style&gt; .solid1 { border-width: 5px; border-style: solid; border-color: red; } .solid2 { border-width: thin; /* thin || medium || thick */ border-style: solid; border-color: [[FF0000]]; } &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt; &lt;p class="solid1"&gt;Solid border 1&lt;/p&gt; &lt;p class="solid2"&gt;Solid border 2&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
<br><img alt="border-width.png" src="https://soymadip.me/notes/4.-css/assets/border-width.png" target="_self" style="width: 400px; max-width: 100%;">Border radius helps create rounded borders for elements like buttons or images.&lt;html lang="en"&gt;
&lt;head&gt; &lt;style&gt; .solid1 { border-radius: 20px; border-style: solid; border-color: red; } .solid2 { border-radius: 25%; border-style: solid; border-color: [[FF0000]]; } &lt;/style&gt;
&lt;/head&gt; &lt;body&gt; &lt;p class="solid1"&gt;Solid border 1&lt;/p&gt; &lt;p class="solid2"&gt;Solid&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
<br><img alt="border-radius.png" src="https://soymadip.me/notes/4.-css/assets/border-radius.png" target="_self" style="width: 400px; max-width: 100%;">We can also set border-radius to each individual edge (specific corners), such as top left, bottom right, top right, and bottom left. Syntax:selector { border-radius: 10px 5px 15px 35px ; /* border-radius: top-left top-right bottom-right bottom-left ; */ }
orselector { border-top-left-radius: 10px; border-top-right-radius: 5px; border-bottom-right-radius: 15px; border-bottom-left-radius: 35px;
}
While working with tables, border-collapse helps to control how table borders interact with each other.There are two properties of border-collapse:Syntax:selector { border-collapse: collapse;
}
<br><img alt="border-collapse.png" src="https://soymadip.me/notes/4.-css/assets/border-collapse.png" target="_self" style="width: 400px; max-width: 100%;">Syntax:selector { border-collapse: separate;
}
<br><img alt="border-seperate.png" src="https://soymadip.me/notes/4.-css/assets/border-seperate.png" target="_self" style="width: 400px; max-width: 100%;">While working with tables, border-spacing helps define the space between the borders of adjacent table cells.selector { border-spacing: 5px;
}
<br><img alt="border-spacing.png" src="https://soymadip.me/notes/4.-css/assets/border-spacing.png" target="_self" style="width: 400px; max-width: 100%;">Border shorthand takes three properties: width, style, and color.Syntax:select{ border: width style color;
}
Example:&lt;html lang="en"&gt;
&lt;head&gt; &lt;style&gt; p { border: 2px solid red; } &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt; &lt;p&gt;Hello world, I'm CodeWithHarry&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
<br><img alt="shorthand_border.png" src="https://soymadip.me/notes/4.-css/assets/shorthand_border.png" target="_self" style="width: 400px; max-width: 100%;">]]></description><link>https://soymadip.me/notes/4.-css/6b.-borders-in-css.html</link><guid isPermaLink="false">4. CSS/6b. Borders in CSS.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 13 May 2024 17:33:03 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/border-style.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/border-style.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[6a. Backgrounds in CSS]]></title><description><![CDATA[Background property helps to set the background style, property, and effects of the element.All the background properties would look something like this in a single line.selector{ background: [background-color] [background-attachment] [background-image] [background-repeat] [background-position];
} <img alt="background_shorthand.png" src="https://soymadip.me/notes/4.-css/assets/background_shorthand.png" target="_self" style="width: 500px; max-width: 100%;">
Example:-div{ background: purple fixed url("./harrybhai.png") no-repeat right top;
} There are various background properties, such as:-
The background color property sets the background colour of HTML tags such as div, section, p, etc.Syntax:selector{ background-color: color;
}
<br>Note: Color can be hex, rdb, hsl, etc. Follow <a data-href="4. Color is CSS" href="https://soymadip.me/notes/4.-css/4.-color-is-css.html#_0" class="internal-link" target="_self" rel="noopener nofollow">4. Color is CSS</a> TutorialExample:-&lt;html&gt;
&lt;head&gt; &lt;style&gt; div{ background-color: yellow; } h1{ background-color: [[FF0000]]; } p{ background-color: orange; } span{ background-color: purple; } &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt; &lt;div&gt; &lt;h1&gt;CodeWithHarry&lt;/h1&gt; &lt;p&gt;Developer and founder of &lt;span&gt;CodeWithHarry.com&lt;/span&gt;&lt;/p&gt; &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
Output:-<br>
<img alt="background_color.png" src="https://soymadip.me/notes/4.-css/assets/background_color.png" target="_self" style="width: 500px; max-width: 100%;">The Background Image property sets an image as a background by providing the image URL within the url() function.Syntax:-:selector{ background-image: url('image-url');
}
Example:-&lt;style&gt; div{ background-image: url('harrybhai.png'); }
&lt;/style&gt;
Output:-<br>
<img alt="background_image.png" src="https://soymadip.me/notes/4.-css/assets/background_image.png" target="_self" style="width: 500px; max-width: 100%;">The image is repeated many times because CSS repeats the image on both the x and y axes, to avoid leaving empty spaces due to the image dimensions.
To solve this issue, use the background property repeat.Background repeat helps to control how the image will repeat.Syntax:-selector{ background-repeat: repeat-x || repeat-y || repeat || no-repeat; /* || means or */
} background-repeat can be set to repeat, no-repeat, repeat-x (horizontal), or repeat-y (vertical) or separately.
The background image is repeated in both the x and y directions. This is the default.Syntax:-selector{ background-repeat: repeat;
}
Example:-<br>
<img alt="background_repeat_repeat.png" src="https://soymadip.me/notes/4.-css/assets/background_repeat_repeat.png" target="_self" style="width: 500px; max-width: 100%;">The background image is not repeated in any direction. Only one image will be on the screen.Syntax:-selector{ background-repeat: no-repeat;
}
Example:-]]></description><link>https://soymadip.me/notes/4.-css/6a.-backgrounds-in-css.html</link><guid isPermaLink="false">4. CSS/6a. Backgrounds in CSS.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 13 May 2024 17:33:03 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/background_shorthand.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/background_shorthand.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2b.  Specificity in CSS]]></title><description><![CDATA[
CSS Specificity helps determine what style will be applied to the HTML element(s) when there are overlapping or multiple CSS rules.
It is a value or weight assigned to a CSS selector. The higher the specificity, the more precedence the selector has.
Let's consider the following code&lt;html&gt;
&lt;head&gt; &lt;style&gt; *{ color: gray; } [[title]]{ color: red; } .h1{ color: blue; } h1{ color: pink; } &lt;/style&gt; &lt;/head&gt;
&lt;body&gt; &lt;h1 id="title" class="h1" style="color:purple"&gt;CodeWithHarry&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt; Here the question is, what color will h1 be assigned to?
This is calculated based on the selector's components. CSS stands for Cascading Stylesheets. The cascade is the algorithm for solving conflicts where multiple CSS rules apply to an HTML element. It's the reason that the text of the button styled with the above CSS will be purple.
The cascade algorithm has 4 distinct stages. Position and order of appearance: the order in which your CSS rules appear
Specificity: an algorithm that determines which CSS selector has the strongest match
Origin: the order in which CSS appears and where it comes from, whether that is a browser style, CSS from a browser extension, or your authored CSS
Importance: some CSS rules are weighted more heavily than others, especially with the&nbsp;!important rule type Lets look into all these one by one.
There are two rules that have selectors of identical specificity, the last one to be declared won. In an HTML page, you can add styles in different ways: Through a &lt;link&gt; tag, a &lt;style&gt; tag, or Directly in the element's style attribute. If you have one &lt;link&gt; tag at the top of your page and another at the bottom, the styles from the bottom one will be used. The same goes for &lt;style&gt; tags; the ones lower down on the page take priority.
An inline&nbsp;style&nbsp;attribute with CSS declared in it will override all other CSS, regardless of its position, unless a declaration has&nbsp;!important defined.
If the browser doesn't support a property, it is ignored!
CSS specificity determines which style rules get applied to an element when there are conflicts.
Higher specificity means the style will be used. It's calculated based on a point system involving inline styles, IDs, classes, and tag names.Inline styles have the highest specificity and will always override styles if other selector(s) are also defined.&lt;html&gt;
&lt;head&gt; &lt;style&gt; *{ color: gray; } [[title]]{ color: red; } .h1{ color: blue; } h1{ color: pink; } &lt;/style&gt; &lt;/head&gt;
&lt;body&gt; &lt;h1 id="title" class="h1" style="color:purple"&gt;CodeWithHarry&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
]]></description><link>https://soymadip.me/notes/4.-css/2b.-specificity-in-css.html</link><guid isPermaLink="false">4. CSS/2b.  Specificity in CSS.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 13 May 2024 17:33:03 GMT</pubDate></item><item><title><![CDATA[4. Color is CSS]]></title><description><![CDATA[The color property of CSS helps to set the color of the HTML element(s).
This helps to set the foreground color of text, text decorations, and borders.Syntax:/* Syntax
selector { color: value
} */ selector { /* colorname can be any colour, such as red, blue, yellow, purple, green, etc. */ color: colorname
}
Note: In CSS we use color, not colour.In CSS we have these methods to add colours:-
1. <a data-tooltip-position="top" aria-label="4. Color is CSS > Pre-defined Name" data-href="4. Color is CSS#Pre-defined Name" href="https://soymadip.me/notes/4.-css/4.-color-is-css.html#Pre-defined_Name_0" class="internal-link" target="_self" rel="noopener nofollow">Pre-defined Name</a><br>
2. <a data-tooltip-position="top" aria-label="4. Color is CSS > Hexadecimal notation" data-href="4. Color is CSS#Hexadecimal notation" href="https://soymadip.me/notes/4.-css/4.-color-is-css.html#Hexadecimal_notation_0" class="internal-link" target="_self" rel="noopener nofollow">Hexadecimal notation</a><br>
3. <a data-tooltip-position="top" aria-label="4. Color is CSS > RGB" data-href="4. Color is CSS#RGB" href="https://soymadip.me/notes/4.-css/4.-color-is-css.html#RGB_0" class="internal-link" target="_self" rel="noopener nofollow">RGB</a><br>
4. <a data-tooltip-position="top" aria-label="4. Color is CSS > RGBA" data-href="4. Color is CSS#RGBA" href="https://soymadip.me/notes/4.-css/4.-color-is-css.html#RGBA_0" class="internal-link" target="_self" rel="noopener nofollow">RGBA</a><br>
5. <a data-tooltip-position="top" aria-label="4. Color is CSS > HSL" data-href="4. Color is CSS#HSL" href="https://soymadip.me/notes/4.-css/4.-color-is-css.html#HSL_0" class="internal-link" target="_self" rel="noopener nofollow">HSL</a><br>
6. <a data-tooltip-position="top" aria-label="4. Color is CSS > HSLA" data-href="4. Color is CSS#HSLA" href="https://soymadip.me/notes/4.-css/4.-color-is-css.html#HSLA_0" class="internal-link" target="_self" rel="noopener nofollow">HSLA</a>The first method of defining the colour in the CSS is directly writing the particular colour name.Example:&lt;head&gt; &lt;style&gt; p{ color: purple; } &lt;/style&gt;
&lt;/head&gt; &lt;body&gt; &lt;p&gt;Hello World&lt;/p&gt; &lt;p&gt;CodeWithHarry&lt;/p&gt;
&lt;/body&gt; &lt;/html&gt;
Output:<br>
<img alt="color_name.png" src="https://soymadip.me/notes/4.-css/assets/color_name.png" target="_self" style="width: 700px; max-width: 100%;">There are many ways to set the property-value of color, with some of the most common listed below:The hex code consists of a hash(#) symbol followed by six characters. These six characters are arranged into a set of three pairs (RR, GG, and BB).Each character pair defines the intensity level of the colour, where R stands for red, G stands for green, and B stands for blue.The intensity value lies between 00 (no intensity) and ff (maximum intensity).Breaking the Character Set (RRGGBB):
RR: RR defines the intensity of color red, ranging from 00 (no red) to FF (maximum red).
GG: GG defines the intensity of color Green, with values from 00 (no green) to FF (full green).
BB: GG defines the intensity of color Blue, varying from 00 (no blue) to FF (full blue).
Syntax:seletor { color: [[RRGGBB]];
}
Example:&lt;head&gt; &lt;style&gt; h1 { color: [[FF0000]]; /*Pure Red*/ } h2 { color: [[00FF00]]; /* Pure Green */ } h3 { color: [[0000FF]]; /* Pure Blue */ } h4 { color: [[b700ff]]; /* Custom Color */ } &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt; &lt;h1&gt;CodeWithHarry&lt;/h1&gt; &lt;h2&gt;A Developer&lt;/h2&gt; &lt;h3&gt;Founder CodeWithHarry.com&lt;/h3&gt; &lt;h4&gt;Hello World&lt;/h4&gt;
&lt;/body&gt;
&lt;/html&gt; Output:<br><img alt="hex.png" src="https://soymadip.me/notes/4.-css/assets/hex.png" target="_self" style="width: 700px; max-width: 100%;">RGB stands for “Red, Green, Blue” and it defines the colour value by taking three (red, green, blue) arguments.
Each argument value lies between 0 and 255.
Syntax:selector{ color: rgb(red, green, blue);
}
Example:&lt;head&gt; &lt;style&gt; h1 { color: rgb(0, 0, 0); /* red:0, green:0, blue:0 */ } h2 { color: rgb(255, 255, 255); /* red:255, green:255, blue:255 */ } h3 { color: rgb(30, 150, 220); } &lt;/style&gt;
&lt;/head&gt; &lt;body&gt; &lt;h1&gt;CodeWithHarry&lt;/h1&gt; &lt;h2&gt;A Developer&lt;/h2&gt; &lt;h3&gt;CodeWithHarry.com founder&lt;/h3&gt;
&lt;/body&gt; &lt;/html&gt;
Output:<br><img alt="rgb.png" src="https://soymadip.me/notes/4.-css/assets/rgb.png" target="_self" style="width: 700px; max-width: 100%;">Similar to RGB, in RGBA, A stands for alpha value, which defines the opacity of the color. The alpha value lies between 0 and 1. Syntax:selector{ color: rgb(red, green, blue, opacity);
} Example:&lt;head&gt; &lt;style&gt; h1 { color: rgba(0, 0, 0, 0.8); /* red:0, green:0, blue:0, Alpha: 0.8 = 80% */ } h2 { color: rgb(255, 255, 255, 0.6); /* red:255, green:255, blue:255 */ } h3 { color: rgba(30 150 220 / 60% ); /* red:30, green:150, blue:200, alpha:60% */ } &lt;/style&gt;
&lt;/head&gt; &lt;body&gt; &lt;h1&gt;CodeWithHarry&lt;/h1&gt; &lt;h2&gt;A Developer&lt;/h2&gt; &lt;h3&gt;CodeWithHarry.com founder&lt;/h3&gt;
&lt;/body&gt; &lt;/html&gt;
Output:<br><img alt="rgba.png" src="https://soymadip.me/notes/4.-css/assets/rgba.png" target="_self" style="width: 700px; max-width: 100%;">HSL stands for hue, saturation, and lightness. This is another way to set colour properties.Breaking each keyword:
Hue represents the type of color. It is measured in degrees, and its value lies from 0 to 360.
0 degree represents black, 120 degree is for green, and 360 degree is for blue. Saturation controls the intensity or purity of the color. It is measured in percentage, and its value lies between 0% and 100%.
0% saturation is no color (grayscale),&nbsp; and 100% saturation is the most intense colour. Lightness determines how light or dark the colour is. It is measured in percentage, and its value lies between 0% and 100%.
0% lightness represents pure black, 50% lightness represents normal colour, and 100% lightness is pure white.
Syntax:selector{ color: hsl(hue, saturation, lightness);
}
Example:&lt;head&gt; &lt;style&gt; h1 { color: hsl(235, 100%, 50%); } p { color: hsl(0, 0%, 0%); } &lt;/style&gt;
&lt;/head&gt; &lt;body&gt; &lt;h1&gt;CodeWithHarry&lt;/h1&gt; &lt;p&gt;A Developer&lt;/p&gt;
&lt;/body&gt; &lt;/html&gt; Output:<br><img alt="hsl.png" src="https://soymadip.me/notes/4.-css/assets/hsl.png" target="_self" style="width: 700px; max-width: 100%;">HSLA is similar to HSL; here, A stands for alpha value, which is used to set the opacity. Alpha values lie between 0 and 1. Syntax:selector{ color: hsla(hue, saturation, lightness, alpha);
}
Example:&lt;head&gt; &lt;style&gt; h1 { color: hsla(235, 100%, 50%, 0.7); } p { color: hsl(0, 0%, 0%, 0.4); /* a for alpha */ } &lt;/style&gt;
&lt;/head&gt; &lt;body&gt; &lt;h1&gt;CodeWithHarry&lt;/h1&gt; &lt;p&gt;A Developer&lt;/p&gt;
&lt;/body&gt; &lt;/html&gt; Output:<br><img alt="hsla.png" src="https://soymadip.me/notes/4.-css/assets/hsla.png" target="_self" style="width: 700px; max-width: 100%;">]]></description><link>https://soymadip.me/notes/4.-css/4.-color-is-css.html</link><guid isPermaLink="false">4. CSS/4. Color is CSS.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 13 May 2024 17:33:03 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/color_name.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/color_name.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3. Selectors in CSS]]></title><description><![CDATA[CSS selectors allow us to choose specific elements and apply styles to them. Suppose we want to add a custom style to only a specific tag(s). There, We can make use of CSS selector.&nbsp;
There are different types of CSS selectors: <a data-tooltip-position="top" aria-label="3. Selectors in CSS > Universal Selector" data-href="3. Selectors in CSS#Universal Selector" href="https://soymadip.me/notes/4.-css/3.-selectors-in-css.html#Universal_Selector_0" class="internal-link" target="_self" rel="noopener nofollow">Universal Selector</a>
<br><a data-tooltip-position="top" aria-label="3. Selectors in CSS > Element Selector (Type Selector)" data-href="3. Selectors in CSS#Element Selector (Type Selector)" href="https://soymadip.me/notes/4.-css/3.-selectors-in-css.html#Element_Selector_(Type_Selector)_0" class="internal-link" target="_self" rel="noopener nofollow">Element Selector</a>
<br><a data-tooltip-position="top" aria-label="3. Selectors in CSS > ID Selector" data-href="3. Selectors in CSS#ID Selector" href="https://soymadip.me/notes/4.-css/3.-selectors-in-css.html#ID_Selector_0" class="internal-link" target="_self" rel="noopener nofollow">Id Selector</a>
<br><a data-tooltip-position="top" aria-label="3. Selectors in CSS > Class Selector" data-href="3. Selectors in CSS#Class Selector" href="https://soymadip.me/notes/4.-css/3.-selectors-in-css.html#Class_Selector_0" class="internal-link" target="_self" rel="noopener nofollow">Class Selector</a>
<br><a data-tooltip-position="top" aria-label="3. Selectors in CSS > Group Selector" data-href="3. Selectors in CSS#Group Selector" href="https://soymadip.me/notes/4.-css/3.-selectors-in-css.html#Group_Selector_0" class="internal-link" target="_self" rel="noopener nofollow">Group Selector</a> <br>Note:- There is also <a data-tooltip-position="top" aria-label="3. Selectors in CSS > Attribute Selector" data-href="3. Selectors in CSS#Attribute Selector" href="https://soymadip.me/notes/4.-css/3.-selectors-in-css.html#Attribute_Selector_0" class="internal-link" target="_self" rel="noopener nofollow">Attribute Selector</a>.
Universal selector represented by "*" targets all the HTML elements on the page.
The syntax of Universal Selector is as follows:
* { property : value;
} Consider the code snippet:
&lt;html&gt; &lt;head&gt; &lt;style&gt; * { color: purple; text-align: center; } &lt;/style&gt;
&lt;/head&gt; &lt;body&gt; &lt;p&gt;Welcome to &lt;/p&gt; &lt;h1&gt;CodeWithHarry&lt;/h1&gt;
&lt;/body&gt; &lt;/html&gt;
Output:<br><img alt="selector-universal.png" src="https://soymadip.me/notes/4.-css/assets/selector-universal.png" target="_self" style="width: 600px; max-width: 100%;">Notice, Irrespective of the tag, the style will be applied to all the elements and tags.
The element selector selects the target element based on the specific type. Suppose you want to underline all the &lt;p&gt; tags; in this case, the element selector will be the best choice.
The syntax of Element Selector is as follows: selector can be any HTML tag. Here, we have considered the p tag. p { property : value;
} Consider the code snippet:
&lt;html&gt; &lt;head&gt; &lt;title&gt;CSS&lt;/title&gt; &lt;style&gt; p{ text-decoration: underline; } &lt;/style&gt;
&lt;/head&gt; &lt;body&gt; &lt;h1&gt;CodeWithHarry&lt;/h1&gt; &lt;h2&gt;we offer: &lt;/h2&gt; &lt;p&gt;Python Tutorials - 100 Days of Code&lt;/p&gt; &lt;p&gt;Ultimate JavaScript Course&lt;/p&gt; &lt;p&gt;React JS Tutorials For Beginners&lt;/p&gt;
&lt;/body&gt; &lt;/html&gt; Output:
<br><img alt="Selector-Element.png" src="https://soymadip.me/notes/4.-css/assets/selector-element.png" target="_self" style="width: 500px; max-width: 100%;">Note: Element selector is not recommended as the same tag can be used multiple times in the document. So, overlapping rules can occur in the stylesheet.
The ID selector targets the elements based on the specific ID. It is written with the hash “#” character followed by the ID name in the style sheet.
The syntax of ID Selector is as follows:
[[ID]] { property : value;
} Consider the code snippet:
&lt;html&gt;
&lt;head&gt; &lt;style&gt; [[title]] { text-align: center; color: red; } &lt;/style&gt;
&lt;/head&gt; &lt;body&gt; &lt;h1 id="title"&gt;CodeWithHarry&lt;/h1&gt; &lt;p&gt;I'm a Developer and the founder of CodeWithHarry.com&lt;/p&gt;
&lt;/body&gt; &lt;/html&gt;
<br>In the style block, the selector &nbsp;<a href="https://soymadip.me/notes?query=tag:title" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#title">#title</a>, will only target the HTML element having an ID of "title".
Consider the output of the above code:
<br><img alt="selector-ID.png" src="https://soymadip.me/notes/4.-css/assets/selector-id.png" target="_self" style="width: 600px; max-width: 100%;">Notice, how the property color: red is only applied to &lt;h1&gt; tag. The class selector does the same job as the id selector, a class selector helps group various types of elements. Suppose, we want to give a custom style to a specific group of elements. In this case, the class selector is the best option. It is written with the period “**.**” character followed by the class name in the style sheet. The syntax of Class Selector is as follows: .class { property : value;
}
Consider the code snippet:&lt;html&gt; &lt;head&gt; &lt;title&gt;CSS&lt;/title&gt; &lt;style&gt; .red { color: red; } &lt;/style&gt;
&lt;/head&gt; &lt;body&gt; &lt;p&gt;This is simple p tag&lt;/p&gt; &lt;p class="red"&gt;This p tag has class red&lt;/p&gt; &lt;p&gt;This is simple p tag&lt;/p&gt; &lt;p class="red"&gt;This p tag has class red&lt;/p&gt;
&lt;/body&gt; &lt;/html&gt;
In the above code snippet, the color:red will only be applied to the element having class 'red'.<br><img alt="selector-Class.png" src="https://soymadip.me/notes/4.-css/assets/selector-class.png" target="_self" style="width: 600px; max-width: 100%;">Note: The class selector helps in grouping two or more elements.
The group selector is used to minimise the code. Commas "," are used to separate each selector in a grouping. This reduces the number of lines of code. The code also looks clean.
The syntax of Group Selector is as follows:div, p, a { property : value;
}
Consider the code snippet:&lt;html&gt; &lt;head&gt; &lt;title&gt;CSS&lt;/title&gt; &lt;style&gt; h1 { color: red; } p,a { color: purple; } &lt;/style&gt;
&lt;/head&gt; &lt;body&gt; &lt;h1&gt;CodeWithHarry&lt;/h1&gt; &lt;p&gt;This is the p tag&lt;/p&gt; &lt;a href="#"&gt;This is the anchor (a) tag&lt;/a&gt;
&lt;/body&gt; &lt;/html&gt;
In the &lt;style&gt; block, p and a tag are grouped together so, that both tags will have the same properties.“Pasted image 20240428091823.png” could not be found.The [attribute] selector is used to select elements with a specified attribute.Syntax:- element[attribute] { background-color: yellow;
}
Example:-a[href="youtube.com"] { color: blue;
}
/* all &lt;a&gt; tag with YouTube.com link will be blue */ Universal Selector(*): Target the entire page.
Element Selector: Target a specific element.
ID Selector(#): Target element with a specific ID.
Class Selector(.): Tar
get element(s) with the same class.
Group Selector: Group elements and target them.
]]></description><link>https://soymadip.me/notes/4.-css/3.-selectors-in-css.html</link><guid isPermaLink="false">4. CSS/3. Selectors in CSS.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 13 May 2024 17:33:03 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/selector-universal.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/selector-universal.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[11. Textarea & Select Element]]></title><description><![CDATA[In addition to the basic input types, HTML forms offer other controls like&nbsp;textarea&nbsp;and&nbsp;select&nbsp;for richer user interaction. These elements allow for more complex data collection and provide a better user experience. Enter your Feedback here... The&nbsp;textarea&nbsp;element is used when you need multiline text input from the user. This is particularly useful for comments, reviews, or any other type of input where the length is unpredictable.
Syntax:
&lt;textarea name="comment" rows="4" cols="50"&gt; Enter your comment here...
&lt;/textarea&gt; Apple Banana Cherry - The&nbsp;`select`&nbsp;element creates a dropdown menu for the user. It is useful when you have a predefined list of options for the user to choose from.
- syntax:
```html Apple Banana Cherry ``` Enter your comment here... Apple Banana Cherry You can combine&nbsp;textarea&nbsp;and&nbsp;select&nbsp;in the same form to capture varied types of user input.
Code:
&lt;form action="/submit"&gt; &lt;textarea name="comment" rows="4" cols="50"&gt;Enter your comment here...&lt;/textarea&gt; &lt;select name="fruits"&gt; &lt;option value="apple"&gt;Apple&lt;/option&gt; &lt;option value="banana"&gt;Banana&lt;/option&gt; &lt;option value="cherry"&gt;Cherry&lt;/option&gt; &lt;/select&gt; &lt;input type="submit" value="Submit"&gt;
&lt;/form&gt;
]]></description><link>https://soymadip.me/notes/3.-html/11.-textarea-&amp;-select-element.html</link><guid isPermaLink="false">3. HTML/11. Textarea &amp; Select Element.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 13 May 2024 17:33:03 GMT</pubDate></item><item><title><![CDATA[7b. Text styling in CSS]]></title><description><![CDATA[Used to set the horizontal alignment of a text.
There are four values for text alignment:-
left: align the text to the left.
centre: align the text to the centre.
right: align the text to the right.
justify: spread the text evenly between the left and right margins.
.div1{ text-align: center;
}
Used to decorate the text.
There are four values:-
overline: adds a line above the text
underline: adds a line below the text
line-through: Adds a line to the text.
none: To remove decoration.
Used to specify uppercase and lowercase letters in a text
There are four values for text-transform:-
uppercase: Transform text to uppercase (all capital letters).
lowercase: transform text to lowercase (all small letters).
capitalise: capitalise the first character from each word.
none: To remove text transformation.
p.uppercase{ text-transform: uppercase;
}
The line-height property controls the spacing between the two lines of text..Small{ line-height: 0.7;
}
]]></description><link>https://soymadip.me/notes/4.-css/7b.-text-styling-in-css.html</link><guid isPermaLink="false">4. CSS/7b. Text styling in CSS.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 11 May 2024 12:45:58 GMT</pubDate></item><item><title><![CDATA[7a. Display property in CSS]]></title><description><![CDATA[The CSS display property is used to determine whether an element is treated as a block/inline element &amp; the layout used for its children (flexbox/grid/etc.)Takes only the space required by the element. No line breaks before and after. Setting width/height (or margin/padding) not allowed.Takes full space available in width and leaves a newline before and after the elementSimilar to inline but setting height, width, margin, and padding is allowed. Elements can sit next to each otherWith display: none, the element is removed from the document flow. Its space is not blocked.With visibility: hidden, the element is hidden but its space is reserved.]]></description><link>https://soymadip.me/notes/4.-css/7a.-display-property-in-css.html</link><guid isPermaLink="false">4. CSS/7a. Display property in CSS.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 11 May 2024 12:40:18 GMT</pubDate></item><item><title><![CDATA[2a. Ways to add CSS]]></title><description><![CDATA[There are three different ways to add CSS to an HTML page, which are:
<a data-tooltip-position="top" aria-label="2a. Ways to add CSS > Inline CSS" data-href="2a. Ways to add CSS#Inline CSS" href="https://soymadip.me/notes/4.-css/2a.-ways-to-add-css.html#Inline_CSS_0" class="internal-link" target="_self" rel="noopener nofollow">Inline CSS</a>
<br><a data-tooltip-position="top" aria-label="2a. Ways to add CSS > Internal CSS" data-href="2a. Ways to add CSS#Internal CSS" href="https://soymadip.me/notes/4.-css/2a.-ways-to-add-css.html#Internal_CSS_0" class="internal-link" target="_self" rel="noopener nofollow">Internal CSS</a>
<br><a data-tooltip-position="top" aria-label="2a. Ways to add CSS > External CSS" data-href="2a. Ways to add CSS#External CSS" href="https://soymadip.me/notes/4.-css/2a.-ways-to-add-css.html#External_CSS_0" class="internal-link" target="_self" rel="noopener nofollow">External CSS</a>
Note
The precedence is Inline CSS &gt; Internal CSS &gt; External CSS.
If we define the same property with different property values in three different ways, the element will have the property value of inline CSS. Inline CSS is used to add custom properties to specific elements. The added style will only reflect on that particular element only.
To use inline CSS, Insert the "style" attribute within the HTML element's opening tag.
Consider the code snippet:
&lt;h1 style="color: purple;"&gt;I'm harry&lt;/h1&gt;
&lt;h2&gt;I'm CodeWithHarry&lt;/h2&gt;
<br><img alt="inline css.png" src="https://soymadip.me/notes/4.-css/assets/inline-css.png" target="_self" style="width: 600px; max-width: 100%;">
Here, the inline style of color: purple is attached to only the h1 tag.Note: The downside of using inline CSS is, that once the project complexity increases, it will become difficult to manage the styles of each and individual elements.Internal CSS is used to apply custom style to the multiple elements on the same page. The style can be used throughout the HTML page.
Internal CSS is defined in a style block, which will be inside the head section.
Consider the code snippet:
&lt;head&gt; &lt;style&gt; p { color: red; } &lt;/style&gt;
&lt;/head&gt; &lt;body&gt; &lt;h1&gt;CodeWithHarry&lt;/h1&gt; &lt;p&gt;I'm harry, from CodeWithHarry&lt;/p&gt; &lt;p&gt;I'm a Developer and founder of CodeWithHarry.com&lt;/p&gt;
&lt;/body&gt; &lt;/html&gt;
<br><img alt="css_Internal.png" src="https://soymadip.me/notes/4.-css/assets/css_internal.png" target="_self" style="width: 600px; max-width: 100%;">
Here, in the style block, selector p will target all p tags and assign them color:red.Note: The &lt;style&gt; block should always be in the &lt;head&gt; section. Instead of adding the styles within the HTML file, we create a separate file with .css extension. This file will hold all the styling details. Then, we link this file to the HTML page, giving it the instructions on how to look.&nbsp; The following points will explain each keyword's meaning:&nbsp; &lt;link&gt;: This tag is used to create links between different resources, like stylesheets, fonts, and more. In our case, we are using a link tag to link the CSS file with the HTML file.
rel="stylesheet": rel&nbsp;stands for&nbsp;relationship,&nbsp; this defines the type of relationship between the HTML document and the linked resource. When set to "stylesheet", it specifies that the linked resource is a stylesheet that will be used to style the HTML content.
href="style.css" : The&nbsp;href attribute stands for "hypertext reference." It specifies the path or URL to the external resource we want to link. In this case, it's the path to the external CSS file called "style.css". Consider the code snippets: &lt;html lang="en"&gt;
&lt;head&gt; &lt;title&gt;CodeWithHarry&lt;/title&gt; &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt; &lt;body&gt; &lt;p&gt;I'm harry, from CodeWithHarry&lt;/p&gt; &lt;p&gt;I'm a Developer and founder of CodeWithHarry.com&lt;/p&gt;
&lt;/body&gt; &lt;/html&gt; style.css:
p{ color: red;
}
These code snippets will generate this page:<br>
<img alt="css_External.png" src="https://soymadip.me/notes/4.-css/assets/css_external.png" target="_self" style="width: 600px; max-width: 100%;">This approach enables to use of the same CSS to multiple HTML files, wherever the same custom style is required.
This is helpful when we have to maintain consistency on our web pages and want to use the same CSS styles across multiple pages.]]></description><link>https://soymadip.me/notes/4.-css/2a.-ways-to-add-css.html</link><guid isPermaLink="false">4. CSS/2a. Ways to add CSS.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 06:31:23 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/inline-css.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/inline-css.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[border-collapse]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/border-collapse.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/border-collapse.html</link><guid isPermaLink="false">4. CSS/Assets/border-collapse.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:59:27 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/border-collapse.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/border-collapse.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[border-color]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/border-color.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/border-color.html</link><guid isPermaLink="false">4. CSS/Assets/border-color.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:59:27 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/border-color.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/border-color.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[border-radius]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/border-radius.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/border-radius.html</link><guid isPermaLink="false">4. CSS/Assets/border-radius.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:59:26 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/border-radius.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/border-radius.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[border-seperate]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/border-seperate.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/border-seperate.html</link><guid isPermaLink="false">4. CSS/Assets/border-seperate.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:59:26 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/border-seperate.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/border-seperate.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[border-spacing]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/border-spacing.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/border-spacing.html</link><guid isPermaLink="false">4. CSS/Assets/border-spacing.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:59:26 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/border-spacing.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/border-spacing.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[border-style]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/border-style.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/border-style.html</link><guid isPermaLink="false">4. CSS/Assets/border-style.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:59:26 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/border-style.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/border-style.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[border-width]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/border-width.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/border-width.html</link><guid isPermaLink="false">4. CSS/Assets/border-width.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:59:25 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/border-width.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/border-width.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[logo-blue]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/logo-blue.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/logo-blue.html</link><guid isPermaLink="false">4. CSS/Assets/logo-blue.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:59:25 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/logo-blue.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/logo-blue.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[shorthand_border]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/shorthand_border.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/shorthand_border.html</link><guid isPermaLink="false">4. CSS/Assets/shorthand_border.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:59:25 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/shorthand_border.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/shorthand_border.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[background_shorthand]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/background_shorthand.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/background_shorthand.html</link><guid isPermaLink="false">4. CSS/Assets/background_shorthand.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:33:02 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/background_shorthand.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/background_shorthand.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[background_position]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/background_position.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/background_position.html</link><guid isPermaLink="false">4. CSS/Assets/background_position.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:31:13 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/background_position.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/background_position.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[background_size_custom]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/background_size_custom.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/background_size_custom.html</link><guid isPermaLink="false">4. CSS/Assets/background_size_custom.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:22:56 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/background_size_custom.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/background_size_custom.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[background_size_contain]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/background_size_contain.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/background_size_contain.html</link><guid isPermaLink="false">4. CSS/Assets/background_size_contain.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:21:02 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/background_size_contain.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/background_size_contain.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[background_size_cover]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/background_size_cover.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/background_size_cover.html</link><guid isPermaLink="false">4. CSS/Assets/background_size_cover.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:20:04 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/background_size_cover.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/background_size_cover.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[background_repeat_no_repeat]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/background_repeat_no_repeat.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/background_repeat_no_repeat.html</link><guid isPermaLink="false">4. CSS/Assets/background_repeat_no_repeat.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:17:14 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/background_repeat_no_repeat.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/background_repeat_no_repeat.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[background_repeat_repeat]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/background_repeat_repeat.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/background_repeat_repeat.html</link><guid isPermaLink="false">4. CSS/Assets/background_repeat_repeat.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:16:30 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/background_repeat_repeat.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/background_repeat_repeat.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[background_repeat_y]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/background_repeat_y.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/background_repeat_y.html</link><guid isPermaLink="false">4. CSS/Assets/background_repeat_y.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:15:13 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/background_repeat_y.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/background_repeat_y.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[background_repeat_x]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/background_repeat_x.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/background_repeat_x.html</link><guid isPermaLink="false">4. CSS/Assets/background_repeat_x.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:14:34 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/background_repeat_x.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/background_repeat_x.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[background_image]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/background_image.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/background_image.html</link><guid isPermaLink="false">4. CSS/Assets/background_image.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:09:46 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/background_image.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/background_image.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[background_color]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/background_color.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/background_color.html</link><guid isPermaLink="false">4. CSS/Assets/background_color.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:05:10 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/background_color.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/background_color.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2c. Comments in CSS]]></title><description><![CDATA[ Comments help with documentation and are helpful for the future users who read that code, so that they can understand it easily. Comments are ignored by the browser and Comments don't affect the styling or layout. CSS Comments are enclosed between&nbsp;/*&nbsp;&amp;&nbsp;*/. If you are using <a data-tooltip-position="top" aria-label="https://code.visualstudio.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://code.visualstudio.com/" target="_self">vs code</a>, you can use cltr + / to comment the line. There are two types of comments in CSS: Single-line comments are contained within one line. They are useful for short annotations.selector{ /* property: value */
}
for example:/* This is a single line commnent */ p{ /* color: red */
}
here, the comment is between&nbsp;/*&nbsp;and&nbsp;*/Multi-line comments span across multiple lines, making them ideal for detailed explanations or temporarily disabling blocks of code.selector{ /* property1: value1 property1: value1 property1: value1 */
}
These are similar to single-line comments, but this helps to comment large descriptions, notes, etc.for example:/* This is a
multi line
commment */
p { /* color: red; background-color: purple; */ color: purple; background-color: red;
}
]]></description><link>https://soymadip.me/notes/4.-css/2c.-comments-in-css.html</link><guid isPermaLink="false">4. CSS/2c. Comments in CSS.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 03 May 2024 05:02:16 GMT</pubDate></item><item><title><![CDATA[hsla]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/hsla.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/hsla.html</link><guid isPermaLink="false">4. CSS/Assets/hsla.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 01 May 2024 16:38:59 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/hsla.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/hsla.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[hsl]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/hsl.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/hsl.html</link><guid isPermaLink="false">4. CSS/Assets/hsl.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 01 May 2024 16:36:58 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/hsl.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/hsl.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[rgba]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/rgba.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/rgba.html</link><guid isPermaLink="false">4. CSS/Assets/rgba.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 01 May 2024 16:34:52 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/rgba.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/rgba.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[rgb]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/rgb.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/rgb.html</link><guid isPermaLink="false">4. CSS/Assets/rgb.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 01 May 2024 16:33:15 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/rgb.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/rgb.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[hex]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/hex.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/hex.html</link><guid isPermaLink="false">4. CSS/Assets/hex.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 01 May 2024 16:30:44 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/hex.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/hex.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[color_name]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/color_name.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/color_name.html</link><guid isPermaLink="false">4. CSS/Assets/color_name.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 01 May 2024 16:28:22 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/color_name.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/color_name.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Font-Family]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/font-family.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/font-family.html</link><guid isPermaLink="false">4. CSS/Assets/Font-Family.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 01 May 2024 15:10:36 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/font-family.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/font-family.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Font-Weight]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/font-weight.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/font-weight.html</link><guid isPermaLink="false">4. CSS/Assets/Font-Weight.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 01 May 2024 15:08:29 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/font-weight.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/font-weight.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Font-Varient]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/font-varient.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/font-varient.html</link><guid isPermaLink="false">4. CSS/Assets/Font-Varient.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 01 May 2024 15:03:48 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/font-varient.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/font-varient.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Font-Style]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/font-style.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/font-style.html</link><guid isPermaLink="false">4. CSS/Assets/Font-Style.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 01 May 2024 15:02:40 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/font-style.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/font-style.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Font-Size]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/font-size.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/font-size.html</link><guid isPermaLink="false">4. CSS/Assets/Font-Size.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 01 May 2024 14:44:39 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/font-size.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/font-size.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[selector-Class]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/selector-class.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/selector-class.html</link><guid isPermaLink="false">4. CSS/Assets/selector-Class.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 28 Apr 2024 03:47:02 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/selector-class.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/selector-class.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[selector-ID]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/selector-id.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/selector-id.html</link><guid isPermaLink="false">4. CSS/Assets/selector-ID.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 28 Apr 2024 03:45:15 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/selector-id.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/selector-id.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Selector-Element]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/selector-element.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/selector-element.html</link><guid isPermaLink="false">4. CSS/Assets/Selector-Element.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 28 Apr 2024 03:43:35 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/selector-element.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/selector-element.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[selector-universal]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/selector-universal.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/selector-universal.html</link><guid isPermaLink="false">4. CSS/Assets/selector-universal.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 28 Apr 2024 03:41:22 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/selector-universal.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/selector-universal.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[css_External]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/css_external.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/css_external.html</link><guid isPermaLink="false">4. CSS/Assets/css_External.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 28 Apr 2024 03:22:15 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/css_external.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/css_external.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[css_Internal]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/css_internal.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/css_internal.html</link><guid isPermaLink="false">4. CSS/Assets/css_Internal.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 28 Apr 2024 03:17:02 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/css_internal.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/css_internal.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[inline css]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/inline-css.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/inline-css.html</link><guid isPermaLink="false">4. CSS/Assets/inline css.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 28 Apr 2024 03:14:52 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/inline-css.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/inline-css.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Page Layout Techniques]]></title><description><![CDATA[
Using Semantic tags for layout
Using the Right Tags
An page contains 3 main tags:
1. &lt;header&gt; Tag
2. &lt;main&gt; Tag
3. &lt;footer&gt; Tag
Inside main tags, we have: &lt;section&gt; For a section on page. &lt;article&gt; For an article on page.
&lt;aside&gt; For content aside main content (ads). Div is a container used for other HTML elements
The &lt;div&gt; tag is used as a container for HTML elements - which is then styled with CSS or manipulated with JavaScript.
The &lt;div&gt; tag is easily styled by using the class or id attribute.
Example:
&lt;html&gt; &lt;body&gt; &lt;div class="myDiv"&gt; &lt;h2&gt;This is a heading in a div element&lt;/h2&gt; &lt;p&gt;This is some text in a div element.&lt;/p&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; Note: By default, browsers always place a line break before and after the &lt;div&gt; element. The &lt;span&gt; tag is an inline container used to mark up a part of a text, or a part of a document.
The &lt;span&gt; tag is much like the &lt;div&gt; element, but &lt;div&gt; is a block-level element and &lt;span&gt; is an <a data-tooltip-position="top" aria-label="3. Elements in HTML > Inline Elements" data-href="3. Elements in HTML#Inline Elements" href="https://soymadip.me/notes/.html" class="internal-link" target="_self" rel="noopener nofollow">inline</a> element.
]]></description><link>https://soymadip.me/notes/3.-html/page-layout-techniques.html</link><guid isPermaLink="false">3. HTML/Page Layout Techniques.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 09 Apr 2024 15:02:39 GMT</pubDate></item><item><title><![CDATA[opl]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/opl.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/opl.html</link><guid isPermaLink="false">4. CSS/Assets/opl.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 08 Apr 2024 16:42:53 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/opl.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/opl.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[basic_syntax]]></title><description><![CDATA[<img src="https://soymadip.me/notes/4.-css/assets/basic_syntax.png" target="_self">]]></description><link>https://soymadip.me/notes/4.-css/assets/basic_syntax.html</link><guid isPermaLink="false">4. CSS/Assets/basic_syntax.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 07 Apr 2024 07:12:50 GMT</pubDate><enclosure url="https://soymadip.me/notes/4.-css/assets/basic_syntax.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/4.-css/assets/basic_syntax.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[16. HTML Semantic Tags]]></title><description><![CDATA[<img alt="semantic Tags.png" src="https://soymadip.me/notes/3.-html/assets/semantic-tags.png" target="_self" style="width: 500px; max-width: 100%;">HTML5 introduced a range of semantic tags that provide meaning to the structure of web content. This blog will guide you through the importance and usage of these tags.Semantic tags add meaning to your HTML.
They tell both the browser and the developer what kind of content is being presented.Here are some of the key semantic tags you must know about:
&lt;header&gt;: Used to represent the top section of a web page, often containing headings, logos, and navigation.
&lt;nav&gt;: Signifies a navigation menu on a web page.
&lt;article&gt;: Indicates a self-contained piece of content, such as a blog post or news article.
&lt;section&gt;: Represents a thematic grouping of content on a web page.
&lt;aside&gt;: Typically used for sidebars or content that is tangentially related to the main content.
&lt;footer&gt;: Represents the footer of a web page, usually containing copyright information and contact details.
&lt;figure&gt;&nbsp;and&nbsp;&lt;figcaption&gt;: Used for embedding images, diagrams, or charts, along with a caption.
&lt;main&gt;: Signifies the main content area of a web page.
&lt;time&gt;: Used to represent time-related information, like dates and times.
They enhance SEO, improve accessibility, and make your code easier to read and maintain.Here are some commonly used semantic tags in HTML:
header: Contains introductory content.
footer: Holds footer information.
article: Encapsulates a self-contained composition.
section: Represents a standalone section.
aside: Contains content aside from the content it is placed in.
nav: Holds navigation links.
&lt;header&gt; &lt;h1&gt;My Website&lt;/h1&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Services&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt;
&lt;/header&gt; &lt;footer&gt; &lt;p&gt;Copyright 2023&lt;/p&gt;
&lt;/footer&gt; &lt;article&gt; &lt;h2&gt;Article Title&lt;/h2&gt; &lt;section&gt; &lt;p&gt;Content here&lt;/p&gt; &lt;/section&gt;
&lt;/article&gt; &lt;aside&gt; &lt;p&gt;This is an aside content&lt;/p&gt; &lt;/aside&gt;
&lt;nav&gt; &lt;ul&gt; &lt;li&gt;Home&lt;/li&gt; &lt;li&gt;About&lt;/li&gt; &lt;/ul&gt;
&lt;/nav&gt;
&lt;figure&gt; &lt;img src="image.jpg" alt="An example image"&gt; &lt;figcaption&gt;This is an example image.&lt;/figcaption&gt;
&lt;/figure&gt; ]]></description><link>https://soymadip.me/notes/3.-html/16.-html-semantic-tags.html</link><guid isPermaLink="false">3. HTML/16. HTML Semantic Tags.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 20:09:10 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/semantic-tags.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/semantic-tags.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[semantic Tags]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/semantic-tags.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/semantic-tags.html</link><guid isPermaLink="false">3. HTML/Assets/semantic Tags.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 20:05:01 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/semantic-tags.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/semantic-tags.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[15. Obsolete HTML Tags]]></title><description><![CDATA[As HTML has evolved, some tags have been deprecated or become obsolete. While modern browsers might still support them, their use is discouraged in favor of CSS or more semantic HTML5 elements. In this blog, we'll explore some of these obsolete tags and their modern alternatives.Obsolete tags are HTML elements that are no longer recommended for use. They may lack support in modern browsers and are likely to be phased out entirely in future versions of HTML.
Compatibility Issues: Not supported by all modern browsers.
Accessibility: This may not meet current web accessibility standards.
Maintenance: Makes future updates difficult.
Used to specify text color, size, and font.&lt;font color="red" size="3" face="verdana"&gt;This is some text&lt;/font&gt;
Used to center-align elements.&lt;u&gt;This text will be underlined&lt;/u&gt;
&lt;span style="color:red; font-size:16px; font-family:verdana;"&gt;This is some text&lt;/span&gt;
&lt;div style="text-align:center;"&gt;This text will be centered&lt;/div&gt;
&lt;span style="text-decoration:underline;"&gt;This text will be underlined&lt;/span&gt;
]]></description><link>https://soymadip.me/notes/3.-html/15.-obsolete-html-tags.html</link><guid isPermaLink="false">3. HTML/15. Obsolete HTML Tags.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 19:57:50 GMT</pubDate></item><item><title><![CDATA[14. HTML Entities]]></title><description><![CDATA[&nbsp; HTML entities are a crucial part of HTML markup language. They enable you to display characters that are reserved in HTML or that aren't readily available on the keyboard. In this blog, we'll explore what HTML entities are, their types, and how to use them.HTML entities are used to represent special characters in a format that the browser can understand. They start with an ampersand (&amp;) and end with a semicolon (;).Here are some reasons:
Reserved Characters: Characters like &lt;, &gt;, and &amp; are reserved in HTML.
Special Symbols: For symbols like ©, ®, or mathematical symbols.
Non-Breaking Spaces: To create white spaces that won't break into a new line.
Here are some common ones:
&lt; for &lt;
&gt; for &gt;
&amp; for &amp;
&nbsp; for a non-breaking space
© for © Entities can be implemented easily within HTML code. ]]></description><link>https://soymadip.me/notes/3.-html/14.-html-entities.html</link><guid isPermaLink="false">3. HTML/14. HTML Entities.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 19:54:12 GMT</pubDate></item><item><title><![CDATA[3. Attributes & Comments]]></title><description><![CDATA[HTML attributes are used to define the characteristics of an HTML element.
They are placed within the element's opening tag &amp; consist of two parts: the&nbsp;name&nbsp;and the&nbsp;value.
Name: Specifies the property for that element.
Value: Sets the value of that property for the element.
There are three main types of HTML attributes:
Core/Global Attributes: These are basic attributes that can be applied to most HTML elements.
Internationalization Attributes: These attributes help adapt the document to different languages and regions. Examples include&nbsp;lang&nbsp;and&nbsp;dir.
Generic Attributes: These attributes provide additional information about the element but don't necessarily affect its appearance or behavior. Core/Global attributes are some of the most widely used attributes in HTML.
There are four main types:
id
class
title
style
The ID attribute is used to assign a unique identifier to an HTML element.
Each element with an ID has its own unique identity, similar to how each individual has a unique identity. Multiple elements cannot have the same ID.
Example: &lt;p id="html"&gt;This is an HTML tutorial&lt;/p&gt; &lt;p id="python"&gt;This is a Python tutorial&lt;/p&gt;
In this example, the ID attribute helps to distinguish between two paragraphs by having different values: "html" and "python".The class attribute is used to associate an HTML element with a particular class, typically for styling or JavaScript manipulation.
Unlike the ID attribute, the class attribute is not unique, and multiple elements can share the same class.The title attribute provides additional information about an element and is often displayed as a tooltip when the mouse hovers over it.
Example: &lt;h4 title="hello, motto"&gt;Title attribute&lt;/h4&gt;
The style attribute allows for inline styling of HTML elements.
It is used in conjunction with CSS properties to directly style individual elements within the HTML code.Case sensivity
The HTML standard is flexible about the case of attribute names, allowing them to be written in either uppercase or lowercase, such as "title" or "TITLE."
However, for best practices and compatibility with stricter document types like XHTML, the W3C recommends using lowercase attributes.
Comments in HTML are like little notes you leave in your code for yourself that doesn't show up in actual website.HTML primarily supports two types of comments:Single-line comments are contained within one line. They are useful for short annotations.Example: &lt;!-- This is a single-line comment --&gt;
Multi-line comments span across multiple lines, making them ideal for detailed explanations or temporarily disabling blocks of code.Example:&lt;!-- This is a multi-line comment. It spans multiple lines.
--&gt;
]]></description><link>https://soymadip.me/notes/3.-html/3.-attributes-&amp;-comments.html</link><guid isPermaLink="false">3. HTML/3. Attributes &amp; Comments.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 19:33:46 GMT</pubDate></item><item><title><![CDATA[8. Input methods in HTML]]></title><description><![CDATA[
Used to create various input elements in page.
controlled by attributes.
&lt;p&gt;Name: &lt;input type="text" placeholder="Enter your name"&gt;&lt;/p&gt;
&lt;p&gt;Password: &lt;input type="password" placeholder="Enter your password"&gt;&lt;/p&gt;
&lt;input type="submit" placeholder="enter your text" &gt;
<img alt="required attribute.png" src="https://soymadip.me/notes/3.-html/assets/required-attribute.png" target="_self">
The required Attribute specifies that the field is required to fill before submitting a form.
Syntax:
&lt;input type="text" id="username" placeholder="Text input" required&gt; The type attribute specifies the type of &lt;input&gt; element to display.
If the type attribute is not specified, the default type is "text". Syntax:- &lt;input type="value"&gt; ]]></description><link>https://soymadip.me/notes/3.-html/8.-input-methods-in-html.html</link><guid isPermaLink="false">3. HTML/8. Input methods in HTML.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 19:12:58 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/required-attribute.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/required-attribute.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[required attribute]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/required-attribute.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/required-attribute.html</link><guid isPermaLink="false">3. HTML/Assets/required attribute.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 19:10:24 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/required-attribute.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/required-attribute.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[10. Tables in HTML]]></title><description><![CDATA[
HTML tables allow web developers to arrange data into rows and columns. &lt;caption&gt; tag is used for creating caption(table title).
&lt;thead&gt; to wrap table head &lt;tbody&gt; to wrap table body
&lt;tfoot&gt; to wrap table footer
&lt;tr&gt; is to display table row.
&lt;th&gt; tag is for table header or first cells. &lt;td&gt; tag is for table data or next cells.
Attributes: align: to align the text inside the table. To align a whole row, use this inside &lt;tr&gt; tag. border: for border around table.
colspan="n": to create cells which spans over n COLOUMS rowspan="n": to create cells which spans over n ROWS Example:
&lt;table border="1"&gt; &lt;!-- caption --&gt; &lt;caption&gt; Table subject &lt;/caption&gt; &lt;thead&gt; &lt;!-- Table Header --&gt; &lt;tr&gt; &lt;td colspan="4" align="center"&gt; MERGED COLOUMNS &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt; Table Heading-&gt; 1st coloumn &lt;/th&gt; &lt;th&gt; Table Heading-&gt; 2nd coloumn &lt;/th&gt; &lt;th&gt; Table Heading-&gt; 3rd coloumn &lt;/th&gt; &lt;th&gt; Table Heading-&gt; 4th coloumn &lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;!-- Table Body --&gt; &lt;tr align="center" &gt; &lt;td&gt; 1st coloumn &lt;/td&gt; &lt;td&gt; 2nd coloumn &lt;/td&gt; &lt;td&gt; 3rd coloumn &lt;/td&gt; &lt;td rowspan="2"&gt; 4th coloumn 2nd &amp; 3rd row.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; 1st coloumn &lt;/td&gt; &lt;td&gt; 2nd coloumn &lt;/td&gt; &lt;td&gt; 3rd coloumn &lt;/td&gt; &lt;!--4th coloumn filled by rowspan--&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td colspan="4" align="center"&gt; FOOTER &lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt;
&lt;/table&gt; Preview:
<img alt="Table.png" src="https://soymadip.me/notes/3.-html/assets/table.png" target="_self"> You can use the&nbsp;&lt;colgroup&gt;&nbsp;and&nbsp;&lt;col&gt;&nbsp;elements to apply styles to an entire column in an HTML table.
&lt;table&gt; &lt;colgroup&gt; &lt;col style="background-color:yellow"&gt; &lt;/colgroup&gt; &lt;!-- rest of the table --&gt;
&lt;/table&gt; To make your tables more accessible, you can use the&nbsp;scope&nbsp;attribute in&nbsp;&lt;th&gt;&nbsp;elements to specify if they are headers for columns, rows, or groups of columns or rows.&lt;th scope="col"&gt;Name&lt;/th&gt;
&lt;th scope="col"&gt;Age&lt;/th&gt;
]]></description><link>https://soymadip.me/notes/3.-html/10.-tables-in-html.html</link><guid isPermaLink="false">3. HTML/10. Tables in HTML.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 18:53:45 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/table.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/table.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[13. SVG in HTML]]></title><description><![CDATA[
Scalable Vector Graphics (SVG) has become an indispensable part of modern web development. SVG enables developers to create high-quality, scalable graphics that look crisp at any size or resolution. SVG stands for Scalable Vector Graphics. Unlike raster images like PNGs or JPGs, SVGs are not pixel-based.
They're composed of vectors—mathematical formulas that describe shapes, paths, and fills. This means SVGs can be resized without losing quality.
SVG images can be scaled indefinitely without losing quality, which is ideal for responsive web design. SVG files are often smaller than their raster counterparts, especially for simple shapes and icons. SVGs can be styled, animated, and manipulated using CSS and JavaScript. SVG can also be used to create more complex shapes like polygons, lines, and text.
SVG can be embedded in HTML in several ways:
Inline SVG: Directly writing the SVG XML code within HTML.
Using an <img referrerpolicy="no-referrer"> tag: Point the src attribute to an SVG file.
Using CSS: Setting SVG as a background image in a CSS file.
&lt;svg height="100" width="100"&gt; &lt;circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red" /&gt;
&lt;/svg&gt;
&lt;img src="image.svg" alt="Sample SVG"&gt;
.background { background-image: url('image.svg'); }
SVG comes with a set of attributes to control its behavior:
width and height: To set the dimensions.
viewBox: To set the coordinate system.
fill and stroke: To set the colors.
&lt;svg height="30" width="30"&gt; &lt;rect width="30" height="30" style="fill:rgb(0,0,255);stroke-width:1;stroke:rgb(0,0,0)" /&gt;
&lt;/svg&gt;
]]></description><link>https://soymadip.me/notes/3.-html/13.-svg-in-html.html</link><guid isPermaLink="false">3. HTML/13. SVG in HTML.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 18:42:44 GMT</pubDate></item><item><title><![CDATA[Table]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/table.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/table.html</link><guid isPermaLink="false">3. HTML/Assets/Table.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 18:28:29 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/table.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/table.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[colspan & rowspan]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/colspan-&amp;-rowspan.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/colspan-&amp;-rowspan.html</link><guid isPermaLink="false">3. HTML/Assets/colspan &amp; rowspan.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 18:04:39 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/colspan-&amp;-rowspan.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/colspan-&amp;-rowspan.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[6b. Brief list of HTML Tags]]></title><description><![CDATA[
The &lt;!DOCTYPE&gt; declaration represents the document type, and helps browsers to display web pages correctly.
It must only appear once, at the top of the page (before any HTML tags).
The &lt;!DOCTYPE&gt; declaration is not case sensitive.
The &lt;!DOCTYPE&gt; declaration for HTML is: &lt;!DOCTYPE html&gt; The &lt;html&gt; element is the root element of an HTML page
&lt;html&gt;
&lt;/html&gt; The &lt;title&gt; element specifies a title for the HTML page (which is shown in the browser's title bar or in the page's tab)
&lt;html&gt;
&lt;head&gt; &lt;tltle&gt; My page &lt;/title&gt;
&lt;/head&gt;
&lt;/html&gt; The &lt;body&gt; element defines the document's body, and is a container for all the visible contents, such as headings, paragraphs, images, hyperlinks, tables, lists, etc. HTML headings are defined with the &lt;h1&gt; to &lt;h6&gt; tags.
&lt;h1&gt; defines the most important heading. &lt;h6&gt; defines the least important heading:&nbsp; &lt;!--(h1 to h6) --&gt; &lt;h1&gt;Heading tag 1(big)&lt;/h1&gt; &lt;h2&gt;Heading tag&lt;/h2&gt; &lt;h3&gt;Heading tag&lt;/h3&gt; &lt;h4&gt;Heading tag&lt;/h4&gt; &lt;h5&gt;Heading tag&lt;/h5&gt; &lt;h6&gt;Heading tag (small)&lt;/h6&gt;
<img alt="heading.png" src="https://soymadip.me/notes/3.-html/assets/heading.png" target="_self" style="width: 400px; max-width: 100%;">
HTML paragraphs are defined with the &lt;p&gt; tag:
Example:
&lt;p&gt;This is a paragraph.&lt;/p&gt; &lt;p&gt;This is another paragraph.&lt;/p&gt;
<br><img alt="paragraph.png" src="https://soymadip.me/notes/3.-html/assets/paragraph.png" target="_self"> By default HTML ignores extra spaces &amp; newlines.
pre tag is Used to display text as it is (without ignoring spaces &amp; next line).
Example:
&lt;pre&gt; This
is a sample
text.
&lt;/pre&gt; Live: This
is a sample
text. Used to add next line(line breaks) to your page.
Example:
&lt;br&gt; Used to display a horizontal ruler, used to separate content
Example:
`&lt;hr&gt;` Formatting Tags: (Bold, Italic, Underline, SuperScript, SubSCript) &lt;b&gt;This is bold text&lt;/b&gt; &lt;br&gt; &lt;i&gt;this is italic text&lt;/i&gt; &lt;br&gt; &lt;u&gt;This is underline text&lt;/u&gt; &lt;br&gt; A&lt;sup&gt;2&lt;/sup&gt; &lt;br&gt; O &lt;sub&gt;2&lt;/sub&gt; &lt;br&gt; Bold: &lt;b&gt; tag. [ This is bold text ]
italics: &lt;i&gt; tag. [ this is italic text ] underline: &lt;u&gt; tag. [ This is underline text ]
strike: &lt;strike&gt; tag [ strike text ]
Superscript text: &lt;sup&gt; tag. [ A2]
Subscript text: &lt;sub&gt; tag. [O 2 ]
Single line break: &lt;br&gt; tag. The &lt;br&gt; tag inserts a single line break. This is an empty tag which means that it has no end tag.
&lt;p&gt;Be not afraid of greatness.&lt;br&gt; Some are bon great,&lt;br&gt; some achieve greatness,&lt;br&gt; and others have greatness thrust upon them.&lt;/p&gt; Used to display big &amp; small text on your page
Example:
This is &lt;big&gt; Big &lt;/big&gt; &amp; &lt;small&gt; Small &lt;/small&gt; text. Live: This is Big &amp; Small text The &lt;sup&gt; tag defines superscript text. which appears half a character above the normal line.
The &lt;sup&gt; tag defines subscript text. which appears half a character below the normal line.
Example:
H&lt;sub&gt;2&lt;/sub&gt;O is made of H&lt;sup&gt;2+&lt;/sup&gt; &amp; O&lt;sup&gt;2-&lt;/sup&gt; Live: H2O is made of H2+ &amp; O2- It is used to create a scrolling piece of text or an image.
Depreciated in HTML5, should be used CSS instead.
Example:
&lt;marquee&gt; &lt;--- contents ---&gt; &lt;/marquee&gt; Live Example: This is live Example of marquee Tag. HTML images are defined with the &lt;img&gt; tag.
The source file (src), alternative text (alt), width, and height are provided as attributes: src is for image location.
alt is for caption.
height &amp; width is for image size. Example:<br>
<img height="50" alt="W3Schools.com" src="https://logos.kiwibrowser.com/github.com" referrerpolicy="no-referrer" target="_self" class="is-unresolved">
&lt;img src="address or path of the image" alt="caption if image not loaded" height="size"&gt; This is called Anchor Tag.
HTML links are defined with the &lt;a&gt; tags.
This is controlled by attributes: herf: The link's destination is specified here.
target="_main": to open the link in a new tab.
&lt;img src="link"&gt;: This is to use image instead of text for link (clickable link). Example:
&lt;a href="address of the link"&gt;caption &lt;/a&gt;
&lt;a href="address of the link"&gt;&lt;img src="https://logos.kiwibrowser.com/github.com"&gt; &lt;/a&gt; <br>Live: <a href="https://github.com" target="_self" rel="noopener nofollow" class="is-unresolved">This is a link To git</a>
<br><a href="https://soymadip.me/notes/.html" target="_self" rel="noopener nofollow"> </a><img height="30" src="https://logos.kiwibrowser.com/github.com" referrerpolicy="no-referrer" target="_self" class="is-unresolved">
]]></description><link>https://soymadip.me/notes/3.-html/6b.-brief-list-of-html-tags.html</link><guid isPermaLink="false">3. HTML/6b. Brief list of HTML Tags.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 17:58:08 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/heading.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/heading.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[12. Iframes in HTML]]></title><description><![CDATA[
iFrames, or Inline Frames, are an integral part of modern web development. They allow you to embed another HTML page within your current page. An iFrame is an HTML element that enables an inline frame for the embedding of external content. Essentially, you can load another web page within a designated area of current webpage.
iFrames offer a variety of use-cases:
Content Isolation: iFrames allow you to isolate third-party content, which can improve security.
Modularity: Easily embed external plugins, widgets, or content.
Resource Separation: Content within an iFrame can load separately from the rest of the page.
&lt;iframe src="URL" width="width" height="height"&gt;&lt;/iframe&gt;
Several attributes can enhance the functionality of an iFrame:
src: Specifies the URL of the page to embed.
height&nbsp;and&nbsp;width: Define the dimensions.
frameborder: Indicates whether to display a border.
scrolling: Controls the scrollbars.
name: For targeting the iFrame in JavaScript.
&lt;iframe src="https://www.youtube.com/user/nocopyrightsounds" frameborder="1" allowfullscreen &gt;&lt;/iframe&gt;
&lt;iframe src="https://maps.google.com/maps?q=LOCATION&amp;output=embed" frameborder="0"&gt;&lt;/iframe&gt;
]]></description><link>https://soymadip.me/notes/3.-html/12.-iframes-in-html.html</link><guid isPermaLink="false">3. HTML/12. Iframes in HTML.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 17:21:34 GMT</pubDate></item><item><title><![CDATA[5. Meta Tags in HTML]]></title><description><![CDATA[&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;!-- Character encoding --&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;!-- Responsive design --&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;!-- Internet Explorer compatibility --&gt; &lt;meta name="description" content="This is a description of the web page"&gt; &lt;!-- Description for search engines --&gt; &lt;meta name="keywords" content="HTML, CSS, JavaScript"&gt; &lt;!-- Keywords for search engines --&gt; &lt;meta name="author" content="Your Name"&gt; &lt;!-- Author name --&gt; &lt;link rel="icon" href="favicon.ico" type="image/x-icon"&gt; &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt; &lt;!-- Your content here --&gt;
&lt;/body&gt;
&lt;/html&gt; The&nbsp;&lt;meta&gt;&nbsp;tags in HTML provide metadata about the HTML document. Metadata is information about webpage.&nbsp;
&lt;meta&gt;&nbsp;tags always go inside the document's&nbsp;&lt;head&gt;&nbsp;tag and are typically used to specify the character set, page description, keywords, author, and other metadata. Character Encoding (charset):&nbsp;&lt;meta charset="UTF-8"&gt;&nbsp;sets the character encoding for the webpage. UTF-8 is the most common and recommended.
Viewport:&nbsp;&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;&nbsp;sets the viewport to scale the page to the screen width, useful for responsive design.
IE Compatibility:&nbsp;&lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;&nbsp;specifies that the page should be rendered using the latest rendering engine available on Internet Explorer.
Description:&nbsp;&lt;meta name="description" content="This is a description of the web page"&gt;&nbsp;provides a brief description of the webpage, which search engines may use in search results.
Keywords:&nbsp;&lt;meta name="keywords" content="HTML, CSS, JavaScript"&gt;&nbsp;specifies keywords for the webpage, which were historically used by search engines but are less relevant today.
Author:&nbsp;&lt;meta name="author" content="Your Name"&gt;&nbsp;indicates the name of the author of the webpage.
<img alt="favicon.png" src="https://soymadip.me/notes/3.-html/assets/favicon.png" target="_self">
A favicon is a small icon that appears next to your website's title in browser tabs. It helps in branding and easy identification among multiple tabs.
To add a favicon: Create/Choose Favicon:<br>
Make a square image, usually 16x16 or 32x32 pixels, in&nbsp;.ico&nbsp;format. You can create a favicon from&nbsp;<a data-tooltip-position="top" aria-label="https://favicon.io/" rel="noopener nofollow" class="external-link is-unresolved" href="https://favicon.io/" target="_self">this website</a>
Update HTML:
Insert the following code in the&nbsp;&lt;head&gt;&nbsp;section of your&nbsp;index.html&nbsp;file: &lt;link rel="icon" href="favicon.ico" type="image/x-icon"&gt;, favocon.ico being the path of the favicon file. ]]></description><link>https://soymadip.me/notes/3.-html/5.-meta-tags-in-html.html</link><guid isPermaLink="false">3. HTML/5. Meta Tags in HTML.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 17:09:18 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/favicon.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/favicon.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[favicon]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/favicon.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/favicon.html</link><guid isPermaLink="false">3. HTML/Assets/favicon.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 16:54:20 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/favicon.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/favicon.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[list_description]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/list_description.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/list_description.html</link><guid isPermaLink="false">3. HTML/Assets/list_description.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 16:18:54 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/list_description.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/list_description.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[list_unordered]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/list_unordered.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/list_unordered.html</link><guid isPermaLink="false">3. HTML/Assets/list_unordered.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 16:16:57 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/list_unordered.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/list_unordered.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[list_ordered]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/list_ordered.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/list_ordered.html</link><guid isPermaLink="false">3. HTML/Assets/list_ordered.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 16:14:39 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/list_ordered.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/list_ordered.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[elements_inline]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/elements_inline.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/elements_inline.html</link><guid isPermaLink="false">3. HTML/Assets/elements_inline.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 15:45:08 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/elements_inline.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/elements_inline.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pictorial Representation of Tags]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/pictorial-representation-of-tags.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/pictorial-representation-of-tags.html</link><guid isPermaLink="false">3. HTML/Assets/Pictorial Representation of Tags.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 05:21:50 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/pictorial-representation-of-tags.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/pictorial-representation-of-tags.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[html example]]></title><link>https://soymadip.me/notes/3.-html/assets/html-example.html</link><guid isPermaLink="false">3. HTML/Assets/html example.mp4</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 04:57:16 GMT</pubDate></item><item><title><![CDATA[how page works]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/how-page-works.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/how-page-works.html</link><guid isPermaLink="false">3. HTML/Assets/how page works.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 04:35:34 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/how-page-works.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/how-page-works.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[College Cheat-sheet]]></title><description><![CDATA[Contains This page is for college exam requirement.
Only things needed for my college is here.
<a data-tooltip-position="top" aria-label="0. How an website works" data-href="0. How an website works" href="https://soymadip.me/notes/3.-html/0.-how-an-website-works.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Skip to Main Notes</a> if you wnat. ]]></description><link>https://soymadip.me/notes/3.-html/college-cheat-sheet.html</link><guid isPermaLink="false">3. HTML/College Cheat-sheet.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 04:33:55 GMT</pubDate></item><item><title><![CDATA[webpage-structure]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/webpage-structure.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/webpage-structure.html</link><guid isPermaLink="false">3. HTML/Assets/webpage-structure.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 06 Apr 2024 04:13:39 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/webpage-structure.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/webpage-structure.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[paragraph]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/paragraph.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/paragraph.html</link><guid isPermaLink="false">3. HTML/Assets/paragraph.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 27 Mar 2024 20:29:13 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/paragraph.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/paragraph.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[heading]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/heading.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/heading.html</link><guid isPermaLink="false">3. HTML/Assets/heading.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 27 Mar 2024 20:25:12 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/heading.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/heading.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Inrroduction1]]></title><description><![CDATA[<img src="https://soymadip.me/notes/3.-html/assets/inrroduction1.png" target="_self">]]></description><link>https://soymadip.me/notes/3.-html/assets/inrroduction1.html</link><guid isPermaLink="false">3. HTML/Assets/Inrroduction1.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 27 Mar 2024 19:57:05 GMT</pubDate><enclosure url="https://soymadip.me/notes/3.-html/assets/inrroduction1.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/3.-html/assets/inrroduction1.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Contributing]]></title><description><![CDATA[Make sure your pull request follows these guidelines:
Search through the previous pull requests before making a new one! Adding new categories, or improving existing categories is welcome!
Make sure you've personally used or benefited from the suggested resource.
Make an individual pull request for each suggestion.
Use the following format: [Resource Title](url link) — description.
Expand on why the resource is useful in your pull request if needed.
Keep descriptions short and simple, but descriptive. Please double check your spelling and grammar.
Thanks for contributing to this Project!]]></description><link>https://soymadip.me/notes/nix/nixos-guide-main/contributing.html</link><guid isPermaLink="false">Nix/NixOS-Guide-main/Contributing.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 04 Jan 2024 09:23:04 GMT</pubDate></item><item><title><![CDATA[54 - is vs == in Python]]></title><description><![CDATA[
In Python, is and == are both comparison operators that can be used to check if two values are equal. However, there are some important differences between the two of them. The is operator compares the identity of two objects, while This will return True if the objects are the exact same object in memory The == operator compares the values of the objects. This will return True if the objects have the same value. Dataview (inline field '='): Error: -- PARSING FAILED -------------------------------------------------- &gt; 1 | = | ^ Expected one of the following: '(', 'null', boolean, date, duration, file link, list ('[1, 2, 3]'), negated field, number, object ('{ a: 1, b: 2 }'), string, variable
a = [1, 2, 3]
b = [1, 2, 3] print(a == b) # True
print(a is b) # False In this case, a and b are two separate lists that have the same values, so == returns True. However, a and b are not the same object in memory, so is returns False.
Dataview (inline field '='): Error: -- PARSING FAILED -------------------------------------------------- &gt; 1 | = | ^ Expected one of the following: '(', 'null', boolean, date, duration, file link, list ('[1, 2, 3]'), negated field, number, object ('{ a: 1, b: 2 }'), string, variable
One important thing to note is that, in Python, strings and integers are immutable, which means that once they are created, their value cannot be changed.
This means that, for strings and integers, is and == will always return the same result:Dataview (inline field '='): Error: -- PARSING FAILED -------------------------------------------------- &gt; 1 | = | ^ Expected one of the following: '(', 'null', boolean, date, duration, file link, list ('[1, 2, 3]'), negated field, number, object ('{ a: 1, b: 2 }'), string, variable
a = "hello"
b = "hello" print(a == b) # True
print(a is b) # True a = 5
b = 5 print(a == b) # True
print(a is b) # True
In these cases, a and b are both pointing to the same object in memory, so is and == both return True.
For mutable objects such as lists &amp; dictionaries, is and == can behave differently. Dataview (inline field '='): Error: -- PARSING FAILED -------------------------------------------------- &gt; 1 | = | ^ Expected one of the following: '(', 'null', boolean, date, duration, file link, list ('[1, 2, 3]'), negated field, number, object ('{ a: 1, b: 2 }'), string, variable
In general:
- Use == when you want to compare the values of two objects, and
- Use is when you want to check if two objects are the same object in memory.Dataview (inline field '='): Error: -- PARSING FAILED -------------------------------------------------- &gt; 1 | = | ^ Expected one of the following: '(', 'null', boolean, date, duration, file link, list ('[1, 2, 3]'), negated field, number, object ('{ a: 1, b: 2 }'), string, variable
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/54-is-vs-==-in-python.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/54 - is vs == in Python.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 07 Oct 2023 06:18:05 GMT</pubDate></item><item><title><![CDATA[47 - Exercise 4~ Solution]]></title><description><![CDATA[
<a data-tooltip-position="top" aria-label="40 - Exercise 4 (program to translate a message into secret code language)" data-href="40 - Exercise 4 (program to translate a message into secret code language)" href="https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/40-exercise-4-(program-to-translate-a-message-into-secret-code-language).html#_0" class="internal-link" target="_self" rel="noopener nofollow">Exercise 4</a>:-
Write a python program to translate a message into secret code language. Use the rules below to translate normal English into secret code language
st = input("Enter message")
words = st.split(" ")
coding = input("1 for Coding or 0 for Decoding")
coding = True if (coding=="1") else False
print(coding)
if(coding): nwords = [] for word in words: if(len(word)&gt;=3): r1 = "dsf" r2 = "jkr" stnew = r1+ word[1:] + word[0] + r2 nwords.append(stnew) else: nwords.append(word[::-1]) print(" ".join(nwords)) else: nwords = [] for word in words: if(len(word)&gt;=3): stnew = word[3:-3] stnew = stnew[-1] + stnew[:-1] nwords.append(stnew) else: nwords.append(word[::-1]) print(" ".join(nwords))
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/47-exercise-4~-solution.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/47 - Exercise 4~ Solution.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 07 Oct 2023 06:17:39 GMT</pubDate></item><item><title><![CDATA[39 - Exercise 3~ Solution]]></title><description><![CDATA[Rs. 1 Crore
Rs. 2 Crore
–	–	₹7 Crore	–	₹1 Crore	₹75,00,00014	Rs. 50,00,000
Rs. 1 Crore
–	–	₹5 Crore
₹7 Crore
₹50,00,000	₹50,00,000
13	Rs. 25,00,000
Rs. 50,00,000
₹5 Crore
₹5 Crore
₹3 Crore
₹3 Crore
₹25,00,000
₹25,00,00012	Rs. 12,50,000
Rs. 25,00,000
₹1 Crore
₹1 Crore
₹1 Crore
₹1 Crore
₹12,50,000
₹12,50,00011	Rs. 6,40,000questions = [ [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ],
] levels = [1000, 2000, 3000, 5000, 10000, 20000, 40000, 80000, 160000, 320000]
money = 0
for i in range(0, len(questions)): question = questions[i] print(f"\n\nQuestion for Rs. {levels[i]}") print(f"a. {question[1]} b. {question[2]} ") print(f"c. {question[3]} d. {question[4]} ") reply = int(input("Enter your answer (1-4) or 0 to quit:\n" )) if (reply == 0): money = levels[i-1] break if(reply == question[-1]): print(f"Correct answer, you have won Rs. {levels[i]}") if(i == 4): money = 10000 elif(i == 9): money = 320000 elif(i == 14): money = 10000000 else: print("Wrong answer!") break print(f"Your take home money is {money}")
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/39-exercise-3~-solution.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/39 - Exercise 3~ Solution.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 07 Oct 2023 06:17:39 GMT</pubDate></item><item><title><![CDATA[26 - E2~ Solution]]></title><description><![CDATA[Info
Solution of <a data-tooltip-position="top" aria-label="15 - Exercise 2 (Good morning sir)" data-href="15 - Exercise 2 (Good morning sir)" href="https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/15-exercise-2-(good-morning-sir).html#_0" class="internal-link" target="_self" rel="noopener nofollow">Exercise 2</a>
Question
Create a python program capable of greeting you with Good Morning, Good Afternoon and Good Evening. Your program should use time module to get the current hour. Here is a sample program and documentation link for you: import time
t = time.strftime('%H:%M:%S') hour = int(time.strftime('%H'))
# hour = int(input("Enter hour: "))
# print(hour) if(hour&gt;=0 and hour&lt;12): print("Good Morning Sir!")
elif(hour&gt;=12 and hour&lt;17): print("Good Afternoon Sir!")
elif(hour&gt;=17 and hour&lt;0): print("Good Night Sir!") ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/26-e2~-solution.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/26 - E2~ Solution.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 07 Oct 2023 06:15:09 GMT</pubDate></item><item><title><![CDATA[7 - Exercise 1 (calculator)]]></title><description><![CDATA[Create a calculator capable of performing addition, subtraction, multiplication and division operations on two numbers. Your program should format the output in a readable manner!
Hitnt:print(5+6)
print(15-6)
print(15*6)
print(15/6)
print(15//6)
print(5%3)
print(2**4)
8 - Ex1 ~Solutiona = 50
b = 3 print("The value of", a, "+", 3, "is: ", a + b)
print("The value of", a, "-", 3, "is: ", a - b)
print("The value of", a, "*", 3, "is: ", a * b)
print("The value of", a, "/", 3, "is: ", a / b)
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/7-exercise-1-(calculator).html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/7 - Exercise 1 (calculator).md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 07 Oct 2023 05:56:35 GMT</pubDate></item><item><title><![CDATA[72 - super keyword]]></title><description><![CDATA[The super() keyword in Python is used to refer to the parent class. It is especially useful when a class inherits from multiple parent classes and you want to call a method from one of the parent classes.When a class inherits from a parent class, it can override or extend the methods defined in the parent class. However, sometimes you might want to use the parent class method in the child class. This is where the super() keyword comes in handy.Here's an example of how to use the super() keyword in a simple inheritance scenario:class ParentClass: def parent_method(self): print("This is the parent method.") class ChildClass(ParentClass): def child_method(self): print("This is the child method.") super().parent_method() child_object = ChildClass()
child_object.child_method() # Output:
This is the child method.
This is the parent method. In this example, we have a ParentClass with a parent_method and a ChildClass that inherits from ParentClass and overrides the child_method. When the child_method is called, it first prints "This is the child method." and then calls the parent_method using the super() keyword.The super() keyword is also useful when a class inherits from multiple parent classes. In this case, you can specify the parent class from which you want to call the method.Here's an example:class ParentClass1: def parent_method(self): print("This is the parent method of ParentClass1.") class ParentClass2: def parent_method(self): print("This is the parent method of ParentClass2.") class ChildClass(ParentClass1, ParentClass2): def child_method(self): print("This is the child method.") super().parent_method() child_object = ChildClass()
child_object.child_method()
This is the child method.
This is the parent method of ParentClass1.
In this example, the ChildClass inherits from both ParentClass1 and ParentClass2. The child_method calls the parent_method of the first parent class using the super() keyword.In conclusion, the super() keyword is a useful tool in Python when you want to call a parent class method in a child class. It can be used in inheritance scenarios with a single parent class or multiple parent classes.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/72-super-keyword.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/72 - super keyword.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 02 Oct 2023 13:43:18 GMT</pubDate></item><item><title><![CDATA[Extra- Line Break and space.]]></title><description><![CDATA[\n is used to break a line: print('i am a boy\nWho is a good one') # Output:
i am a boy
Who is a good one
\s is same as using space(' ') in a string. print('i am a boy\sWho is a good one') # Output:
i am a boy Who is a good one
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/extra-line-break-and-space..html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/Extra- Line Break and space..md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 26 Sep 2023 10:16:39 GMT</pubDate></item><item><title><![CDATA[73 - Magic or Dunder Methods]]></title><description><![CDATA[These are special methods that you can define in your classes, and when invoked, they give you a powerful way to manipulate objects and their behaviour.Magic methods, also known as “dunders” from the double underscores surrounding their names, are powerful tools that allow you to customize the behaviour of your classes. They are used to implement special methods such as the addition, subtraction and comparison operators, as well as some more advanced techniques like descriptors and properties.Let’s take a look at some of the most commonly used magic methods in Python.The init method is a special method that is automatically invoked when you create a new instance of a class. This method is responsible for setting up the object’s initial state, and it is where you would typically define any instance variables that you need.
Also called "constructor", we have discussed this method alreadyThe str and repr methods are both used to convert an object to a string representation. The str method is used when you want to print out an object, while the repr method is used when you want to get a string representation of an object that can be used to recreate the object.The len method is used to get the length of an object. This is useful when you want to be able to find the size of a data structure, such as a list or dictionary.The call method is used to make an object callable, meaning that you can pass it as a parameter to a function and it will be executed when the function is called. This is an incredibly powerful tool that allows you to create objects that behave like functions.These are just a few of the many magic methods available in Python. They are incredibly powerful tools that allow you to customize the behaviour of your objects, and can make your code much cleaner and easier to understand. So if you’re looking for a way to take your Python code to the next level, take some time to learn about these magic methods.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/73-magic-or-dunder-methods.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/73 - Magic or Dunder Methods.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 22 Sep 2023 18:10:32 GMT</pubDate></item><item><title><![CDATA[79 - Multiple Inheritance]]></title><description><![CDATA[Multiple inheritance is a powerful feature in object-oriented programming that allows a class to inherit attributes and methods from multiple parent classes. This can be useful in situations where a class needs to inherit functionality from multiple sources.In Python, multiple inheritance is implemented by specifying multiple parent classes in the class definition, separated by commas.class ChildClass(ParentClass1, ParentClass2, ParentClass3): # class body
In this example, the ChildClass inherits attributes and methods from all three parent classes: ParentClass1, ParentClass2, and ParentClass3.It's important to note that, in case of multiple inheritance, Python follows a method resolution order (MRO) to resolve conflicts between methods or attributes from different parent classes. The MRO determines the order in which parent classes are searched for attributes and methods. class Animal: def __init__(self, name, species): self.name = name self.species = species def make_sound(self): print("Sound made by the animal") class Mammal: def __init__(self, name, fur_color): self.name = name self.fur_color = fur_color class Dog(Animal, Mammal): def __init__(self, name, breed, fur_color): Animal.__init__(self, name, species="Dog") Mammal.__init__(self, name, fur_color) self.breed = breed def make_sound(self): print("Bark!")
In this example, the Dog class inherits from both the Animal and Mammal classes, so it can use attributes and methods from both parent classes.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/79-multiple-inheritance.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/79 - Multiple Inheritance.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 22 Sep 2023 18:06:02 GMT</pubDate></item><item><title><![CDATA[44 - How import works]]></title><description><![CDATA[
How importing in python works
Importing in Python is the process of loading code from a Python module into the current script. This allows you to use the functions and variables defined in the module in your current script, as well as any additional modules that the imported module may depend on.To import a module in Python, you use the import statement followed by the name of the module.
For example, to import the math module, which contains a variety of mathematical functions, you would use the following statement:import math
Once a module is imported, you can use any of the functions and variables defined in the module by using the dot notation. For example, to use the sqrt function from the math module, you would write:import math result = math.sqrt(9)
print(result) # Output: 3.0
You can also import specific functions or variables from a module using the from keyword. For example, to import only the sqrt function from the math module, you would write:from math import sqrt result = sqrt(9)
print(result) # Output: 3.0
You can also import multiple functions or variables at once by separating them with a comma:from math import sqrt, pi result = sqrt(9)
print(result) # Output: 3.0 print(pi) # Output: 3.141592653589793
It's also possible to import all functions and variables from a module using the * wildcard. However, this is generally not recommended as it can lead to confusion and make it harder to understand where specific functions and variables are coming from.from math import * result = sqrt(9)
print(result) # Output: 3.0 print(pi) # Output: 3.141592653589793
Python also allows you to rename imported modules using the as keyword. This can be useful if you want to use a shorter or more descriptive name for a module, or if you want to avoid naming conflicts with other modules or variables in your code.This function is used to import a function as a different name.
in this way, we don't have to write a long module's name everytime.import math as m result = m.sqrt(9)
print(result) # Output: 3.0 print(m.pi) # Output: 3.141592653589793
Finally, Python has a built-in function called dir that you can use to view the names of all the functions and variables defined in a module.
This can be helpful for exploring and understanding the contents of a new module.import math print(dir(math))
This will output a list of all the names defined in the math module, including functions like sqrt and pi, as well as other variables and constants.['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'a tan2', 'atanh', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'exp m1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfin ite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'n extafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc', 'ulp'] In summary, the import statement in Python allows you to access the functions and variables defined in a module from within your current script. You can import the entire module, specific functions or variables, or use the * wildcard to import everything. You can also use the as keyword to rename a module, and the dir function to view the contents of a module.
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/44-how-import-works.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/44 - How import works.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 22 Sep 2023 18:05:54 GMT</pubDate></item><item><title><![CDATA[43 - Virtual Environment]]></title><description><![CDATA[A virtual environment is a tool used to isolate specific Python environments on a single machine, allowing you to work on multiple projects with different dependencies and packages without conflicts. This can be especially useful when working on projects that have conflicting package versions or packages that are not compatible with each other.you can use the venv module that comes with Python. Here's an example of how to create a virtual environment and activate it:# Create a virtual environment
python3 -m venv &lt;your_virtual_environment_name&gt; # this needs python3.10-venv package to be installed # Activate the virtual environment (Linux/macOS)
source &lt;your_virtual_environment_name&gt;/bin/activate # Activate the virtual environment (Windows)
&lt;your_virtual_environment_name&gt;\Scripts\activate.bat
Tip Python3 command takes you to python environment
exit() command throws you out of Python shell use Pip to install Python modules
Info All modules in Virtual environments are separated from system &amp; other v-environments
Once the virtual environment is activated, any packages that you install using pip will be installed in the virtual environment, rather than in the global Python environment.
This allows you to have a separate set of packages for each project, without affecting the packages installed in the global environment. you can use the deactivate command:
# Deactivate the virtual environment
deactivate In addition to creating and activating a virtual environment,
it can be useful to create a requirements.txt file, that lists the packages and their versions that your project depends on. This file can be used to easily install all the required packages in a new environment.
To create a requirements.txt file, you can use the pip freeze command, which outputs a list of installed packages and their versions.
For example:# Output the list of installed packages and their versions to a file
pip freeze &gt; requirements.txt
To install the packages listed in the requirements.txt file, you can use the pip install command with the -r flag:# Install the packages listed in the requirements.txt file
pip install -r requirements.txt
Info
-r is used to tell PiP that we are giving input &amp; not to install a package. otherwise pip will take requirments.txt as a package. Important
Using a virtual environment and a requirements.txt file can help you manage the dependencies for your Python projects and ensure that your projects are portable and can be easily set up on a new machine.
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/43-virtual-environment.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/43 - Virtual Environment.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 22 Sep 2023 18:05:50 GMT</pubDate></item><item><title><![CDATA[77 - Operator Overloading]]></title><description><![CDATA[Operator Overloading is a feature in Python that allows developers to redefine the behavior of mathematical and comparison operators for custom data types. This means that you can use the standard mathematical operators (+, -, *, /, etc.) and comparison operators (&gt;, &lt;, ==, etc.) in your own classes, just as you would for built-in data types like int, float, and str.Operator overloading allows you to create more readable and intuitive code. For instance, consider a custom class that represents a point in 2D space. You could define a method called 'add' to add two points together, but using the + operator makes the code more concise and readable:p1 = Point(1, 2)
p2 = Point(3, 4)
p3 = p1 + p2
print(p3.x, p3.y) # prints 4, 6
You can overload an operator in Python by defining special methods in your class. These methods are identified by their names, which start and end with double underscores (__). Here are some of the most commonly overloaded operators and their corresponding special methods:+ : __add__
- : __sub__
* : __mul__
/ : __truediv__
&lt; : __lt__
&gt; : __gt__
== : __eq__
For example, if you want to overload the + operator to add two instances of a custom class, you would define the add method:class Point: def __init__(self, x, y): self.x = x self.y = y def __add__(self, other): return Point(self.x + other.x, self.y + other.y)
It's important to note that operator overloading is not limited to the built-in operators, you can overload any user-defined operator as well.Operator overloading is a powerful feature in Python that allows you to create more readable and intuitive code. By redefining the behavior of mathematical and comparison operators for custom data types, you can write code that is both concise and expressive. However, it's important to use operator overloading wisely, as overloading the wrong operator or using it inappropriately can lead to confusing or unexpected behavior.<img alt="sdd.png" src="https://soymadip.me/notes/excalidraw/sdd.png" target="_self">]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/77-operator-overloading.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/77 - Operator Overloading.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 18 Sep 2023 18:25:15 GMT</pubDate><enclosure url="https://soymadip.me/notes/excalidraw/sdd.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/excalidraw/sdd.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[57 - Classes and Objects]]></title><description><![CDATA[A class is a blueprint or a template for creating objects, providing initial values for state (member variables or attributes), and implementations of behavior (member functions or methods). The user-defined objects are created using the class keyword.
In short, classes are used to make custom data types, unlike built-in data types like int,float etc...
Let us now create a class using the class keyword.class Details: name = "Rohan" age = 20 Object is the instance of the class used to access the properties of the class
Now lets create an object of the class.obj1 = Details() Now we can print values:class Details: name = "Rohan" age = 20 obj1 = Details()
print(obj1.name)
print(obj1.age) # Output:
Rohan
20
The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.It must be provided as the extra parameter inside the method definition. class Details: name = "Rohan" age = 20 def desc(self): print("My name is", self.name, "and I'm", self.age, "years old.") obj1 = Details()
obj1.desc() # Output:
My name is Rohan and I'm 20 years old.
]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/57-classes-and-objects.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/57 - Classes and Objects.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 14 Sep 2023 18:07:47 GMT</pubDate></item><item><title><![CDATA[60 - Getters and Setters]]></title><description><![CDATA[Recommendation
I recommend to watch <a data-tooltip-position="top" aria-label="62 - Access Specifiers or Modifiers" data-href="62 - Access Specifiers or Modifiers" href="https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/62-access-specifiers-or-modifiers.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Day 62</a> Before this lesson.<br>
And for this lesson, i say <a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=O3R_P5j41ns" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=O3R_P5j41ns" target="_self">this</a> video to understand this topic rather than original video. Because i found the org video is kinda confusing &amp; doesn't have enough clarity. My understanding
There is something called encapsulation &amp; private variables in Python. Getters are used to access these private variables.
where setters are used to add some logic to Getters.
Here is an example: class Geeks: def __init__(self): self._age = 0 # using property decorator to get a getter function @property def age(self): print("getter method called") return self._age # a setter function @age.setter def age(self, a): if(a &lt; 18): raise ValueError("Sorry you age is below eligibility criteria") print("setter method called") # value error doesn't need `else` self._age = a mark = Geeks()
mark.age = 19
print(mark.age) # Output: setter method called
getter method called
19 Getter method is used to overwrite the previously given value (here self.age).
setter adds logic to getter (here it will raise error if value is less than 18) Getters in Python are methods that are used to access the values of an object's properties.
They are used to return the value of a specific property, and are typically defined using the @property decorator.Here is an example of a simple class with a getter method:class MyClass: def __init__(self, value): self._value = value @property def value(self): return self._value
In this example, the MyClass class has a single property, _value, which is initialized in the __init__ method. The value method is defined as a getter using the @property decorator, and is used to return the value of the _value property.To use the getter, we can create an instance of the MyClass class, and then access the value property as if it were an attribute:&gt;&gt;&gt; obj = MyClass(10)
&gt;&gt;&gt; obj.value # output:
10
It is important to note that the getters do not take any parameters and we cannot set the value through getter method.
For that we need setter method which can be added by decorating method with @property_name.setterHere is an example of a class with both getter and setter:class MyClass: def __init__(self, value): self._value = value @property def value(self): return self._value @value.setter def value(self, new_value): self._value = new_value
We can use setter method like this:&gt;&gt;&gt; obj = MyClass(10)
&gt;&gt;&gt; obj.value = 20
&gt;&gt;&gt; obj.value
20
In conclusion, getters are a convenient way to access the values of an object's properties, while keeping the internal representation of the property hidden. This can be useful for encapsulation and data validation.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/60-getters-and-setters.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/60 - Getters and Setters.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 30 Aug 2023 07:31:06 GMT</pubDate></item><item><title><![CDATA[32 - Set Methods (merged)]]></title><description><![CDATA[Why?
As I told in my folder description, I slightly or many times heavily edit these notes. For efficiency, I merged this note with previous note.
&amp; I don't think these two needs separate Notes. Because [32 - Set Methods] also contains some methods, so why keep different notes for same subject? ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/32-set-methods-(merged).html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/32 - Set Methods (merged).md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 28 Aug 2023 17:06:49 GMT</pubDate></item><item><title><![CDATA[My Doubts]]></title><description><![CDATA[Written in: Obsidian-Markdown FormatInfo This is my Doubt Page
insert() is used to insert only one item in given index:-colors.insert(1, "green") #inserts item at index 1
append() is used to insert only one item at the end of the list:-colors.append("green") #inserts "green" at the end.
extend() is used to insert a list at the end:-n = [1,2,3,4]
colors.extend(n) #inserts n list at the end of colours list Match 2 condition in if statement:
we need to use 'and' to match 2 conditions in ' if ' statement. This is normal text]]></description><link>https://soymadip.me/notes/1.-python/•-my-doubts/my-doubts.html</link><guid isPermaLink="false">1. Python/• MY Doubts/My Doubts.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 28 Aug 2023 17:05:37 GMT</pubDate></item><item><title><![CDATA[31 - Python Sets]]></title><description><![CDATA[
Sets are unordered collection of data items. in output it doesn't maintain set's order.
Sets do not contain duplicate items.
Set is enclosed within curly brackets {}, where Lists are with [] &amp; Tuples are with () Sets are unchangeable, so insert(),append(),extend(),count() are unusable.
info = {"Carla", 19, False, 5.9, 19}
print(info)
{False, 19, 5.9, 'Carla'} # not in orignal set's order
Here we see that the items of set occur in random order and hence they cannot be accessed using index numbers. To create empty set, we can not use '{ }' as it will create a dictionary.
so we have to use set( ) s = set() s1 = {} print(type(s)) print(type(s1)) Output:
&lt;class 'set'&gt; # set
&lt;class 'dict'&gt; # dictionary
You can access items of set using a for loop. info = {"Carla", 19, False, 5.9}
for item in info: print(item)
False
Carla
19
5.9 Sets in python more or less work in the same way as sets in mathematics. We can perform operations like union and intersection on the sets just like in mathematics.
The union() prints all items that are present in the two sets. <img alt="Union.jpg" src="https://soymadip.me/notes/1.-python/•-assets/union.jpg" target="_self" style="width: 200px; max-width: 100%;">
The union() method returns a new set cities = {"Tokyo", "Madrid", "Berlin", "Delhi"}
cities2 = {"Tokyo", "Seoul", "Kabul", "Madrid"}
cities3 = cities.union(cities2)
print(cities3) {'Tokyo', 'Madrid', 'Kabul', 'Seoul', 'Berlin', 'Delhi'} update() method adds item into the existing set from another set.
cities = {"Tokyo", "Madrid", "Berlin", "Delhi"}
cities2 = {"Tokyo", "Seoul", "Kabul", "Madrid"}
cities.update(cities2) # Updating 'cities' set
print(cities)
{'Berlin', 'Madrid', 'Tokyo', 'Delhi', 'Kabul', 'Seoul'} The intersection() prints only items that are similar to both the sets. <br><img alt="Intersection.png" src="https://soymadip.me/notes/1.-python/•-assets/intersection.png" target="_self" style="width: 200px; max-width: 100%;">
The intersection() method returns a new set.
cities = {"Tokyo", "Madrid", "Berlin", "Delhi"}
cities2 = {"Tokyo", "Seoul", "Kabul", "Madrid"}
cities3 = cities.intersection(cities2)
print(cities3)
{'Madrid', 'Tokyo'} intersection_update() method updates into the existing set from another set.
cities = {"Tokyo", "Madrid", "Berlin", "Delhi"}
cities2 = {"Tokyo", "Seoul", "Kabul", "Madrid"}
cities.intersection_update(cities2)
print(cities)
{'Tokyo', 'Madrid'} The symmetric_difference() prints only items that are not similar to both the sets &amp; returns a new set. cities = {"Tokyo", "Madrid", "Berlin", "Delhi"}
cities2 = {"Tokyo", "Seoul", "Kabul", "Madrid"}
cities3 = cities.symmetric_difference(cities2)
print(cities3)
{'Seoul', 'Kabul', 'Berlin', 'Delhi'} symmetric_difference_update() method updates into the existing set from another set.
cities = {"Tokyo", "Madrid", "Berlin", "Delhi"}
cities2 = {"Tokyo", "Seoul", "Kabul", "Madrid"}
cities.symmetric_difference_update(cities2)
print(cities)
{'Kabul', 'Delhi', 'Berlin', 'Seoul'} The difference() prints only items that are only present in the original set and not in both the sets. This is setA - setB
The difference() method returns a new set ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/31-python-sets.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/31 - Python Sets.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 28 Aug 2023 16:59:44 GMT</pubDate><enclosure url="https://soymadip.me/notes/1.-python/•-assets/union.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/1.-python/•-assets/union.jpg&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[34 - Dictionary Methods (merged)]]></title><description><![CDATA[Why?
As I told in my folder description, I slightly or many times heavily edit these notes. For efficiency, I merged this note with previous note.
&amp; I don't think these two needs separate Notes. Because Day 33 also contains some methods too, so why keep different notes for same subject? ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/34-dictionary-methods-(merged).html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/34 - Dictionary Methods (merged).md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 28 Aug 2023 16:44:41 GMT</pubDate></item><item><title><![CDATA[70 - Class methods as alternative constructors]]></title><description><![CDATA[
In object-oriented programming, the term "constructor" refers to a special type of method that is automatically executed when an object is created from a class.
The purpose of a constructor is to initialize the object's attributes, allowing the object to be fully functional and ready to use.
However, there are times when we may want to create an object in a different way, or with different initial values, than what is provided by the default constructor.
This is where class methods can be used as alternative constructors.A class method belongs to the class rather than to an instance of the class. One common use case for class methods as alternative constructors is when you want to create an object from data that is stored in a different format, such as a string or a dictionary. For example, consider a class named "Person" that has two attributes: "name" and "age". The default constructor for the class might look like this:
class Person: def __init__(self, name, age): self.name = name self.age = age But what if you want to create a Person object from a string that contains the person's name and age, separated by a comma(,)?
in that case, You can define a class method named "from_string" to do this:
class Person: def __init__(self, name, age): self.name = name self.age = age @classmethod def from_string(cls, string): name, age = string.split(',') return cls(name, int(age)) #creating an instance of Person class #Now you can create a Person object from a string like this:
person = Person.from_string("John Doe, 30")
Another common use case for class methods as alternative constructors is when you want to create an object that needs a different set of default values than what is provided by the default constructor. For example, consider a class named "Rectangle" that has two attributes: "width" and "height". The default constructor for the class has "height" &amp; "width" parameters. To create another "square" object that's height &amp; width are same, we can use a class-Method "square_inp" to return the size twice as "height" &amp; "width" parameters. class Rectangle: def __init__(self, width, height): self.width = width #parameters self.height = height def square(self): return(f'The square is {self.height * self.width} cm^2') @classmethod def square_inp(cls, size): return cls(size, size) # returning 2 size values rectangle = Rectangle.square_inp(10)
print(rectangle.square())
#Output:
The square is 100 cm^2
]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/70-class-methods-as-alternative-constructors.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/70 - Class methods as alternative constructors.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 27 Aug 2023 07:37:18 GMT</pubDate></item><item><title><![CDATA[28 - String formatting]]></title><description><![CDATA[
Primarily String formatting can be done in python using the format method.
txt = "For only {price:.2f} dollars!"
print(txt.format(price = 49)) This is a new string formatting mechanism introduced by the PEP 498 under <a data-tooltip-position="top" aria-label="29 - Docstrings in python > PEP 8" data-href="29 - Docstrings in python#PEP 8" href="https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/29-docstrings-in-python.html#PEP_8_0" class="internal-link" target="_self" rel="noopener nofollow">PEP 8</a>. It is also known as Literal String Interpolation or more commonly as F-strings (f character preceding the string literal). The primary focus of this mechanism is to make the interpolation easier. When we prefix the string with the letter 'f', the string becomes the f-string itself. The f-string can be formatted in much same as the str.format() method. Example: name = 'Tushar' age = 23 print(f"Hello, My name is {name} and I'm {age} years old.") # Output:
Hello, My name is Tushar and I'm 23 years old. We can also use this in a single statement as well. To do some math:
print(f"{2 * 30})" # Output:
60 Print literally the f-string
if we wanna give examples of f-strings inside it, we have to do like this:-
gender = male
age = 20 print("i am a {gender}, of {age} years old.") # this will print with gender and age values
print("i am a {{gender}}, of {{age}} years old.") # this will not print with values #Output i am a male , of 20 years old.
i am {gender}, of {age} years old.
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/28-string-formatting.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/28 - String formatting.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 27 Aug 2023 07:33:31 GMT</pubDate></item><item><title><![CDATA[29 - Docstrings in python]]></title><description><![CDATA[Python docstrings are the string literals that appear right after the definition of a function, method, class, or module. def square(n): '''Takes in a number n, returns the square of n''' print(n**2)
square(5) Here, '''Takes in a number n, returns the square of n'''
is a docstring which will not appear in output25
Here is another example:def add(num1, num2): """ Add up two integer numbers. This function simply wraps the ``+`` operator, and does not do anything interesting, except for illustrating what the docstring of a very simple function looks like. Parameters ---------- num1 : int First number to add. num2 : int Second number to add. Returns ------- int The sum of ``num1`` and ``num2``. See Also -------- subtract : Subtract one integer from another. Examples -------- &gt;&gt;&gt; add(2, 2) 4 &gt;&gt;&gt; add(25, 0) 25 &gt;&gt;&gt; add(10, -10) 0 """ return num1 + num2
Comments are descriptions that help programmers better understand the intent and functionality of the program. They are completely ignored by the Python interpreter.As mentioned above, Python docstrings are strings used right after the definition of a function, method, class, or module (like in Example 1). They are used to document our code.We can access these docstrings using the doc attribute.Whenever string literals are present just after the definition of a function, module, class or method, they are associated with the object as their doc attribute. We can later use this attribute to retrieve this docstring.def square(n): '''Takes in a number n, returns the square of n''' return n**2 print(square.__doc__)
Takes in a number n, returns the square of nPEP 8 is a document that provides guidelines and best practices on how to write Python code. The primary focus of PEP 8 is to improve the readability and consistency of Python code. It was written in 2001 by Guido van Rossum, Barry Warsaw, and Nick Coghlan. PEP stands for Python Enhancement Proposal, and there are several of them. A PEP is a document that describes new features proposed for Python and documents aspects of Python, like design and style, for the community.
Long time Pythoneer Tim Peters succinctly channels the BDFL’s guiding principles for Python’s design into 20 aphorisms, only 19 of which have been written down.Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those! import this
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/29-docstrings-in-python.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/29 - Docstrings in python.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 27 Aug 2023 07:33:15 GMT</pubDate></item><item><title><![CDATA[69 - Class methods]]></title><description><![CDATA[
In Python, classes are a way to define custom data types that can store data and define functions that can manipulate that data. One type of function that can be defined within a class is called a "method". In this Lesson, we will explore what Python class methods are, why they are useful, and how to use them.
A class method is a type of method that is bound to the class and not the instance of the class. In other words, it operates on the class as a whole, rather than on a specific instance of the class. Class methods are defined using the "@classmethod" decorator, followed by a function definition. The first argument of the function is always "cls", which represents the class itself.
Class methods are useful in several situations.
In general, if we wanna overwrite a class variable for whole class, we can use Class Method.
If you might want to create a factory method that creates instances of your class in a specific way. You could define a class method that creates the instance and returns it to the caller. Another common use case is to provide alternative constructors for your class. This can be useful if you want to create instances of your class in multiple ways, but still have a consistent interface for doing so.
To define a class method, you simply use the "@classmethod" decorator before the method definition. The first argument of the method should always be "cls," which represents the class itself. Here is an example of how to define a class method:
class student: grade = 4 # default value for class variable 'grade' def __init__(self,name,age): #setting __init__ &amp; parameters self.name= name self.age= age def get_data(self): print(f'{self.name} is a {self.age} years old student in grade {self.grade}') @classmethod #classMethod decorator def update_grade(cls,grade): cls.grade = grade #creating instances:
st1= student('Rahul', 12)
st2= student('Harry', 12)
st3= student('Amol', 13)
st4= student('sohili', 13)
#getting student data:
st1.get_data()
st2.get_data() student.update_grade(5) # changing value for rest of the students(instances)
st3.get_data()
st4.get_data() # Output:
Rahul is a 12 years old student in grade 4
Harry is a 12 years old student in grade 4
Amol is a 13 years old student in grade 5
Sohili is a 13 years old student in grade 5
In this example, the "update_grade" is a class method that takes 1 argument, "grade". It creates a new instance of the class "student" using the "cls" keyword, and returns the new instance to the caller.
It's important to note that class methods cannot modify the class in any way, they change a class variable's value. If you need to modify the class, you should use a class level variable instead.
Python class methods are a powerful tool for defining functions that operate on the class as a whole, rather than on a specific instance of the class. They are useful for creating factory methods, alternative constructors, and other types of methods that operate at the class level. With the knowledge of how to define and use class methods, you can start writing more complex and organized code in Python.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/69-class-methods.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/69 - Class methods.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 26 Aug 2023 09:31:28 GMT</pubDate></item><item><title><![CDATA[68 - Exercise 7]]></title><description><![CDATA[Write a program to clear the clutter inside a folder on your computer.
You should use os module to rename all the png images from 1.png all the way till n.png where n is the number of png files in that folder. Do the same for other file formats. For example:
sfdsf.png --&gt; 1.png
vfsf.png --&gt; 2.png
this.png --&gt; 3.png
design.png --&gt; 4.png
name.png --&gt; 5.png
75 - Ex7 ~ SolutionAnswerimport os files = os.listdir("clutteredFolder")
i = 1
for file in files: if file.endswith(".png"): print(file) os.rename(f"clutteredFolder/{file}", f"clutteredFolder/{i}.png") i = i + 1 ]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/68-exercise-7.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/68 - Exercise 7.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 26 Aug 2023 06:15:40 GMT</pubDate></item><item><title><![CDATA[65 - Static Methods]]></title><description><![CDATA[Static methods in Python are methods that belong to a class rather than an <a data-tooltip-position="top" aria-label="https://chat.openai.com/share/e985b140-1ce5-4cb5-83b9-c0c538b289b5" rel="noopener nofollow" class="external-link is-unresolved" href="https://chat.openai.com/share/e985b140-1ce5-4cb5-83b9-c0c538b289b5" target="_self">instance/object</a> of the class.
They are defined using the @staticmethod decorator and do not have access to the instance of the class (i.e. self).
They are called on the class itself, not on an instance of the class. Static methods are often used to create utility functions that don't need access to instance data but we wanna share it with the class.class Math: def __init__(self,name,age): self.name= name self.age= age @staticmethod def add(a, b): # doesn't need self argument return a + b # calling with object:
o1= Math(1,2)
print(o1.add(1, 2))
#calling without object
print(Math.add(1, 2)) # Output
3
In this example, the add method is a static method of the Math class.
It takes two parameters a &amp; b and returns their sum. The method can be called on the class itself, without the need to create an instance of the class.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/65-static-methods.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/65 - Static Methods.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 25 Aug 2023 12:59:09 GMT</pubDate></item><item><title><![CDATA[63 - Ex5 ~ Solution]]></title><description><![CDATA[import random def check(comp, user): if comp ==user: return 0 if(comp == 0 and user ==1): return -1 if(comp == 1 and user ==2): return -1 if(comp == 2 and user == 0): return -1 return 1 comp = random.randint(0, 2)
user = int(input("0 for Snake, 1 for water and 2 for Gun:\n")) score = check(comp, user) print("You: ", user)
print("Computer: ", comp) if(score == 0): print("Its a draw")
elif (score == -1): print("You Lose")
else: print("You Won") ]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/63-ex5-~-solution.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/63 - Ex5 ~ Solution.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 23 Aug 2023 13:11:17 GMT</pubDate></item><item><title><![CDATA[59 - Python Decorators]]></title><description><![CDATA[Python decorators are a powerful and versatile tool that allow you to modify the behaviour of functions and methods.
They are a way to extend the functionality of a function or method without modifying its source code.A decorator is a function that takes another function as an argument and returns a new function that modifies the behaviour of the original function.
The new function is often referred to as a "decorated" function. The basic syntax for using a decorator is the following:
@decorator_function
def my_function(): pass
The @decorator_function notation is just a shorthand for the following code:def my_function(): pass
my_function = decorator_function(my_function) Decorators are often used to add functionality to functions and methods, such as logging, memoization, and access control.def greeting(): print('Good night sir!') # decorator:
def greet(fx): def mgreet(*args,**kwargs): result = fx(*args,**kwargs) print('shgshgdhasg') greeting() return result
return mgreet @greet
def add(a,b): return(a+b) print(f'your answer is: {add(12,12)}') # Output:
Good Night sir!
your answer is: 24
One common use of decorators is to add logging to a function. For example, you could use a decorator to log the arguments and return value of a function each time it is called:import logging def log_function_call(func): def decorated(*args, **kwargs): logging.info(f"Calling {func.__name__} with args={args}, kwargs={kwargs}") result = func(*args, **kwargs) logging.info(f"{func.__name__} returned {result}") return result return decorated @log_function_call
def my_function(a, b): return a + b
In this example, the log_function_call decorator takes a function as an argument and returns a new function that logs the function call before and after the original function is called.*args &amp; **kwargs *args takes arguments take arguments as tuple.
**kwargs takes arguments take arguments as dictionary. Decorators are a powerful and flexible feature in Python that can be used to add functionality to functions and methods without modifying their source code.
They are a great tool for separating concerns, reducing code duplication, and making your code more readable and maintainable.In conclusion, python decorators are a way to extend the functionality of functions and methods, by modifying its behaviour without modifying the source code.
They are used for a variety of purposes, such as logging, memorisation, access control, and more.
They are a powerful tool that can be used to make your code more readable, maintainable, and extendable.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/59-python-decorators.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/59 - Python Decorators.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 22 Aug 2023 07:09:40 GMT</pubDate></item><item><title><![CDATA[15 - Exercise 2 (Good morning sir)]]></title><description><![CDATA[Create a python program capable of greeting you with Good Morning, Good Afternoon and Good Evening. Your program should use time module to get the current hour. Here is a sample program and documentation link for you:import time
timestamp = time.strftime('%H:%M:%S')
print(timestamp)
timestamp = time.strftime('%H')
print(timestamp)
timestamp = time.strftime('%M')
print(timestamp)
timestamp = time.strftime('%S')
print(timestamp)
# https://docs.python.org/3/library/time.html#time.strftime import time
t = time.strftime('%H:%M:%S') hour = int(time.strftime('%H'))
# hour = int(input("Enter hour: "))
# print(hour) if(hour&gt;=0 and hour&lt;12): print("Good Morning Sir!")
elif(hour&gt;=12 and hour&lt;17): print("Good Afternoon Sir!")
elif(hour&gt;=17 and hour&lt;0): print("Good Night Sir!") ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/15-exercise-2-(good-morning-sir).html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/15 - Exercise 2 (Good morning sir).md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Mon, 21 Aug 2023 14:53:30 GMT</pubDate></item><item><title><![CDATA[46 - OS Modules]]></title><description><![CDATA[
OS Module in Python
Summary
The os module in Python is a built-in library that provides a wide variety of functions for interacting with the operating system.
It allows you to perform tasks such as reading and writing files, interacting with the file system, and running system commands. Official <a data-tooltip-position="top" aria-label="https://docs.python.org/3/library/os.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.python.org/3/library/os.html" target="_self">documents</a> for more details. The os module in Python is a built-in library that provides functions for interacting with the operating system.
It allows you to perform a wide variety of tasks, such as reading and writing files, interacting with the file system, and running system commands.The os module also provides functions for interacting with the file system.
Get the current working directory.
import os #directory (CWD)
cwd = os.getcwd() print("Current working directory:", cwd) ------
# Output:-
Current working directory: /home/nikhil/Desktop/gfg Changing the Current Working Directory
import os os.chdir('../') # changing dir ------
# Output:- #Current working directory before
C:\Users\Nikhil Aggarwal\Desktop\gfg #Current working directory now
C:\Users\Nikhil Aggarwal\Desktop you can use the os.listdir function to get a list of the files in a directory:
import os # Get a list of the files in the current directory
files = os.listdir(".")
print(files) ------
# Output:- ['myfile.txt', 'otherfile.txt'] There are different methods available in the OS module for creating a directory. os.mkdir() method in Python is used to create a directory named path with the specified numeric mode.
This method raises FileExistsError if the directory to be created already exists.
import os # Create a new directory
os.mkdir("newdir") ------
# Output:- Directory 'newdir' created os.makedirs() method in Python is used to create a directory recursively.
That means while making leaf directory if any intermediate-level directory is missing, os.makedirs() method will create them all.
os.makedirs() method can be used to create a directory tree.
import os # Leaf directory
directory = "Nikhil" # Parent Directories
parent_dir = "D:/Pycharm projects/GeeksForGeeks/Authors"
# Path
path = os.path.join(parent_dir, directory) # Create the directory 'Nikhil'
os.makedirs(path)
print("Directory '% s' created" % directory) # Directory 'GeeksForGeeks' and 'Authors' will
# be created too
# if it does not exists ------
# Output:- Directory 'Nikhil' created This method is used to delete files.
This method can not remove or delete a directory.
If the specified path is a directory then OS Error will be raised.
import os # File name file='file1.txt'
location="D:/Pycharm projects/GeeksforGeeks/Authors/Nikhil/" os.remove(file) ------
# Output:- file.txt deleted This method is used to delete directories or folders.
This method cann't delete non-empty directories.
OSError will be raised if the specified path is not an empty directory.
“Pasted image 20230810162932.png” could not be found.
# Python program to explain os.rmdir() method # importing os module
import os # Remove the Directory "Geeks"
os.rmdir(Geeks) The os module provides functions for opening, reading, and writing files. For example, to open a file for reading, you can use the open function:
Read the contents of the file
import os # Open the file in read-only mode
f = os.open("myfile.txt", os.O_RDONLY) # Read the contents of the file
contents = os.read(f, 1024) # Close the file
os.close(f)
import os # Open the file in write-only mode
f = os.open("myfile.txt", os.O_WRONLY) # Write to the file
os.write(f, b"Hello, world!") # Close the file
os.close(f) Rename files/directories.
The file/directories have to exist.
“Pasted image 20230810191537.png” could not be found.
import os for i in range(0,11):
os.rename(f'data/Day{i+1}', f"data/Tutorial{i+1}") # rename directories with a loop # input folders , new names Output:- “Pasted image 20230810191720.png” could not be found. Using the Os module we can remove a file in our system using the remove() method.
import os #importing os module. os.remove("file_name.txt") #removing the file.
Info
OS module has a sub-module named PATH by using which we can perform many more functions. This method will check whether a file exists or not by passing the name of the file as a parameter
import os result = os.path.exists("file_name") #giving the name of the file as a parameter.
print(result) # output:-
False In this method, python will give us the size of the file in bytes. To use this method we need to pass the name of the file as a parameter.
import os size = os.path.getsize("filename")
print("Size of the file is", size," bytes.") # Output:-
Size of the file is 192 bytes. Finally, the os module provides functions for running system commands. You can use the os.system("&lt;Command_name&gt;") function to run a command and get the output:
import os
# Run the "ls" command and print the output
output = os.system("ls")
print(output) # Output: ['myfile.txt', 'otherfile.txt'] You can use the os.popen function to run a command and get the output as a file-like object:
import os # Run the "ls" command and get the output as a file-like object
f = os.popen("ls") # Read the contents of the output
output = f.read()
print(output) # Output: # ['myfile.txt', 'otherfile.txt'] # Close the file-like object
f.close() This function gives the name of the operating system dependent module imported.
The following names have currently been registered: ‘posix’, ‘nt’, ‘os2’, ‘ce’, ‘java’ and ‘riscos’.
import os print(os.name) # output: posix
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/46-os-modules.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/46 - OS Modules.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 20 Aug 2023 14:23:14 GMT</pubDate></item><item><title><![CDATA[53 - Map, Filter & Reduce]]></title><description><![CDATA[Higher Order Functions
In Python, the map, filter, and reduce functions are built-in functions that allow you to apply a function to a sequence of elements and return a new sequence.
These functions are known as higher-order functions, as they take other functions as arguments.
The map function applies a function to each element in a sequence and returns a new sequence containing the transformed elements. The map function has the following syntax:map(function, iterable)
The function argument is a function that is applied to each element in the iterable argument. The iterable argument can be a list, tuple, or any other iterable object.
Also it returns a map object that we can convert to desired type.Here is an example of how to use the map function:# List of numbers
numbers = [1, 2, 3, 4, 5] # Double each number using the map function
doubled = map(lambda x: x * 2, numbers) # Print the doubled numbers
print(list(doubled))
In the above example, the lambda function lambda x: x * 2 is used to double each element in the numbers list. The map function applies the lambda function to each element in the list and returns a new list containing the doubled numbers.The filter function filters a sequence of elements based on a given predicate (a function that returns a boolean value) and returns a new sequence containing only the elements that meet the predicate. The filter function has the following syntax:filter(predicate, iterable)
The predicate argument is a function that returns a boolean value and is applied to each element in the iterable argument. The iterable argument can be a list, tuple, or any other iterable object.Here is an example of how to use the filter function:# List of numbers
numbers = [1, 2, 3, 4, 5] # Get only the even numbers using the filter function
evens = filter(lambda x: x % 2 == 0, numbers) # Print the even numbers
print(list(evens))
In the above example, the lambda function lambda x: x % 2 == 0 is used to filter the numbers list and return only the even numbers. The filter function applies the lambda function to each element in the list and returns a new list containing only the even numbers.The reduce function is a higher-order function that applies a function to a sequence and returns a single value. It is a part of the functools module in Python and has the following syntax:reduce(function, iterable)
The function argument is a function that takes in two arguments and returns a single value. The iterable argument is a sequence of elements, such as a list or tuple.The reduce function applies the function to the first two elements in the iterable and then applies the function to the result and the next element, and so on. The reduce function returns the final result.Here is an example of how to use the reduce function:from functools import reduce # List of numbers
numbers = [1, 2, 3, 4, 5] # Calculate the sum of the numbers using the reduce function
sum = reduce(lambda x, y: x + y, numbers) # Print the sum
print(sum)
In the above example, the reduce function applies the lambda function lambda x, y: x + y to the elements in the numbers list. The lambda function adds the two arguments x and y and returns the result. The reduce function applies the lambda function to the first two elements in the list (1 and 2), then applies the function to the result (3) and the next element (3), and so on. The final result is the sum of all the elements in the list, which is 15.It is important to note that the reduce function requires the functools module to be imported in order to use it.]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/53-map,-filter-&amp;-reduce.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/53 - Map, Filter &amp; Reduce.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 19 Aug 2023 11:23:25 GMT</pubDate></item><item><title><![CDATA[0.e - Description of modules & Pip]]></title><description><![CDATA[Module is like a code library which can be used to borrow code written by somebody else in our python program. There are two types of modules in python:
Built in Modules - These modules are ready to import and use and ships with the python interpreter. there is no need to install such modules explicitly.
External Modules - These modules are imported from a third party file or can be installed using a package manager like pip or conda. Since this code is written by someone else, we can install different versions of a same module with time.
It can be used as a package manager <a data-tooltip-position="top" aria-label="https://pip.pypa.io/en/stable/" rel="noopener nofollow" class="external-link is-unresolved" href="https://pip.pypa.io/en/stable/" target="_self">pip</a> to install a python module.
Lets install a module called pandas using the following commandpip install pandas
We use the import syntax to import a module in Python. Here is an example code:import pandas # Read and work with a file named 'words.csv'
df = pandas.read_csv('words.csv')
print(df) # This will display first few rows from the words.csv file Similarly we can install other modules and look into their documentations for usage instructions.
We will find ourselved doing this often in the later part of this course]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/0.e-description-of-modules-&amp;-pip.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/0.e - Description of modules &amp; Pip.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 17 Aug 2023 16:08:46 GMT</pubDate></item><item><title><![CDATA[90 - Exercise 10]]></title><description><![CDATA[Question
Use the NewsAPI and the requests module to fetch the daily news related to different topics. Go to: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://newsapi.org/" target="_self">https://newsapi.org/</a>
and explore the various options to build you application import requests
import json query = input("What type of news are you interested in? ")
url = f"https://newsapi.org/v2/everything?q={query}&amp;from=2023-01-28&amp;sortBy=publishedAt&amp;apiKey=dbe57b028aeb41e285a226a94865f7a7"
r = requests.get(url)
news = json.loads(r.text)
# print(news, type(news))
for article in news["articles"]: print(article["title"]) print(article["description"]) print("--------------------------------------") ]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/90-exercise-10.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/90 - Exercise 10.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 17 Aug 2023 04:24:28 GMT</pubDate></item><item><title><![CDATA[93 - Exercise 10 ~ solution]]></title><description><![CDATA[Question
Use the NewsAPI and the requests module to fetch the daily news related to different topics. Go to: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://newsapi.org/" target="_self">https://newsapi.org/</a> and explore the various options to build you application import requests
import json query = input("What type of news are you interested in? ")
url = f"https://newsapi.org/v2/everything?q={query}&amp;from=2023-01-28&amp;sortBy=publishedAt&amp;apiKey=dbe57b028aeb41e285a226a94865f7a7"
r = requests.get(url)
news = json.loads(r.text)
# print(news, type(news))
for article in news["articles"]: print(article["title"]) print(article["description"]) print("--------------------------------------") ]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/93-exercise-10-~-solution.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/93 - Exercise 10 ~ solution.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 17 Aug 2023 04:23:40 GMT</pubDate></item><item><title><![CDATA[88 - Ex9 ~ solution]]></title><description><![CDATA[Question
Write a program to pronounce list of names using win32 API. If you are given a list l as follows:
l = ["Rahul", "Nishant", "Harry"] Your program should pronounce:
Shoutout to Rahul
Shoutout to Nishant
Shoutout to Harry
Note
If you are not using windows, try to figure out how to do the same thing using some other package
from os import system
names = ["StupidProgramm1","AayushGarg15", "Yuniek", "NiteshUpadhyay2", "RAMESHKUMAR69", "AshishKushwaha4", "AshokBhatt", "MILLANDREME", "ValorantAccoun4", "Sanjeevthakur8", "vivekRaogaddema", "NilutpalBaruah", "Priyanshu48", "KenZi2", "RahulGoyal14", "KartikeySurbhi", "AnirbanPati", "RohanPudasaini", "TechBlogs", "joelthomas1103", "dhairyapawaia", "PrithviSingh15", "GoogolChad", "Moinhusen", "mahi98989897", "Blitzfan1", "umang001", "AvijitManna1", "Mr-NeonNeon", "MaryamTatheer", "NishantJaiswal2", "AnonymousBuddy1", "MaryamTatheer", "GyanKumar1", "StarVipin", "vivekRaogaddema", "RaviSharma34", "AhsanTariq3", "gagankj", "ProgrammerShray", "AvijitDey5", "Anshuman097", "AnchalGupta9", "StupidProgramm1", "HimanshuKumar96", "hnxpriyanshu", "MaxM50", "piyushgoyall", "DEMANDHERE", "KrishnaAnand2", "SurajVishwaka10", "NominathKuwar", "firozeeIII", "jawad9899", "ArunavaAdhikari", "Quazi-Misbah-Raza", "HistoricMind", "Rajbir98", "AkshayNivate", "vivekRaogaddema", "maanitgill", "krushnsinh", "universelhome", "OPGAMEROPGAMERm", "universelhome", "learningtocodewithabdullah", "Abdullah426351", "SagarPathak3", "SAMARTH-VERMA", "PrithvirajPati3", "SAURABHTRIPATH6", "SumanRajak", "Swayam2004", "Joydip2002", "PulkitPareek", "RatnakarGautam221b", "tassawerzaidi", "GRyHacker", "uatta8088", "Athcode", "PrasoonShrivast", "piyushgoyall", "Saptak291", "PratyakshDhankh", "ZayanAhmad2", "Ali-RazaRaza9", "TridevJha", "KrrishHalder", "HeroProgrammin1", "Sanjeev-Kumar78", "AryanKushwaha2", "GalluBhai", "AB265", "AayushGarg15", "StupidProgramm1", "dheerajkumar68", "ArpitJaiswal2", "Fighters006", "AviPandit", "mrz004", "AviPandit", "MihirSingh4", "Nks-hkhk", "msCoder5", "SURAJGUSAIN1", "DivyanandPandey", "AhmadShuja", "JaydeepSindhav", "Champ7239", "piyushgoyall", "Joydip2002", "MukulVerma8745", "V-Durgeshwar-Ra", "SaacheKapoor", "41-GauravGaurav", "VeersinghZanka1", "LegendVibhu", "YashAgr", "vivekRaogaddema", "Priyanshu-kundu", "iamarghamallick", "samad90", "iamarghamallick", "MukulVerma8745", "MaxM50", "ItZgooseBoy", "piyushgoyall", "pavanteja14", "sologamerq1", "YugamTiwana", "piyushgoyall", "ShubhamSaini12", "AvishJain24", "ItZgooseBoy", "Iswastikmishra", "srisridmulti", "AvishJain24", "MFaizan3", "anukoolchauhan", "codeWithPrawar", "ArshitRupani", "Muhammad-Anas11"] for name in names: system(f'say Shoutout to {name}') ]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/88-ex9-~-solution.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/88 - Ex9 ~ solution.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 17 Aug 2023 04:20:42 GMT</pubDate></item><item><title><![CDATA[83 - Exercise 9]]></title><description><![CDATA[Question
Write a program to pronounce list of names using win32 API. If you are given a list l as follows:l = ["Rahul", "Nishant", "Harry"]
Your program should pronouce:Shoutout to Rahul
Shoutout to Nishant
Shoutout to Harry
Note
If you are not using windows, try to figure out how to do the same thing using some other package
from os import system
names = ["StupidProgramm1","AayushGarg15", "Yuniek", "NiteshUpadhyay2", "RAMESHKUMAR69", "AshishKushwaha4", "AshokBhatt", "MILLANDREME", "ValorantAccoun4", "Sanjeevthakur8", "vivekRaogaddema", "NilutpalBaruah", "Priyanshu48", "KenZi2", "RahulGoyal14", "KartikeySurbhi", "AnirbanPati", "RohanPudasaini", "TechBlogs", "joelthomas1103", "dhairyapawaia", "PrithviSingh15", "GoogolChad", "Moinhusen", "mahi98989897", "Blitzfan1", "umang001", "AvijitManna1", "Mr-NeonNeon", "MaryamTatheer", "NishantJaiswal2", "AnonymousBuddy1", "MaryamTatheer", "GyanKumar1", "StarVipin", "vivekRaogaddema", "RaviSharma34", "AhsanTariq3", "gagankj", "ProgrammerShray", "AvijitDey5", "Anshuman097", "AnchalGupta9", "StupidProgramm1", "HimanshuKumar96", "hnxpriyanshu", "MaxM50", "piyushgoyall", "DEMANDHERE", "KrishnaAnand2", "SurajVishwaka10", "NominathKuwar", "firozeeIII", "jawad9899", "ArunavaAdhikari", "Quazi-Misbah-Raza", "HistoricMind", "Rajbir98", "AkshayNivate", "vivekRaogaddema", "maanitgill", "krushnsinh", "universelhome", "OPGAMEROPGAMERm", "universelhome", "learningtocodewithabdullah", "Abdullah426351", "SagarPathak3", "SAMARTH-VERMA", "PrithvirajPati3", "SAURABHTRIPATH6", "SumanRajak", "Swayam2004", "Joydip2002", "PulkitPareek", "RatnakarGautam221b", "tassawerzaidi", "GRyHacker", "uatta8088", "Athcode", "PrasoonShrivast", "piyushgoyall", "Saptak291", "PratyakshDhankh", "ZayanAhmad2", "Ali-RazaRaza9", "TridevJha", "KrrishHalder", "HeroProgrammin1", "Sanjeev-Kumar78", "AryanKushwaha2", "GalluBhai", "AB265", "AayushGarg15", "StupidProgramm1", "dheerajkumar68", "ArpitJaiswal2", "Fighters006", "AviPandit", "mrz004", "AviPandit", "MihirSingh4", "Nks-hkhk", "msCoder5", "SURAJGUSAIN1", "DivyanandPandey", "AhmadShuja", "JaydeepSindhav", "Champ7239", "piyushgoyall", "Joydip2002", "MukulVerma8745", "V-Durgeshwar-Ra", "SaacheKapoor", "41-GauravGaurav", "VeersinghZanka1", "LegendVibhu", "YashAgr", "vivekRaogaddema", "Priyanshu-kundu", "iamarghamallick", "samad90", "iamarghamallick", "MukulVerma8745", "MaxM50", "ItZgooseBoy", "piyushgoyall", "pavanteja14", "sologamerq1", "YugamTiwana", "piyushgoyall", "ShubhamSaini12", "AvishJain24", "ItZgooseBoy", "Iswastikmishra", "srisridmulti", "AvishJain24", "MFaizan3", "anukoolchauhan", "codeWithPrawar", "ArshitRupani", "Muhammad-Anas11"] for name in names: system(f'say Shoutout to {name}') ]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/83-exercise-9.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/83 - Exercise 9.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 17 Aug 2023 04:11:35 GMT</pubDate></item><item><title><![CDATA[87 - Shutli Module]]></title><description><![CDATA[Shutil is a Python module that provides a higher level interface for working with file and directories. The name "shutil" is short for shell utility. It provides a convenient and efficient way to automate tasks that are commonly performed on files and directories. In this repl, we'll take a closer look at the shutil module and its various functions and how they can be used in Python.The syntax for importing the shutil module is as follows:import shutil
The following are some of the most commonly used functions in the shutil module: shutil.copy(src, dst): This function copies the file located at src to a new location specified by dst. If the destination location already exists, the original file will be overwritten. shutil.copy2(src, dst): This function is similar to shutil.copy, but it also preserves more metadata about the original file, such as the timestamp. shutil.copytree(src, dst): This function recursively copies the directory located at src to a new location specified by dst. If the destination location already exists, the original directory will be merged with it. shutil.move(src, dst): This function moves the file located at src to a new location specified by dst. This function is equivalent to renaming a file in most cases. shutil.rmtree(path): This function recursively deletes the directory located at path, along with all of its contents. This function is similar to using the rm -rf command in a shell. Here are some examples of how you can use the shutil module in your Python code:import shutil # Copying a file
shutil.copy("src.txt", "dst.txt") # Copying a directory
shutil.copytree("src_dir", "dst_dir") # Moving a file
shutil.move("src.txt", "dst.txt") # Deleting a directory
shutil.rmtree("dir")
As you can see, the shutil module provides a simple and efficient way to perform common file and directory-related tasks in Python. Whether you need to copy, move, delete, or preserve metadata about files and directories, the shutil module has you covered.In conclusion, the shutil module is a powerful tool for automating file and directory-related tasks in Python. Whether you are a beginner or an experienced Python developer, the shutil module is an essential tool to have in your toolbox.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/87-shutli-module.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/87 - Shutli Module.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 17 Aug 2023 04:07:49 GMT</pubDate></item><item><title><![CDATA[76 - Exercise 8]]></title><description><![CDATA[Question
Write a program to manipulate pdf files using pyPDF. Your programs should be able to merge multiple pdf files into a single pdf. You are welcome to add more functionalities Info
pypdf is a free and open-source pure-python PDF library capable of splitting, merging, cropping, and transforming the pages of PDF files. It can also add custom data, viewing options, and passwords to PDF files. pypdf can retrieve text and metadata from PDFs as well.
from PyPDF2 import PdfWriter
import os merger = PdfWriter()
files = [file for file in os.listdir() if file.endswith(".pdf")] for pdf in files: merger.append(pdf) merger.write("merged-pdf.pdf")
merger.close() ]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/76-exercise-8.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/76 - Exercise 8.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 17 Aug 2023 03:53:46 GMT</pubDate></item><item><title><![CDATA[82 - Ex8 ~ solution]]></title><description><![CDATA[from PyPDF2 import PdfWriter
import os merger = PdfWriter()
files = [file for file in os.listdir() if file.endswith(".pdf")] for pdf in files: merger.append(pdf) merger.write("merged-pdf.pdf")
merger.close() ]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/82-ex8-~-solution.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/82 - Ex8 ~ solution.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 17 Aug 2023 03:51:39 GMT</pubDate></item><item><title><![CDATA[81 - Hybrid and Hierarchical Inheritance]]></title><description><![CDATA[Hybrid inheritance is a combination of multiple inheritance and single inheritance in object-oriented programming. It is a type of inheritance in which multiple inheritance is used to inherit the properties of multiple base classes into a single derived class, and single inheritance is used to inherit the properties of the derived class into a sub-derived class.In Python, hybrid inheritance can be implemented by creating a class hierarchy, in which a base class is inherited by multiple derived classes, and one of the derived classes is further inherited by a sub-derived class.The syntax for implementing Hybrid Inheritance in Python is the same as for implementing Single Inheritance, Multiple Inheritance, or Hierarchical Inheritance.Here's the syntax for defining a hybrid inheritance class hierarchy:class BaseClass1: # attributes and methods class BaseClass2: # attributes and methods class DerivedClass(BaseClass1, BaseClass2): # attributes and methods Consider the example of a Student class that inherits from the Person class, which in turn inherits from the Human class. The Student class also has a Program class that it is associated with.class Human: def __init__(self, name, age): self.name = name self.age = age def show_details(self): print("Name:", self.name) print("Age:", self.age) class Person(Human): def __init__(self, name, age, address): Human.__init__(self, name, age) self.address = address def show_details(self): Human.show_details(self) print("Address:", self.address) class Program: def __init__(self, program_name, duration): self.program_name = program_name self.duration = duration def show_details(self): print("Program Name:", self.program_name) print("Duration:", self.duration) class Student(Person): def __init__(self, name, age, address, program): Person.__init__(self, name, age, address) self.program = program def show_details(self): Person.show_details(self) self.program.show_details()
In this example, the Student class inherits from the Person class, which in turn inherits from the Human class. The Student class also has an association with the Program class. This is an example of Hybrid Inheritance in action, as it uses both Single Inheritance and Association to achieve the desired inheritance structure.To create a Student object, we can do the following:program = Program("Computer Science", 4)
student = Student("John Doe", 25, "123 Main St.", program)
student.show_details()
Name: John Doe
Age: 25
Address: 123 Main St.
Program Name: Computer Science
Duration: 4
As we can see from the output, the Student object has access to all the attributes and methods of the Person and Human classes, as well as the Program class through association. In this way, hybrid inheritance allows for a flexible and powerful way to inherit attributes and behaviors from multiple classes in a hierarchy or chain.Hierarchical Inheritance is a type of inheritance in Object-Oriented Programming where multiple subclasses inherit from a single base class. In other words, a single base class acts as a parent class for multiple subclasses. This is a way of establishing relationships between classes in a hierarchical manner.Here's an example to illustrate the concept of hierarchical inheritance in Python:class Animal: def __init__(self, name): self.name = name def show_details(self): print("Name:", self.name) class Dog(Animal): def __init__(self, name, breed): Animal.__init__(self, name) self.breed = breed def show_details(self): Animal.show_details(self) print("Species: Dog") print("Breed:", self.breed) class Cat(Animal): def __init__(self, name, color): Animal.__init__(self, name) self.color = color def show_details(self): Animal.show_details(self) print("Species: Cat") print("Color:", self.color)
In the above code, the Animal class acts as the base class for two subclasses, Dog and Cat. The Dog class and the Cat class inherit the attributes and methods of the Animal class. However, they can also add their own unique attributes and methods.Here's an example of creating objects of the Dog and Cat classes and accessing their attributes and methods:dog = Dog("Max", "Golden Retriever")
dog.show_details()
cat = Cat("Luna", "Black")
cat.show_details()
Name: Max
Species: Dog
Breed: Golden Retriever
Name: Luna
Species: Cat
Color: Black
As we can see from the outputs, the Dog and Cat classes have inherited the attributes and methods of the Animal class, and have also added their own unique attributes and methods.In conclusion, hierarchical inheritance is a way of establishing relationships between classes in a hierarchical manner. It allows multiple subclasses to inherit from a single base class, which helps in code reuse and organization of code in a more structured manner.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/81-hybrid-and-hierarchical-inheritance.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/81 - Hybrid and Hierarchical Inheritance.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 16 Aug 2023 20:12:18 GMT</pubDate></item><item><title><![CDATA[64 - Exercise 6]]></title><description><![CDATA[Question
Write a Library class with no_of_books and books as two instance variables. Write a program to create a library from this Library class and show how you can print all books, add a book and get the number of books using different methods. Show that your program
67 - Ex6 ~ solution
class Library: def __init__(self): self.noBooks = 0 self.books = [] def addBook(self, book): self.books.append(book) self.noBooks = len(self.books) def showInfo(self): print(f"The library has {self.noBooks} books. The books are") for book in self.books: print(book) l1 = Library()
l1.addBook("Harry Potter1")
l1.addBook("Harry Potter2")
l1.addBook("Harry Potter3")
l1.showInfo() ]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/64-exercise-6.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/64 - Exercise 6.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 16 Aug 2023 20:08:14 GMT</pubDate></item><item><title><![CDATA[67 - Ex6 ~ solution]]></title><description><![CDATA[
class Library: def __init__(self): self.noBooks = 0 self.books = [] def addBook(self, book): self.books.append(book) self.noBooks = len(self.books) def showInfo(self): print(f"The library has {self.noBooks} books. The books are") for book in self.books: print(book) l1 = Library()
l1.addBook("Harry Potter1")
l1.addBook("Harry Potter2")
l1.addBook("Harry Potter3")
l1.showInfo() ]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/67-ex6-~-solution.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/67 - Ex6 ~ solution.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 16 Aug 2023 20:07:53 GMT</pubDate></item><item><title><![CDATA[55 -Exercise 5 (Snake Water Gun)]]></title><description><![CDATA[
Snake, Water and Gun is a variation of the children's game "rock-paper-scissors" where players use hand gestures to represent a snake, water, or a gun. The gun beats the snake, the water beats the gun, and the snake beats the water. Write a python program to create a Snake Water Gun game in Python using if-else statements. Do not create any fancy GUI. Use proper functions to check for win. 63 - Ex5 ~ Solutionimport random def check(comp, user): if comp ==user: return 0 if(comp == 0 and user ==1): return -1 if(comp == 1 and user ==2): return -1 if(comp == 2 and user == 0): return -1 return 1 comp = random.randint(0, 2)
user = int(input("0 for Snake, 1 for water and 2 for Gun:\n")) score = check(comp, user) print("You: ", user)
print("Computer: ", comp) if(score == 0): print("Its a draw")
elif (score == -1): print("You Lose")
else: print("You Won") ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/55-exercise-5-(snake-water-gun).html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/55 -Exercise 5 (Snake Water Gun).md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 16 Aug 2023 20:04:48 GMT</pubDate></item><item><title><![CDATA[75 - Ex7 ~ Solution]]></title><description><![CDATA[Answerimport os files = os.listdir("clutteredFolder")
i = 1
for file in files: if file.endswith(".png"): print(file) os.rename(f"clutteredFolder/{file}", f"clutteredFolder/{i}.png") i = i + 1 ]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/75-ex7-~-solution.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/75 - Ex7 ~ Solution.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 16 Aug 2023 20:00:17 GMT</pubDate></item><item><title><![CDATA[74 - Method Overriding]]></title><description><![CDATA[Method overriding is a powerful feature in object-oriented programming that allows you to redefine a method in a derived class. The method in the derived class is said to override the method in the base class. When you create an instance of the derived class and call the overridden method, the version of the method in the derived class is executed, rather than the version in the base class.In Python, method overriding is a way to customize the behavior of a class based on its specific needs. For example, consider the following base class:class Shape: def area(self): pass
In this base class, the area method is defined, but does not have any implementation. If you want to create a derived class that represents a circle, you can override the area method and provide an implementation that calculates the area of a circle:class Circle(Shape): def __init__(self, radius): self.radius = radius def area(self): return 3.14 * self.radius * self.radius
In this example, the Circle class inherits from the Shape class, and overrides the area method. The new implementation of the area method calculates the area of a circle, based on its radius.It's important to note that when you override a method, the new implementation must have the same method signature as the original method. This means that the number and type of arguments, as well as the return type, must be the same.Another way to customize the behavior of a class is to call the base class method from the derived class method. To do this, you can use the super function. The super function allows you to call the base class method from the derived class method, and can be useful when you want to extend the behavior of the base class method, rather than replace it.For example, consider the following base class:class Shape: def area(self): print("Calculating area...")
In this base class, the area method prints a message indicating that the area is being calculated. If you want to create a derived class that represents a circle, and you also want to print a message indicating the type of shape, you can use the super function to call the base class method, and add your own message:class Circle(Shape): def __init__(self, radius): self.radius = radius def area(self): print("Calculating area of a circle...") super().area() return 3.14 * self.radius * self.radius
In this example, the Circle class overrides the area method, and calls the base class method using the super function. This allows you to extend the behavior of the base class method, while still maintaining its original behavior.In conclusion, method overriding is a powerful feature in Python that allows you to customize the behavior of a class based on its specific needs. By using method overriding, you can create more robust and reliable code, and ensure that your classes behave in the way that you need them to. Additionally, by using the super function, you can extend the behavior of a base class method, rather than replace it, giving you even greater flexibility and control over the behavior of your classes.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-56-77/74-method-overriding.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 56 - 77/74 - Method Overriding.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 16 Aug 2023 19:59:24 GMT</pubDate></item><item><title><![CDATA[52 - Lambda Functions]]></title><description><![CDATA[In Python, a lambda function is a small anonymous function without a name. It is defined using the lambda keyword and has the following syntax:lambda arguments: expression
Lambda functions are often used in situations where a small function is required for a short period of time. They are commonly used as arguments to higher-order functions, such as map, filter, and reduce.Here is an example of how to use a lambda function:# Function to double the input
def double(x): return x * 2 # Lambda function to double the input
lambda x: x * 2
The above lambda function has the same functionality as the double function defined earlier. However, the lambda function is anonymous, as it does not have a name.Lambda functions can have multiple arguments, just like regular functions. Here is an example of a lambda function with multiple arguments:# Function to calculate the product of two numbers
def multiply(x, y): return x * y # Lambda function to calculate the product of two numbers
lambda x, y: x * y
Lambda functions can also include multiple statements, but they are limited to a single expression. For example:# Lambda function to calculate the product of two numbers,
# with additional print statement
lambda x, y: print(f'{x} * {y} = {x * y}')
In the above example, the lambda function includes a print statement, but it is still limited to a single expression.Lambda functions are often used in conjunction with higher-order functions, such as map, filter, and reduce which we will look into later.]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/52-lambda-functions.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/52 - Lambda Functions.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 16 Aug 2023 19:53:41 GMT</pubDate></item><item><title><![CDATA[46e. colour in Terminal logs]]></title><description><![CDATA[
To change the colour of the Linux terminal output, you can modify the colour codes for the various elements in the terminal.
The most common way to do this is by using ANSI escape codes, which are special sequences of characters that control the formatting and coloring of text in the terminal. Escape Character: The escape character is represented as \e or \033 and signals the beginning of an escape code in many programming languages and terminal emulators. It's a special character that indicates that what follows is a control sequence, not regular text. Control Sequence: The control sequence is enclosed within square brackets [ and specifies the text formatting or colour changes. It consists of several components, separated by semicolons, that dictate the appearance of the text. Formatting Options (Optional): 1: This part indicates bold or increased intensity for the text. If included, the text will appear in a bold font style. Semicolon Separator: The semicolon ; separates different properties within the control sequence. Colour Code: 32: This part indicates the text colour. Colour codes for foreground (text) colours are typically 30-37. Each number corresponds to a specific colour, and in this case, 32 represents the colour green.
Some common colour codes: Black: 30
Red: 31
Green: 32
Yellow: 33 Blue: 34
Magenta: 35
Cyan: 36
White: 37 Text to be Formatted: Following the control sequence, you include the actual text you want to format with the specified colour and style. Reset Code: \e[0m or \033[0m: This code is used to reset the text properties to default. It ensures that any formatting changes (such as colour or style) made in the previous control sequence do not affect subsequent text. Putting it all together, here's the complete command using "colour" and explaining each part: echo -e "\033[&lt;FORMAT_OPTION&gt;;&lt;COLOR_CODE&gt;m TEXTS OF THE STRING \033[0m" echo -e "\033[1;32m This is bold green text \033[0m" ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/46e.-colour-in-terminal-logs.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/46e. colour in Terminal logs.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 16 Aug 2023 16:22:33 GMT</pubDate></item><item><title><![CDATA[52e. Pass functions as arguments]]></title><description><![CDATA[
this way, we can use functions even inside a function. The main difference between recursion &amp; this is that: in recursion, we are using the same function inside a function. in this, we are using another function. def appl(fx, value): return 6 + fx(value) double = lambda x: x * 2
cube = lambda x: x * x * x
avg = lambda x, y, z: (x + y + z) / 3 # function to calculate average. print(appl(double , 2)) # Output:
10 ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/52e.-pass-functions-as-arguments.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/52e. Pass functions as arguments.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 16 Aug 2023 16:14:02 GMT</pubDate></item><item><title><![CDATA[51 - seek() and tell() functions]]></title><description><![CDATA[In Python, the seek() and tell() functions are used to work with file objects and their positions within a file. These functions are part of the built-in io module, which provides a consistent interface for reading and writing to various file-like objects, such as files, pipes, and in-memory buffers.The seek() function allows you to move the current position within a file to a specific point. The position is specified in bytes, and you can move either forward or backward from the current position. For example:
with open('file.txt', 'r') as f: # Move to the 10th byte in the file f.seek(10) # Read the next 5 bytes data = f.read(5)
The tell() function returns the current position within the file, in bytes. This can be useful for keeping track of your location within the file or for seeking to a specific position relative to the current position. For example:with open('file.txt', 'r') as f: # Read the first 10 bytes data = f.read(10) # Save the current position current_position = f.tell() # Seek to the saved position f.seek(current_position)
When you open a file in Python using the open function, you can specify the mode in which you want to open the file. If you specify the mode as 'w' or 'a', the file is opened in write mode and you can write to the file.
However, if you want to truncate the file to a specific size, you can use the truncate function.Here is an example of how to use the truncate function:with open('sample.txt', 'w') as f: f.write('Hello World!') f.truncate(5) with open('sample.txt', 'r') as f: print(f.read()) # output
Hello # left the 5 bytes/characters
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/51-seek()-and-tell()-functions.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/51 - seek() and tell() functions.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 16 Aug 2023 15:37:48 GMT</pubDate></item><item><title><![CDATA[13 - String methods]]></title><description><![CDATA[Python provides a set of built-in methods that we can use to alter and modify the strings.The upper() method converts a string to upper case.str1 = "AbcDEfghIJ"
print(str1.upper()) # Output:
ABCDEFGHIJ
The lower() method converts a string to lower case.str1 = "AbcDEfghIJ"
print(str1.lower()) # Output:
abcdefghij
The strip() method removes any white spaces before and after the string.str2 = " Silver Spoon "
print(str2.strip) # Output:
Silver Spoon
the rstrip() removes any trailing characters.str3 = "Hello !!!"
print(str3.rstrip("!")) # Output:
Hello
The replace() method replaces all occurences of a string with another string.str2 = "Silver Spoon"
print(str2.replace("Sp", "M")) # Output:
Silver Moon
The split() method splits the given string at the specified instance and returns the separated strings as list items.str2 = "Silver Spoon"
print(str2.split(" ")) #Splits the string at the whitespace " ". # Output:
['Silver', 'Spoon'] There are various other string methods that we can use to modify our strings.
The capitalize() method turns only the first character of the string to uppercase and the rest other characters of the string are turned to lowercase. The string has no effect if the first character is already uppercase.str1 = "hello"
capStr1 = str1.capitalize()
print(capStr1)
str2 = "hello WorlD"
capStr2 = str2.capitalize()
print(capStr2) # Output:
Hello
Hello world
The center() method aligns the string to the center as per the parameters given by the user.str1 = "Welcome to the Console!!!"
print(str1.center(50)) # Output: Welcome to the Console!!! We can also provide padding character. It will fill the rest of the fill characters provided by the user.
str1 = "Welcome to the Console!!!"
print(str1.center(50, ".")) # Output:
............Welcome to the Console!!!.............
The count() method returns the number of times the given value has occurred within the given string.str2 = "Abracadabra"
countStr = str2.count("a")
print(countStr) # Output:
4
The endswith() method checks if the string ends with a given value. If yes then return True, else return False. str1 = "Welcome to the Console !!!"
print(str1.endswith("!!!")) # Output:
True We can even also check for a value in-between the string by providing start and end index positions.
str1 = "Welcome to the Console !!!"
print(str1.endswith("to", 4, 10)) # Output:
True
The find() method searches for the first occurrence of the given value and returns the index where it is present. If given value is absent from the string then return -1.str1 = "He's name is Dan. He is an honest man."
print(str1.find("is")) # Output:
10
As we can see, this method is somewhat similar to the index() method.
The major difference being that index() raises an exception if value is absent whereas find() does not.str1 = "He's name is Dan. He is an honest man."
print(str1.find("Daniel")) # Output:
-1
The index() method searches for the first occurrence of the given value and returns the index where it is present. If given value is absent from the string then raise an exception.str1 = "He's name is Dan. Dan is an honest man."
print(str1.index("Dan")) # Output:
13
As we can see, this method is somewhat similar to the find() method.
The major difference being that index() raises an exception if value is absent whereas find() does not.str1 = "He's name is Dan. Dan is an honest man."
print(str1.index("Daniel")) # Output:
ValueError: substring not found The isalnum() method returns True only if the entire string only consists of A-Z, a-z, 0-9. If any other characters or punctuations are present, then it returns False.
str1 = "WelcomeToTheConsole"
print(str1.isalnum()) Output:
True The isalpha() method returns True only if the entire string only consists of A-Z, a-z. If any other characters or punctuations or numbers(0-9) are present, then it returns False.
str1 = "Welcome"
print(str1.isalpha()) # Output:
True The islower() method returns True if all the characters in the string are lower case, else it returns False. str1 = "hello world"
print(str1.islower()) # Output:
True The isprintable() method returns True if all the values within the given string are printable, if not, then return False.
str1 = "We wish you a Merry Christmas"
print(str1.isprintable()) # Output:
True The isspace() method returns True only if the string contains white spaces, else returns False.
str1 = " " #using Spacebar
print(str1.isspace())
str2 = " " #using Tab
print(str2.isspace()) # Output:
True
True The istitile() returns True only if the first letter of each word of the string is capitalized, else it returns False.
str1 = "World Health Organization" print(str1.istitle()) str2 = "To kill a Mocking bird"
print(str2.istitle()) # Output:
True
False The isupper() method returns True if all the characters in the string are upper case, else it returns False. str1 = "WORLD HEALTH ORGANIZATION" print(str1.isupper()) # Output:
True The endswith() method checks if the string starts with a given value. If yes then return True, else return False. str1 = "Python is a Interpreted Language" print(str1.startswith("Python")) # Output:
True The swapcase() method changes the character casing of the string. Upper case are converted to lower case and lower case to upper case.
str1 = "Python is a Interpreted Language" print(str1.swapcase()) # Output: pYTHON IS A iNTERPRETED lANGUAGE
The title() method capitalizes each letter of the word within the string.str1 = "He's name is Dan. Dan is an honest man."
print(str1.title()) # Output:
He'S Name Is Dan. Dan Is An Honest Man.
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/13-string-methods.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/13 - String methods.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 16 Aug 2023 15:00:29 GMT</pubDate></item><item><title><![CDATA[27 - Exercise 3 (kbc)]]></title><description><![CDATA[Info
Create a program capable of displaying questions to the user like KBC. Use List data type to store the questions and their correct answers.
Display the final amount the person is taking home after playing the game. questions = [ [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ], [ "Which language was used to create fb?", "Python", "French", "JavaScript", "Php", "None", 4 ],
] levels = [1000, 2000, 3000, 5000, 10000, 20000, 40000, 80000, 160000, 320000]
money = 0
for i in range(0, len(questions)): question = questions[i] print(f"\n\nQuestion for Rs. {levels[i]}") print(f"a. {question[1]} b. {question[2]} ") print(f"c. {question[3]} d. {question[4]} ") reply = int(input("Enter your answer (1-4) or 0 to quit:\n" )) if (reply == 0): money = levels[i-1] break if(reply == question[-1]): print(f"Correct answer, you have won Rs. {levels[i]}") if(i == 4): money = 10000 elif(i == 9): money = 320000 elif(i == 14): money = 10000000 else: print("Wrong answer!") break print(f"Your take home money is {money}")
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/27-exercise-3-(kbc).html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/27 - Exercise 3 (kbc).md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 15 Aug 2023 09:24:44 GMT</pubDate></item><item><title><![CDATA[25 - operations on Tuples]]></title><description><![CDATA[Tuples are immutable, hence if you want to add, remove or change tuple items, then first you must convert the tuple to a list. Then perform operation on that list and convert it back to tuple.countries = ("Spain", "Italy", "India", "England", "Germany")
temp = list(countries) # See DAY#9 - Type Casting
temp.append("Russia") #add item
temp.pop(3) #remove item
temp[2] = "Finland" #change item
countries = tuple(temp)
print(countries)
('Spain', 'Italy', 'Finland', 'Germany', 'Russia') Thus, we convert the tuple to a list, manipulate items of the list using list methods, then convert list back to a tuple. we can directly concatenate two tuples without converting them to list.
countries = ("Pakistan", "Afghanistan", "Bangladesh", "ShriLanka")
countries2 = ("Vietnam", "India", "China")
southEastAsia = countries + countries2
print(southEastAsia)
('Pakistan', 'Afghanistan', 'Bangladesh', 'ShriLanka', 'Vietnam', 'India', 'China') As tuple is immutable type of collection of elements, it has limited built in methods.
The count() method of Tuple returns the number of times the given element appears in the tuple.tuple.count(element)
Tuple1 = (0, 1, 2, 3, 2, 3, 1, 3, 2)
res = Tuple1.count(3)
print('Count of 3 in Tuple1 is:', res)
3
The Index() method returns the first occurrence of the given element from the tuple.tuple.index(element) tuple.index(element, start, end)
Note
This method raises a ValueError if the element is not found in the tuple.
Tuple = (0, 1, 2, 3, 2, 3, 1, 3, 2)
res = Tuple.index(3)
res1 = Tuple.index(3)
print('First occurrence of 3 is', res)
3]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/25-operations-on-tuples.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/25 - operations on Tuples.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 15 Aug 2023 09:17:21 GMT</pubDate></item><item><title><![CDATA[9 - Typecasting in Python]]></title><description><![CDATA[
The conversion of one data type into the other data type is known as type casting in python or type conversion in python.
Python supports a wide variety of functions or methods like: int(), float(), str(), ord(), hex(), oct(), tuple(), set(), list(), dict(), etc. for the type casting in python. Explicit Conversion (Explicit type casting in python)
Implicit Conversion (Implicit type casting in python).
The conversion of one data type into another data type, done via developer or programmer's intervention or manually as per the requirement, is known as explicit type conversion. It can be achieved with the help of Python’s built-in type conversion functions such as int(), float(), hex(), oct(), str(), etc .string = "15"
number = 7
string_number = int(string) #throws an error if the string is not a valid integer
sum= number + string_number
print("The Sum of both the numbers is: ", sum) # Output:
The Sum of both the numbers is 22 Data types in Python do not have the same level i.e. ordering of data types is not the same in Python. Some of the data types have higher-order, and some have lower order. While performing any operations on variables with different data types in Python, one of the variable's data types will be changed to the higher data type. According to the level, one data type is converted into other by the Python interpreter itself (automatically). This is called, implicit typecasting in python.
Python converts a smaller data type to a higher data type to prevent data loss.
# Python automatically converts
# a to int
a = 7
print(type(a)) # Python automatically converts b to float
b = 3.0
print(type(b)) # Python automatically converts c to float as it is a float addition
c = a + b
print(c)
print(type(c)) # Ouput:
&lt;class 'int'&gt;
&lt;class 'float'&gt;
10.0
&lt;class 'float'&gt; ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/9-typecasting-in-python.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/9 - Typecasting in Python.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 15 Aug 2023 08:31:11 GMT</pubDate></item><item><title><![CDATA[8 - Ex1 ~Solution]]></title><description><![CDATA[a = 50
b = 3 print("The value of", a, "+", 3, "is: ", a + b)
print("The value of", a, "-", 3, "is: ", a - b)
print("The value of", a, "*", 3, "is: ", a * b)
print("The value of", a, "/", 3, "is: ", a / b)
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/8-ex1-~solution.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/8 - Ex1 ~Solution.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 15 Aug 2023 08:25:18 GMT</pubDate></item><item><title><![CDATA[50 - read readlines and other methods]]></title><description><![CDATA[The readline() method reads a single line from the file. If we want to read multiple lines, we can use a loop.
f = open('myfile.txt', 'r')
while True: line = f.readline() if not line: break print(line) The readlines() method reads all the lines of the file and returns them as a list of strings.The writelines() method in Python writes a sequence of strings to a file. The sequence can be any iterable object, such as a list or a tuple.Here's an example of how to use the writelines() method:f = open('myfile.txt', 'w')
lines = ['line1', 'line2', 'line3']
f.writelines(lines)
f.close() # output in myfiles.txt: line1line2line3 # without any spaces
info if we wanna add space or write strings line by line, we have to add them right in the string.
f = open('myfile.txt', 'w')
lines = ['line1\n', 'line2\n', 'line3\n'] # The \n characters are used to add newline characters to the end of each string.
f.writelines(lines)
f.close() #output in myfiles.txt
line 1
line 2
line 3 Keep in mind that the writelines() method does not add newline characters between the strings in the sequence.
So this method can't be used for long list or in case of unchangeable lists. In that case, you can use a loop to write each string separately: f = open('myfile.txt', 'w')
lines = ['line 1', 'line 2', 'line 3']
for line in lines: f.write(line + '\n')
f.close()
It is also a good practice to close the file after you are done with it.]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/50-read-readlines-and-other-methods.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/50 - read readlines and other methods.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 15 Aug 2023 06:08:40 GMT</pubDate></item><item><title><![CDATA[48 - local vs global variables]]></title><description><![CDATA[Recap
Before we dive into the differences between local and global variables, let's first recall what a variable is in Python. A variable is a named location in memory that stores a value. In Python, we can assign values to variables using the assignment operator =. For example:
x = 5
y = "Hello, World!" Now, let's talk about local and global variables.A local variable is a variable that is defined within a function and is only accessible within that function. It is created when the function is called and is destroyed when the function returns.On the other hand, a global variable is a variable that is defined outside of a function and is accessible from within any function in your code.Here's an example to help clarify the difference:x = 10 # global variable def my_function(): y = 5 # local variable print(y) my_function()
print(x)
print(y) # this will cause an error because y is a local variable and is not accessible outside of the function In this example, we have a global variable x and a local variable y. We can access the value of the global variable x from within the function, but we cannot access the value of the local variable y outside of the function.Now, what if we want to modify a global variable from within a function? This is where the global keyword comes in.The global keyword is used to declare that a variable is a global variable and should be accessed from the global scope.
Here's an example:
x = 10 # global variable def my_function(): global x x = 5 # this will change the value of the global variable x y = 5 # local variable my_function()
print(x) # prints 5
print(y) # this will cause an error because y is a local variable and is not accessible outside of the function In this example, we used the global keyword to declare that we want to modify the global variable x from within the function. As a result, the value of x is changed to 5.Info It's important to note that it's generally considered good practice to avoid modifying global variables from within functions, as it can lead to unexpected behavior and make your code harder to debug. ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/48-local-vs-global-variables.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/48 - local vs global variables.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 12 Aug 2023 11:47:10 GMT</pubDate></item><item><title><![CDATA[45 - if name == main in Python]]></title><description><![CDATA[The if __name__ == "__main__" idiom is a common pattern used in Python scripts to determine whether the script is being run directly or being imported as a module into another script.In Python, the __name__ variable is a built-in variable that is automatically set to the name of the current module. When a Python script is run directly, the __name__ variable is set to the string __main__ When the script is imported as a module into another script, the __name__ variable is set to the name of the module.Here's an example of how the if __name__ == __main__ idiom can be used:def main(): # Code to be run when the script is run directly print("Running script directly") if __name__ == "__main__": main()
In this example, the main function contains the code that should be run when the script is run directly. The if statement at the bottom checks whether the __name__ variable is equal to __main__. If it is, the main function is called.This idiom is useful because it allows you to reuse code from a script by importing it as a module into another script, without running the code in the original script. For example, consider the following script:def main(): print("Running script directly") if __name__ == "__main__": main()
If you run this script directly, it will output "Running script directly". However, if you import it as a module into another script and call the main function from the imported module, it will not output anything:import script script.main() # Output: "Running script directly"
This can be useful if you have code that you want to reuse in multiple scripts, but you only want it to run when the script is run directly and not when it's imported as a module.It's important to note that the if __name__ == "__main__" idiom is not required to run a Python script. You can still run a script without it by simply calling the functions or running the code you want to execute directly. However, the if __name__ == "__main__" idiom can be a useful tool for organizing and separating code that should be run directly from code that should be imported and used as a module.
In summary, the if __name__ == "__main__" idiom is a common pattern used in Python scripts to determine whether the script is being run directly or being imported as a module into another script. It allows you to reuse code from a script by importing it as a module into another script, without running the code in the original script.
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/45-if-name-==-main-in-python.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/45 - if name == main in Python.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 10 Aug 2023 10:42:20 GMT</pubDate></item><item><title><![CDATA[42 - Enumerate]]></title><description><![CDATA[The enumerate function is a built-in function in Python that allows you to loop over a sequence (such as a list, tuple, or string) and get the index and value of each element in the sequence at the same time. Here's a basic example of how it works:# Loop over a list and print the index and value of each element
fruits = ['apple', 'banana', 'mango']
for index, fruit in enumerate(fruits): print(index, fruit) The output of this code will be:0 apple
1 banana
2 mango Here, index &amp; fruits is being looped simultaneously &amp; index=(previous value) +1 is added per loop. By default, the enumerate function starts the index at 0, but you can specify a different starting index by passing it as an argument to the enumerate function:# Loop over a list and print the index (starting at 1) and value of each element
fruits = ['apple', 'banana', 'mango']
for index, fruit in enumerate(fruits, start=1): # now index is started from 1 instead of 0 print(index, fruit) This will output:1 apple
2 banana
3 mango The enumerate function is often used when you need to loop over a sequence and perform some action with both the index and value of each element. For example, you might use it to loop over a list of strings and print the index and value of each string in a formatted way:fruits = ['apple', 'banana', 'mango']
for index, fruit in enumerate(fruits): print(f'{index+1}: {fruit}') This will output:1: apple
2: banana
3: mango In addition to lists, you can use the enumerate function with any other sequence type in Python, such as tuples and strings. Here's an example with a tuple:# Loop over a tuple and print the index and value of each element
colors = ('red', 'green', 'blue')
for index, color in enumerate(colors): print(index, color) And here's an example with a string:# Loop over a string and print the index and value of each character
s = 'hello'
for index, c in enumerate(s): print(index, c) ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/42-enumerate.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/42 - Enumerate.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 09 Aug 2023 16:33:42 GMT</pubDate></item><item><title><![CDATA[41 - Short Hand if else]]></title><description><![CDATA[There is also a shorthand syntax for the if-else statement, that can be used when the condition is simple and the code blocks are short. Here's an example:if(a&gt;b): print("A")
elif(a==b): print("=")
else: pass
a = 2
b = 330
print("A") if a &gt; b else print("B") if a=b else "" # it's pronunced as this: print("A") if a &gt; b, else print("B") if a=b, else ""
You can also have multiple else statements on the same line:One line if else statement, with 3 conditions:a = 330
b = 330
print("A") if a &gt; b else print("=") if a == b else print("B") # it's pronunced as this: print("A") if a &gt; b, else print("=") result = value_if_true if condition, else value_if_false This syntax is equivalent to the following if-else statement:if condition: result = value_if_true
else: result = value_if_false The shorthand syntax can be a convenient way to write simple if-else statements, especially when you want to assign a value to a variable based on a condition. However, it's not suitable for more complex situations where you need to execute multiple statements or perform more complex logic. In those cases, it's best to use the full if-else syntax.]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/41-short-hand-if-else.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/41 - Short Hand if else.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Wed, 09 Aug 2023 15:59:59 GMT</pubDate></item><item><title><![CDATA[100 - Conclusion]]></title><description><![CDATA[Congratulations to me
Bhai, kotodin laglo sesh korte? congratulations!🥳 Congratulations on completing the 100 days of Python code challenge! You have likely gained a solid foundation in the language and developed a range of skills, from basic syntax to more advanced concepts such as object-oriented programming. However, this is just the beginning of your journey with Python. There are many more topics to explore, including machine learning, web development, game development, and more.To continue your learning journey, consider exploring the following resources: Python books: There are many excellent books on Python that can help you deepen your knowledge and skills. Some popular options include "Python Crash Course" by Eric Matthes, "Automate the Boring Stuff with Python" by Al Sweigart, and "Fluent Python" by Luciano Ramalho. I would also like to recommend "Hands on Machine Learning book by Aurélien Géron" YouTube Projects: There are many YouTube projects available which can be watched after you have some basic understanding of python Python communities: There are many online communities where you can connect with other Python learners and experts, ask questions, and share your knowledge. Some popular options include the Python subreddit, the Python Discord server, and the Python community on Stack Overflow. GitHub repositories: GitHub is a great resource for finding Python projects, libraries, and code snippets. Some useful repositories to check out include "awesome-python" (a curated list of Python resources), "scikit-learn" (a machine learning library), and "django" (a web development framework). Tkinter - You can learn Tkinter which is used to create GUIs from <a data-tooltip-position="top" aria-label="https://www.cs.mcgill.ca/~hv/classes/MS/TkinterPres/#Overview" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.cs.mcgill.ca/~hv/classes/MS/TkinterPres/#Overview" target="_self">here</a> :
<br>Machine Learning - I loved <a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=cKxRvEZd3Mw&amp;list=PLOU2XLYxmsIIuiBfYad6rFYQU_jL2ryal" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=cKxRvEZd3Mw&amp;list=PLOU2XLYxmsIIuiBfYad6rFYQU_jL2ryal" target="_self">this</a> playlist from Google Developers
<br>Django - For Django, try the <a data-tooltip-position="top" aria-label="https://docs.djangoproject.com/en/4.1/intro/tutorial01/" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.djangoproject.com/en/4.1/intro/tutorial01/" target="_self">tutorial</a> from the official documentation. Trust me its really good
Overall, the key to mastering Python (or any programming language) is to keep practicing and experimenting. Set yourself challenges, work on personal projects, and stay curious. Good luck!]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/100-conclusion.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/100 - Conclusion.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 08 Aug 2023 16:12:19 GMT</pubDate></item><item><title><![CDATA[99 - Exercise 11 ~ solution]]></title><description><![CDATA[import os
import time REPEAT_INTERVAL = 3600 # Repeat frequency in secondswhile True:
command = "osascript -e 'say "Hey Harry drink water"'; osascript -e 'display alert "Hey Harry, Drink water"'"
os.system(command)
time.sleep(REPEAT_INTERVAL)]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/99-exercise-11-~-solution.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/99 - Exercise 11 ~ solution.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 08 Aug 2023 16:07:57 GMT</pubDate></item><item><title><![CDATA[98 - MultiProcessing in Python]]></title><description><![CDATA[Danger
There are a lots of files in the Repl, Please go visit it.
Multiprocessing is a Python module that provides a simple way to run multiple processes in parallel. It allows you to take advantage of multiple cores or processors on your system and can significantly improve the performance of your code. In this repl, we'll take a closer look at the multiprocessing module and its various functions and how they can be used in Python.We can use multiprocessing by importing the multiprocessing module. import multiprocessing
Now, to use multiprocessing we need to create a process object which calls a start() method. The start() method runs the process and then to stop the execution, we use the join() method. Here's how we can create a simple process.import multiprocessing
def my_func(): print("Hello from process", multiprocessing.current_process().name) process = multiprocessing.Process(target=my_func) process.start() process.join()
The following are some of the most commonly used functions in the multiprocessing module: multiprocessing.Process(target, args): This function creates a new process that runs the target function with the specified arguments. multiprocessing.Pool(processes): This function creates a pool of worker processes that can be used to parallelize the execution of a function across multiple input values. multiprocessing.Queue(): This function creates a queue that can be used to communicate data between processes. multiprocessing.Lock(): This function creates a lock that can be used to synchronize access to shared resources between processes. Creating a pool of worker processes is a common approach to using multiprocessing in Python. The idea is to create a pool of worker processes and then assign tasks to them as needed. This allows you to take advantage of multiple CPU cores and process tasks in parallel.from multiprocessing import Pool def process_task(task): # Do some work here print("Task processed:", task) if __name__ == '__main__': tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] with Pool(processes=4) as pool: results = pool.map(process_task, tasks)
When working with multiple processes, it is often necessary to pass data between them. One way to do this is by using a queue. A queue is a data structure that allows data to be inserted at one end and removed from the other end. In the context of multiprocessing, a queue can be used to pass data between processes.def producer(queue): for i in range(10): queue.put(i) def consumer(queue): while True: item = queue.get() print(item) queue = multiprocessing.Queue()
p1 = multiprocessing.Process(target=producer, args=(queue,))
p2 = multiprocessing.Process(target=consumer, args=(queue,))
p1.start()
p2.start()
When working with multiprocessing in python, locks can be used to synchronize access to shared resources among multiple processes. A lock is an object that acts as a semaphore, allowing only one process at a time to execute a critical section of code. The lock is released when the process finishes executing the critical section.def increment(counter, lock): for i in range(10000): lock.acquire() counter.value += 1 lock.release() if __name__ == '__main__': counter = multiprocessing.Value('i', 0) lock = multiprocessing.Lock() p1 = multiprocessing.Process(target=increment, args=(counter, lock)) p2 = multiprocessing.Process(target=increment, args=(counter, lock)) p1.start() p2.start() p1.join() p2.join() print("Counter value:", counter.value)
As you can see, the multiprocessing module provides a simple and efficient way to run multiple processes in parallel. Whether you need to create a new process, run a function across multiple input values, communicate data between processes, or synchronize access to shared resources, the multiprocessing module has you covered.In conclusion, the multiprocessing module is a powerful tool for parallelizing code in Python. Whether you are a beginner or an experienced Python developer, the multiprocessing module is an essential tool to have in your toolbox.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/98-multiprocessing-in-python.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/98 - MultiProcessing in Python.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 08 Aug 2023 16:07:45 GMT</pubDate></item><item><title><![CDATA[97 - MultiThreading]]></title><description><![CDATA[Multithreading is a technique in programming that allows multiple threads of execution to run concurrently within a single process. In Python, we can use the threading module to implement multithreading. In this tutorial, we will take a closer look at the threading module and its various functions and how they can be used in Python.We can use threading by importing the threading module.import threading
To create a thread, we need to create a Thread object and then call its start() method. The start() method runs the thread and then to stop the execution, we use the join() method. Here's how we can create a simple thread.import threading
def my_func(): print("Hello from thread", threading.current_thread().name) thread = threading.Thread(target=my_func) thread.start() thread.join()
The following are some of the most commonly used functions in the threading module: threading.Thread(target, args): This function creates a new thread that runs the target function with the specified arguments. threading.Lock(): This function creates a lock that can be used to synchronize access to shared resources between threads. Creating multiple threads is a common approach to using multithreading in Python. The idea is to create a pool of worker threads and then assign tasks to them as needed. This allows you to take advantage of multiple CPU cores and process tasks in parallel.import threading def thread_task(task): # Do some work here print("Task processed:", task) if __name__ == '__main__': tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] threads = [] for task in tasks: thread = threading.Thread(target=thread_task, args=(task,)) threads.append(thread) thread.start() for thread in threads: thread.join()
When working with multithreading in python, locks can be used to synchronize access to shared resources among multiple threads. A lock is an object that acts as a semaphore, allowing only one thread at a time to execute a critical section of code. The lock is released when the thread finishes executing the critical section.import threading def increment(counter, lock): for i in range(10000): lock.acquire() counter += 1 lock.release() if __name__ == '__main__': counter = 0 lock = threading.Lock() threads = [] for i in range(2): thread = threading.Thread(target=increment, args=(counter, lock)) threads.append(thread) thread.start() for thread in threads: thread.join() print("Counter value:", counter)
As you can see, the threading module provides a simple and efficient way to implement multithreading in Python. Whether you need to create a new thread, run a function across multiple input values, or synchronize access to shared resources, the threading module has you covered.In conclusion, the threading module is a powerful tool for parallelizing code in Python. Whether you are a beginner or an experienced Python developer, the threading module is an essential tool to have in your toolbox. With multithreading, you can take advantage of multiple CPU cores and significantly improve the performance of your code.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/97-multithreading.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/97 - MultiThreading.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 08 Aug 2023 16:05:36 GMT</pubDate></item><item><title><![CDATA[95  - Regular Expressions]]></title><description><![CDATA[Regular expressions, or "regex" for short, are a powerful tool for working with strings and text data in Python. They allow you to match and manipulate strings based on patterns, making it easy to perform complex string operations with just a few lines of code.[] Represent a character class
^ Matches the beginning
$ Matches the end
. Matches any character except newline
? Matches zero or one occurrence.
| Means OR (Matches with any of the characters separated by it.
* Any number of occurrences (including 0 occurrences)
+ One or more occurrences
{} Indicate number of occurrences of a preceding RE to match.
() Enclose a group of REs
Find list of more meta characters here - <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.ibm.com/docs/en/rational-clearquest/9.0.1?topic=tags-meta-characters-in-regular-expressions" target="_self">https://www.ibm.com/docs/en/rational-clearquest/9.0.1?topic=tags-meta-characters-in-regular-expressions</a>In Python, regular expressions are supported by the re module. The basic syntax for working with regular expressions in Python is as follows:import re
re.search() method either returns None (if the pattern doesn’t match), or a re.MatchObject that contains information about the matching part of the string. This method stops after the first match, so this is best suited for testing a regular expression more than extracting data.
We can use re.search method like this to search for a pattern in regular expression:# Define a regular expression pattern
pattern = r"expression" # Match the pattern against a string
text = "Hello, world!" match = re.search(pattern, text) if match: print("Match found!")
else: print("Match not found.")
You can also use the re.findall function to find all occurrences of the pattern in a string:import re
pattern = r"expression"
text = "The cat is in the hat." matches = re.findall(pattern, text) print(matches)
# Output: ['cat', 'hat']
The following example shows how to replace a pattern in a string:import re
pattern = r"[a-z]+at"
text = "The cat is in the hat." matches = re.findall(pattern, text) print(matches)
# Output: ['cat', 'hat'] new_text = re.sub(pattern, "dog", text) print(new_text)
# Output: "The dog is in the dog."
The following example shows how to extract information from a string using regular expressions:import re text = "The email address is example@example.com." pattern = r"\w+@\w+\.\w+" match = re.search(pattern, text) if match: email = match.group() print(email)
# Output: example@example.com
Regular expressions are a powerful tool for working with strings and text data in Python. Whether you're matching patterns, replacing text, or extracting information, regular expressions make it easy to perform complex string operations with just a few lines of code. With a little bit of practice, you'll be able to use regular expressions to solve all sorts of string-related problems in Python.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/95-regular-expressions.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/95  - Regular Expressions.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 08 Aug 2023 16:04:13 GMT</pubDate></item><item><title><![CDATA[96 - AsyncIO in Python]]></title><description><![CDATA[Asynchronous I/O, or async for short, is a programming pattern that allows for high-performance I/O operations in a concurrent and non-blocking manner. In Python, async programming is achieved through the use of the asyncio module and asynchronous functions.Here is the basic syntax for creating an asynchronous function in Python:import asyncio async def my_async_function(): # asynchronous code here await asyncio.sleep(1) return "Hello, Async World!" async def main(): result = await my_async_function() print(result) asyncio.run(main())
Another way to schedule tasks concurrently is as follows: L = await asyncio.gather( my_async_function(), my_async_function(), my_async_function(), )
print(L)
Async IO is a powerful programming pattern that allows for high-performance and concurrent I/O operations in Python. With the asyncio module and asynchronous functions, you can write efficient and scalable code that can handle large amounts of data and I/O operations without blocking the main thread. Whether you're working on web applications, network services, or data processing pipelines, async IO is an essential tool for any Python developer.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/96-asyncio-in-python.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/96 - AsyncIO in Python.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 08 Aug 2023 16:02:42 GMT</pubDate></item><item><title><![CDATA[94 - Exercise 11 ~ Drink Water Reminder]]></title><description><![CDATA[Write a python program which reminds you of drinking water every hour or two. Your program can either beep or send desktop notifications for a specific operating system]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/94-exercise-11-~-drink-water-reminder.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/94 - Exercise 11 ~ Drink Water Reminder.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 08 Aug 2023 15:56:13 GMT</pubDate></item><item><title><![CDATA[91 - Generators in Python]]></title><description><![CDATA[Generators in Python are special type of functions that allow you to create an iterable sequence of values. A generator function returns a generator object, which can be used to generate the values one-by-one as you iterate over it. Generators are a powerful tool for working with large or complex data sets, as they allow you to generate the values on-the-fly, rather than having to create and store the entire sequence in memory.In Python, you can create a generator by using the yield statement in a function. The yield statement returns a value from the generator and suspends the execution of the function until the next value is requested. Here's an example:def my_generator(): for i in range(5): yield i gen = my_generator()
print(next(gen))
print(next(gen))
print(next(gen))
print(next(gen))
print(next(gen))
# Output:
# 0
# 1
# 2
# 3
# 4
As you can see, the generator function my_generator() returns a generator object, which can be used to generate the values in the range 0 to 4. The next() function is used to request the next value from the generator, and the generator resumes its execution until it encounters another yield statement or until it reaches the end of the function.Once you have created a generator, you can use it in a variety of ways, such as in a for loop, a list comprehension, or a generator expression. Here's an example:gen = my_generator()
for i in gen: print(i)
# Output:
# 0
# 1
# 2
# 3
# 4
As you can see, the generator can be used in a for loop, just like any other iterable sequence. The generator is used to generate the values one-by-one as the loop iterates over it.Generators offer several benefits over other types of sequences, such as lists, tuples, and sets. One of the main benefits of generators is that they allow you to generate the values on-the-fly, rather than having to create and store the entire sequence in memory. This makes generators a powerful tool for working with large or complex data sets, as you can generate the values as you need them, rather than having to store them all in memory at once.Another benefit of generators is that they are lazy, which means that the values are generated only when they are requested. This allows you to generate the values in a more efficient and memory-friendly manner, as you don't have to generate all the values up front.Generators in Python are a powerful tool for working with large or complex data sets, allowing you to generate the values on-the-fly and store only what you need in memory. Whether you are working with a large dataset, performing complex calculations, or generating a sequence of values, generators are a must-have tool in your programming toolkit. So, if you haven't already, be sure to check out generators in Python and see how they can help you write better, more efficient code.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/91-generators-in-python.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/91 - Generators in Python.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 08 Aug 2023 15:49:39 GMT</pubDate></item><item><title><![CDATA[89 - Requests Module]]></title><description><![CDATA[The Python Requests module is an HTTP library that enables developers to send HTTP requests in Python. This module enables you to send HTTP requests using Python code and makes it possible to interact with APIs and web services.pip install requests
Once you have installed the Requests module, you can start using it to send HTTP requests. Here is a simple example that sends a GET request to the Google homepage:import requests
response = requests.get("https://www.google.com")
print(response.text)
Here is another example that sends a POST request to a web service and includes a custom header:import requests url = "https://api.example.com/login"
headers = { "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36", "Content-Type": "application/json"
}
data = { "username": "myusername", "password": "mypassword"
} response = requests.post(url, headers=headers, json=data) print(response.text)
In this example, we send a POST request to a web service to authenticate a user. We include a custom User-Agent header and a JSON payload with the user's credentials.There is another module called BeautifulSoup which is used for web scraping in Python. I have personally used bs4 module to finish a lot of freelancing task.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/89-requests-module.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/89 - Requests Module.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 08 Aug 2023 15:45:48 GMT</pubDate></item><item><title><![CDATA[86 - Walrus Operator]]></title><description><![CDATA[The Walrus Operator is a new addition to Python 3.8 and allows you to assign a value to a variable within an expression. This can be useful when you need to use a value multiple times in a loop, but don't want to repeat the calculation.The Walrus Operator is represented by the := syntax and can be used in a variety of contexts including while loops and if statements.Here's an example of how you can use the Walrus Operator in a while loop:numbers = [1, 2, 3, 4, 5] while (n := len(numbers)) &gt; 0: print(numbers.pop())
In this example, the length of the numbers list is assigned to the variable n using the Walrus Operator. The value of n is then used in the condition of the while loop, so that the loop will continue to execute until the numbers list is empty.Another example of using the Walrus Operator in an if statement:names = ["John", "Jane", "Jim"] if (name := input("Enter a name: ")) in names: print(f"Hello, {name}!")
else: print("Name not found.")
Here is another example # walrus operator := # new to Python 3.8
# assignment expression aka walrus operator
# assigns values to variables as part of a larger expression # happy = True
# print(happy) # print(happy := True) # foods = list()
# while True:
# food = input("What food do you like?: ")
# if food == "quit":
# break
# foods.append(food) foods = list()
while (food := input("What food do you like?: ")) != "quit": foods.append(food)
In this example, the user input is assigned to the variable name using the Walrus Operator. The value of name is then used in the if statement to determine whether it is in the names list. If it is, the corresponding message is printed, otherwise, a different message is printed.It is important to note that the Walrus Operator should be used sparingly as it can make code less readable if overused.In conclusion, the Walrus Operator is a useful tool for Python developers to have in their toolkit. It can help streamline code and reduce duplication, but it should be used with care to ensure code readability and maintainability.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/86-walrus-operator.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/86 - Walrus Operator.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 08 Aug 2023 15:39:52 GMT</pubDate></item><item><title><![CDATA[85- Command Line Utility]]></title><description><![CDATA[save Command line utilities are programs that can be run from the terminal or command line interface, and they are an essential part of many development workflows. In Python, you can create your own command line utilities using the built-in argparse module.Here is the basic syntax for creating a command line utility using argparse in Python:import argparse parser = argparse.ArgumentParser() # Add command line arguments
parser.add_argument("arg1", help="description of argument 1")
parser.add_argument("arg2", help="description of argument 2") # Parse the arguments
args = parser.parse_args() # Use the arguments in your code
print(args.arg1)
print(args.arg2)
Here are a few examples to help you get started with creating command line utilities in Python:The following example shows how to add an optional argument to your command line utility:import argparse parser = argparse.ArgumentParser() parser.add_argument("-o", "--optional", help="description of optional argument", default="default_value") args = parser.parse_args() print(args.optional)
The following example shows how to add a positional argument to your command line utility:import argparse parser = argparse.ArgumentParser() parser.add_argument("positional", help="description of positional argument") args = parser.parse_args() print(args.positional)
The following example shows how to add an argument with a specified type:import argparse parser = argparse.ArgumentParser() parser.add_argument("-n", type=int, help="description of integer argument") args = parser.parse_args() print(args.n)
Creating command line utilities in Python is a straightforward and flexible process thanks to the argparse module. With a few lines of code, you can create powerful and customizable command line tools that can make your development workflow easier and more efficient. Whether you're working on small scripts or large applications, the argparse module is a must-have tool for any Python developer.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/85-command-line-utility.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/85- Command Line Utility.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 08 Aug 2023 15:37:35 GMT</pubDate></item><item><title><![CDATA[84 - Time Module]]></title><description><![CDATA[The time module in Python provides a set of functions to work with time-related operations, such as timekeeping, formatting, and time conversions. This module is part of the Python Standard Library and is available in all Python installations, making it a convenient and essential tool for a wide range of applications. In this day 84 tutorial, we'll explore the time module in Python and see how it can be used in different scenarios.The time.time() function returns the current time as a floating-point number, representing the number of seconds since the epoch (the point in time when the time module was initialized). The returned value is based on the computer's system clock and is affected by time adjustments made by the operating system, such as daylight saving time. Here's an example:import time
print(time.time())
# Output: 1602299933.233374
As you can see, the function returns the current time as a floating-point number, which can be used for various purposes, such as measuring the duration of an operation or the elapsed time since a certain point in time.The time.sleep() function suspends the execution of the current thread for a specified number of seconds. This function can be used to pause the program for a certain period of time, allowing other parts of the program to run, or to synchronize the execution of multiple threads. Here's an example:import time print("Start:", time.time())
time.sleep(2)
print("End:", time.time())
# Output:
# Start: 1602299933.233374
# End: 1602299935.233376
As you can see, the function time.sleep() suspends the execution of the program for 2 seconds, allowing other parts of the program to run during that time.The time.strftime() function formats a time value as a string, based on a specified format. This function is particularly useful for formatting dates and times in a human-readable format, such as for display in a GUI, a log file, or a report. Here's an example:import time t = time.localtime()
formatted_time = time.strftime("%Y-%m-%d %H:%M:%S", t) print(formatted_time)
# Output: 2022-11-08 08:45:33
As you can see, the function time.strftime() formats the current time (obtained using time.localtime()) as a string, using a specified format. The format string contains codes that represent different parts of the time value, such as the year, the month, the day, the hour, the minute, and the second.The time module in Python provides a set of functions to work with time-related operations, such as timekeeping, formatting, and time conversions. Whether you are writing a script, a library, or an application, the time module is a powerful tool that can help you perform time-related tasks with ease and efficiency. So, if you haven't already, be sure to check out the time module in Python and see how it can help you write better, more efficient code.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/84-time-module.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/84 - Time Module.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 08 Aug 2023 15:34:38 GMT</pubDate></item><item><title><![CDATA[80 - Multilevel Inheritance]]></title><description><![CDATA[Multilevel inheritance is a type of inheritance in object-oriented programming where a derived class inherits from another derived class. This type of inheritance allows you to build a hierarchy of classes where one class builds upon another, leading to a more specialized class.In Python, multilevel inheritance is achieved by using the class hierarchy. The syntax for multilevel inheritance is quite simple and follows the same syntax as single inheritance.class BaseClass: # Base class code class DerivedClass1(BaseClass): # Derived class 1 code class DerivedClass2(DerivedClass1): # Derived class 2 code
In the above example, we have three classes: BaseClass, DerivedClass1, and DerivedClass2. The DerivedClass1 class inherits from the BaseClass, and the DerivedClass2 class inherits from the DerivedClass1 class. This creates a hierarchy where DerivedClass2 has access to all the attributes and methods of both DerivedClass1 and BaseClass.Let's take a look at an example to understand how multilevel inheritance works in Python. Consider the following classes:class Animal: def __init__(self, name, species): self.name = name self.species = species def show_details(self): print(f"Name: {self.name}") print(f"Species: {self.species}") class Dog(Animal): def __init__(self, name, breed): Animal.__init__(self, name, species="Dog") self.breed = breed def show_details(self): Animal.show_details(self) print(f"Breed: {self.breed}") class GoldenRetriever(Dog): def __init__(self, name, color): Dog.__init__(self, name, breed="Golden Retriever") self.color = color def show_details(self): Dog.show_details(self) print(f"Color: {self.color}")
In this example, we have three classes: Animal, Dog, and GoldenRetriever. The Dog class inherits from the Animal class, and the GoldenRetriever class inherits from the Dog class.Now, when we create an object of the GoldenRetriever class, it has access to all the attributes and methods of the Animal class and the Dog class. We can also see that the GoldenRetriever class has its own attributes and methods that are specific to the class.dog = GoldenRetriever("Max", "Golden")
dog.show_details()
Name: Max
Species: Dog
Breed: Golden Retriever
Color: Golden
As we can see from the output, the GoldenRetriever object has access to all the attributes and methods of the Animal and Dog classes, and, it has also added its own unique attributes and methods. This is a powerful feature of multilevel inheritance, as it allows you to create more complex and intricate classes by building upon existing ones.Another important aspect of multilevel inheritance is that it allows you to reuse code and avoid repeating the same logic multiple times. This can lead to better maintainability and readability of your code, as you can abstract away complex logic into base classes and build upon them.In conclusion, multilevel inheritance is a powerful feature in object-oriented programming that allows you to create complex and intricate classes by building upon existing ones. It provides the benefits of code reuse, maintainability, and readability, while also requiring careful consideration to avoid potential problems.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/80-multilevel-inheritance.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/80 - Multilevel Inheritance.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 08 Aug 2023 15:16:07 GMT</pubDate></item><item><title><![CDATA[78 - Single Inheritance]]></title><description><![CDATA[Single inheritance is a type of inheritance where a class inherits properties and behaviors from a single parent class. This is the simplest and most common form of inheritance.The syntax for single inheritance in Python is straightforward and easy to understand. To create a new class that inherits from a parent class, simply specify the parent class in the class definition, inside the parentheses, like this:class ChildClass(ParentClass): # class body Let's consider a simple example of single inheritance in Python. Consider a class named "Animal" that contains the attributes and behaviors that are common to all animals.class Animal: def __init__(self, name, species): self.name = name self.species = species def make_sound(self): print("Sound made by the animal")
If we want to create a new class for a specific type of animal, such as a dog, we can create a new class named "Dog" that inherits from the Animal class.class Dog(Animal): def __init__(self, name, breed): Animal.__init__(self, name, species="Dog") self.breed = breed def make_sound(self): print("Bark!")
The Dog class inherits all the attributes and behaviors of the Animal class, including the __init__ method and the make_sound method. Additionally, the Dog class has its own __init__ method that adds a new attribute for the breed of the dog, and it also overrides the make_sound method to specify the sound that a dog makes.Single inheritance is a powerful tool in Python that allows you to create new classes based on existing classes. It allows you to reuse code, extend it to fit your needs, and make it easier to manage complex systems. Understanding single inheritance is an important step in becoming proficient in object-oriented programming in Python.]]></description><link>https://soymadip.me/notes/1.-python/2.-object-oriented/day-78-100/78-single-inheritance.html</link><guid isPermaLink="false">1. Python/2. Object-Oriented/Day 78 - 100/78 - Single Inheritance.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 08 Aug 2023 15:08:03 GMT</pubDate></item><item><title><![CDATA[VS Code extensions]]></title><description><![CDATA[
Markdown Preview Opener
Nord Theme
Pyright (Pylance Alt)
Import cost
Indent rainbow
Console log
Typescript Hero
Love preview
Auto close tag
Better comments
Tokyo night theme
One dark pro theme Super console log ]]></description><link>https://soymadip.me/notes/1.-python/•-my-doubts/vs-code-extensions.html</link><guid isPermaLink="false">1. Python/• MY Doubts/VS Code extensions.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Fri, 04 Aug 2023 06:07:52 GMT</pubDate></item><item><title><![CDATA[35 - For loop with else]]></title><description><![CDATA[
Python allows the else keyword to be used with the for and while loops too. The else block appears after the body of the loop. The program exits the loop only after the else block is executed. The statements in the else block will be executed after all iterations are completed.
for counter in sequence: #Statements inside for loop block
else: #Statements inside else block
for x in range(5): print (f"iteration for {x+1} in for loop")
else: print ("else block in loop")
print ("Out of loop")
iteration no 1 in for loop
iteration no 2 in for loop
iteration no 3 in for loop
iteration no 4 in for loop
iteration no 5 in for loop
else block in loop
Out of loop After Breaking loop, the else will not be printed. for i in []: # creating empty list print('nope') break else: print('this will not be printed as loop is broken') # as loop is broken
Else will be printed only if loop's condition is not met, like in the end of the loop when conditions are met and loop is finished.....]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/35-for-loop-with-else.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/35 - For loop with else.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 03 Aug 2023 05:44:10 GMT</pubDate></item><item><title><![CDATA[38 - Custom Errors]]></title><description><![CDATA[In python, we can raise custom errors by using the raise keyword. salary = int(input("Enter salary amount: "))
if not 2000 &lt; salary &lt; 5000: raise ValueError("Not a valid salary")
sometimes we may need to create our own custom exceptions that serve our purpose.
like if we wanna stop function in an error.In Python, we can define custom exceptions by creating a new class that is derived from the built-in Exception class.Here's the syntax to define custom exceptions:class CustomError(Exception): # code ... pass try: # code ... except CustomError: # code...
This is useful because sometimes we might want to do something when a particular exception is raised. For example, sending an error report to the admin, calling an api, etc.]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/38-custom-errors.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/38 - Custom Errors.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 09 Jul 2023 08:49:37 GMT</pubDate></item><item><title><![CDATA[37 - Finally Keyword]]></title><description><![CDATA[
Finally statement is used after try-except or loop to execute a certain input.....
try: #statements which could generate #exception
except: #solution of generated exception
finally: #block of code which is going to #execute in any situation Why not just a print statement in the end? Because if we are in a function and use return statement , the end print becomes invalidated as function has returned a vale....
Example:-
def func1():
try: l = [1, 5, 6, 7] i = int(input("Enter the index: ")) # takig an integer input print(l[i]) return 1
except: print("Some error occurred") return 0
print('i am always executed') x = func1() in above function, 0 to 3 is given as input(as index of the list is 4), it will return indexed value &amp; 1 and if any if anything other than integer is given, some error occured will be printed.
But the last print statement (i am always executed) will not be printed in any case....0 # if integer between 0 to 3 is given some error occued.
1 # if integer is not given so if we need to print certain statement at any condition, we have to use finally statement...
def func1():
try: l = [1, 5, 6, 7] i = int(input("Enter the index: ")) print(l[i]) return 1
except: print("Some error occurred") return 0
finally: print("I am always executeṇd") x = func1() Output:- 0
i am always executed # if integer between 0 to 3 is given some eror occured
1
i am always executed # if integer is not given
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/37-finally-keyword.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/37 - Finally Keyword.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 09 Jul 2023 08:37:12 GMT</pubDate></item><item><title><![CDATA[Vs code shortcuts]]></title><description><![CDATA[
Ctrl+ shift + P Ctrl + arrow Ctrl +shift + arrow Ctrl+ /
]]></description><link>https://soymadip.me/notes/1.-python/•-my-doubts/vs-code-shortcuts.html</link><guid isPermaLink="false">1. Python/• MY Doubts/Vs code shortcuts.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 06 Jul 2023 11:30:37 GMT</pubDate></item><item><title><![CDATA[Md]]></title><description><![CDATA[
Better Footnote:- Here it is<a data-footref="[inline0" href="https://soymadip.me/notes/1.-python/•-my-doubts/md.html#fn-1-5d302a2f4984496b_0" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>
Footnote with link:- <br>Here it is<a data-footref="[inline1" href="https://soymadip.me/notes/1.-python/•-my-doubts/md.html#fn-2-5d302a2f4984496b_0" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a>
Block link:- Here is backlink to 32 page's block:- “32 - Set Methods#^732c24” is not created yet. Click to create. <br>this is footnote<a href="https://soymadip.me/notes/1.-python/•-my-doubts/md.html#fnref-1-5d302a2f4984496b_0" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br><a data-tooltip-position="top" aria-label="32 - Set Methods" data-href="32 - Set Methods" href="https://soymadip.me/notes/.html" class="internal-link" target="_self" rel="noopener nofollow">Link to day 32</a><a href="https://soymadip.me/notes/1.-python/•-my-doubts/md.html#fnref-2-5d302a2f4984496b_0" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
]]></description><link>https://soymadip.me/notes/1.-python/•-my-doubts/md.html</link><guid isPermaLink="false">1. Python/• MY Doubts/Md.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 06 Jul 2023 10:48:58 GMT</pubDate></item><item><title><![CDATA[36 - Exception Handling]]></title><description><![CDATA[Exception handling is the process of responding to unwanted or unexpected events when a computer program runs.
Exception handling deals with these events to avoid the program or system crashing, and without this process, exceptions would disrupt the normal operation of a program.Python has many built-in exceptions that are raised when your program encounters an error (something in the program goes wrong).When these exceptions occur, the Python interpreter stops the current process and passes it to the calling process until it is handled. If not handled, the program will crash.try….. except blocks are used in python to handle errors and exceptions. The code in try block runs when there is no error. If the try block catches the error, then the except block is executed. try: #statements which could generate #exception
except: #Soloution of generated exception
try: num = int(input("Enter an integer: "))
except ValueError: print("Number entered is not an integer.")
Enter an integer: 6.022
Number entered is not an integer. # This is the error
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/36-exception-handling.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/36 - Exception Handling.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 02 Jul 2023 16:37:12 GMT</pubDate></item><item><title><![CDATA[Intersection]]></title><description><![CDATA[<img src="https://soymadip.me/notes/1.-python/•-assets/intersection.png" target="_self">]]></description><link>https://soymadip.me/notes/1.-python/•-assets/intersection.html</link><guid isPermaLink="false">1. Python/• Assets/Intersection.png</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Tue, 27 Jun 2023 05:41:20 GMT</pubDate><enclosure url="https://soymadip.me/notes/1.-python/•-assets/intersection.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/1.-python/•-assets/intersection.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Union]]></title><description><![CDATA[<img src="https://soymadip.me/notes/1.-python/•-assets/union.jpg" target="_self">]]></description><link>https://soymadip.me/notes/1.-python/•-assets/union.html</link><guid isPermaLink="false">1. Python/• Assets/Union.jpg</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 25 Jun 2023 16:57:58 GMT</pubDate><enclosure url="https://soymadip.me/notes/1.-python/•-assets/union.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://soymadip.me/notes/1.-python/•-assets/union.jpg&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[30 - Recursion in python]]></title><description><![CDATA[Recursion is the process of defining something in terms of itself.In Python, It is even possible for the function to call itself. These types of construct are termed as recursive functions.def factorial(num): if (num == 1 or num == 0): return 1 else: return (num * factorial(num - 1)) # Driver Code num = 7; print("Number: ",num)
print("Factorial: ",factorial(num))
number: 7
Factorial: 5040
Info
it works like this:
f(0) = 0, f(1) = 1 | f(n) = f(n-1) + f(n-2) f(0) = 0, f(1) = 1, f(2) = 1+0 = 1, f(3) = 2+1 = 3, f(4) = 3+2 = 5, f(5) = 4+3 = 7 def fibpnassi(number): if(number == 1): return 1 elif(number == 0): return 0 else: return ((number-1) + (number-2)) number = int(input('enter your number: '))
print(fibpnassi(number)) ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/30-recursion-in-python.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/30 - Recursion in python.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sun, 25 Jun 2023 06:16:23 GMT</pubDate></item><item><title><![CDATA[40 - Exercise 4 (program to translate a message into secret code language)]]></title><description><![CDATA[
Write a python program to translate a message into secret code language. Use the rules below to translate normal English into secret code language
if the word contains atleast 3 characters, remove the first letter and append it at the end
now append three random characters at the starting and the end
else:
simply reverse the stringif the word contains less than 3 characters, reverse it
else:
remove 3 random characters from start and end. Now remove the last letter and append it to the beginning]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-29-55/40-exercise-4-(program-to-translate-a-message-into-secret-code-language).html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 29 - 55/40 - Exercise 4 (program to translate a message into secret code language).md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 24 Jun 2023 07:15:15 GMT</pubDate></item><item><title><![CDATA[24 - Tuples in Python]]></title><description><![CDATA[Tuples are ordered collection of data items. They store multiple items in a single variable. Tuple items are separated by commas and enclosed within round brackets (). Tuples are unchangeable meaning we can not change them after creation.
Tuples are in ( ) instead of [ ] like Lists
Indexing is as same as Lists
tuple1 = (1,2,2,3,5,4,6) #tuple
tuple1 = [1,2,2,3,5,4,6] #list
tuple2 = ("Red", "Green", "Blue")
print(tuple1)
print(tuple2)
(1, 2, 2, 3, 5, 4, 6)
('Red', 'Green', 'Blue')
Each item/element in a tuple has its own unique index. This index can be used to access any particular item from the tuple. The first item has index [0], second item has index [1], third item has index [2] and so on.
But length is counted from 1.
country = ("Spain", "Italy", "India",)
# [0] [1] [2] As we have seen that tuple items have index, as such we can access items using these indexes.country = ("Spain", "Italy", "India",)
# [0] [1] [2] print(country[0])
print(country[1])
print(country[2])
Output:Spain
Italy
India
Similar to positive indexing, negative indexing is also used to access items, but from the end of the tuple. The last item has index [-1], second last item has index [-2], third last item has index [-3] and so on.country = ("Spain", "Italy", "India", "England", "Germany")
# [0] [1] [2] [3] [4]
print(country[-1]) # Similar to print(country[len(country) - 1])
print(country[-3])
print(country[-4])
Germany
India
Italy
We can check if a given item is present in the tuple. This is done using the in keyword.country = ("Spain", "Italy", "India", "England", "Germany")
if "Germany" in country: print("Germany is present.")
else: print("Germany is absent.")
Germany is present.
country = ("Spain", "Italy", "India", "England", "Germany")
if "Russia" in country: print("Russia is present.")
else: print("Russia is absent.")
Russia is absent.
You can print a range of tuple items by specifying where do you want to start, where do you want to end and if you want to skip elements in between the range.Tuple[start : end : jumpIndex]
Note: jump Index is optional. We will see this in given examples.animals = ("cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow")
print(animals[3:7]) #using positive indexes
print(animals[-7:-2]) #using negative indexes
('mouse', 'pig', 'horse', 'donkey')
('bat', 'mouse', 'pig', 'horse', 'donkey')
Here, we provide index of the element from where we want to start and the index of the element till which we want to print the values.
Note: The element of the end index provided will not be included.animals = ("cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow")
print(animals[4:]) #using positive indexes
print(animals[-4:]) #using negative indexes
('pig', 'horse', 'donkey', 'goat', 'cow')
('horse', 'donkey', 'goat', 'cow') When no end index is provided, the interpreter prints all the values till the end.animals = ("cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow")
print(animals[:6]) #using positive indexes
print(animals[:-3]) #using negative indexes
('cat', 'dog', 'bat', 'mouse', 'pig', 'horse')
('cat', 'dog', 'bat', 'mouse', 'pig', 'horse')
When no start index is provided, the interpreter prints all the values from start up to the end index provided. animals = ("cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow")
print(animals[::2]) #using positive indexes
print(animals[-8:-1:2]) #using negative indexes
('cat', 'bat', 'pig', 'donkey', 'cow')
('dog', 'mouse', 'horse', 'goat')
Here, we have not provided start and end index, which means all the values will be considered. But as we have provided a jump index of 2 only alternate values will be printed. animals = ("cat", "dog", "bat", "mouse", "pig", "horse", "donkey", "goat", "cow")
print(animals[1:8:3])
('dog', 'pig', 'goat')
Here, jump index is 3. Hence it prints every 3rd element within given index.]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/24-tuples-in-python.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/24 - Tuples in Python.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 24 Jun 2023 07:15:12 GMT</pubDate></item><item><title><![CDATA[21 - Function Arguments]]></title><description><![CDATA[There are four types of arguments that we can provide in a function:
Default Arguments
Keyword Arguments
Variable length Arguments
Required Arguments
We can provide a default value while creating a function. This way the function assumes a default value even if a value is not provided in the function call for that argument.Example:def name(fname, mname = "Jhon", lname = "Whatson"): print("Hello,", fname, mname, lname) name("Amy")
Output:Hello, Amy Jhon Whatson
We can provide arguments with key = value, this way the interpreter recognizes the arguments by the parameter name. Hence, the the order in which the arguments are passed does not matter.Example:def name(fname, mname, lname): print("Hello,", fname, mname, lname) name(mname = "Peter", lname = "Wesker", fname = "Jade")
Output:Hello, Jade Peter Wesker
In case we don’t pass the arguments with a key = value syntax, then it is necessary to pass the arguments in the correct positional order and the number of arguments passed should match with actual function definition.
Example 1:
when number of arguments passed does not match to the actual function definition.
def name(fname, mname, lname): print("Hello,", fname, mname, lname) name("Peter", "Quill")
Output:name("Peter", "Quill")\
TypeError: name() missing 1 required positional argument: 'lname' Example 2:
when number of arguments passed matches to the actual function definition.
def name(fname, mname, lname): print("Hello,", fname, mname, lname) name("Peter", "Ego", "Quill")
Output:Hello, Peter Ego Quill
Sometimes we may need to pass more arguments than those defined in the actual function. This can be done using variable-length arguments.
There are two ways to achieve this: Arbitrary Arguments need Knowledge of Tuple &amp; Dictionary, so they are for /later..... While creating a function, pass a * before the parameter name while defining the function. The function accesses the arguments by processing them in the form of tuple.Example:def name(*name): print("Hello,", name[0], name[1], name[2]) name("James", "Buchanan", "Barnes")
Output:Hello, James Buchanan Barnes
While creating a function, pass a * before the parameter name while defining the function. The function accesses the arguments by processing them in the form of dictionary.Example:def name(**name): print("Hello,", name["fname"], name["mname"], name["lname"]) name(mname = "Buchanan", lname = "Barnes", fname = "James")
Output:Hello, James Buchanan Barnes
The return statement is used to return the value of the expression back to the calling function.Example:def name(fname, mname, lname): return "Hello, " + fname + " " + mname + " " + lname print(name("James", "Buchanan", "Barnes"))
Output:Hello, James Buchanan Barnes
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/21-function-arguments.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/21 - Function Arguments.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Sat, 24 Jun 2023 07:15:12 GMT</pubDate></item><item><title><![CDATA[16 - Match Case]]></title><description><![CDATA[To implement switch-case like characteristics very similar to if-else functionality, we use a match case in python. If you are coming from a C, C++ or Java like language, you must have heard of switch-case statements. If this is your first language, dont worry as I will tell you everything you need to know about match case statements in this video!A match statement will compare a given variable’s value to different shapes, also referred to as the pattern. The main idea is to keep on comparing the variable with all the present patterns until it fits into one.The match case consists of three main entities :
The match keyword
One or more case clauses
Expression for each case
The case clause consists of a pattern to be matched to the variable, a condition to be evaluated if the pattern matches, and a set of statements to be executed if the pattern matches.match variable_name: case ‘pattern1’ : //statement1 case ‘pattern2’ : //statement2 … case ‘pattern n’ : //statement n
x = 4
# x is the variable to match
match x: # if x is 0 case 0: print("x is zero") # case with if-condition case 4 if x % 2 == 0: print("x % 2 == 0 and case is 4") # Empty case with if-condition case _ if x &lt; 10: print("x is &lt; 10") # default case(will only be matched if the above cases were not matched) # so it is basically just an else: case _: print(x)
x % 2 == 0 and case is 4
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/16-match-case.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/16 - Match Case.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 22 Jun 2023 21:22:50 GMT</pubDate></item><item><title><![CDATA[17 - For Loops]]></title><description><![CDATA[Sometimes a programmer wants to execute a group of statements a certain number of times. This can be done using loops. Based on this loops are further classified into following main types; for loop
while loop for loops can iterate over a sequence of iterable objects in python. Iterating over a sequence is nothing but iterating over strings, lists, tuples, sets and dictionaries.name = 'Abhishek'
for i in name: print(i, end=", ")
A, b, h, i, s, h, e, k,colors = ["Red", "Green", "Blue", "Yellow"]
for x in colors: print(x)
Red
Green
Blue
YellowSimilarly, we can use loops for lists, sets and dictionaries.What if we do not want to iterate over a sequence? What if we want to use for loop for a specific number of times?Here, we can use the range() function.for k in range(5): print(k)
0
1
2
3
4
Here, we can see that the loop starts from 0 by default and increments at each iteration.But we can also loop over a specific range.for k in range(4,9): print(k)
4
5
6
7
8Explore about third parameter of range (ie range(x, y, z))]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/17-for-loops.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/17 - For Loops.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 22 Jun 2023 21:22:39 GMT</pubDate></item><item><title><![CDATA[20 - Functions]]></title><description><![CDATA[A function is a block of code that performs a specific task whenever it is called. In bigger programs, where we have large amounts of code, it is advisable to create or use existing functions that make the program flow organized and neat.
There are two types of functions: Built-in functions
User-defined functions
These functions are defined and pre-coded in python. Some examples of built-in functions are as follows:min(), max(), len(), sum(), type(), range(), dict(), list(), tuple(), set(), print(), etc.
We can create functions to perform specific tasks as per our needs. Such functions are called user-defined functions.def function_name(parameters): pass # Code and Statements Create a function using the def keyword, followed by a function name, followed by a paranthesis (()) and a colon(:).
Any parameters and arguments should be placed within the parentheses.
Rules to naming function are similar to that of naming variables.
Any statements and other code within the function should be indented.
We call a function by giving the function name, followed by parameters (if any) in the parenthesis.Example:def name(fname, lname): print("Hello,", fname, lname) name("Sam", "Wilson")
Output:Hello, Sam Wilson
]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/20-functions.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/20 - Functions.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 22 Jun 2023 21:00:13 GMT</pubDate></item><item><title><![CDATA[19 - break and continue]]></title><description><![CDATA[The break statement enables a program to skip over a part of the code. A break statement terminates the very loop it lies within.for i in range(1,101,1): print(i ,end=" ") if(i==50): break else: print("Mississippi")
print("Thank you")
1 Mississippi
2 Mississippi
3 Mississippi
4 Mississippi
5 Mississippi
.
.
.
50 Mississippi
The continue statement skips the rest of the loop statements and causes the next iteration to occur.for i in [2,3,4,6,8,0]: if (i%2!=0): continue print(i) Output2
4
6
8
0 ]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/19-break-and-continue.html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/19 - break and continue.md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 22 Jun 2023 20:53:21 GMT</pubDate></item><item><title><![CDATA[18 - while Loops in Python.]]></title><description><![CDATA[As the name suggests, while loops execute statements while the condition is True. As soon as the condition becomes False, the interpreter comes out of the while loop. count = 5
while (count &gt; 0): print(count) count = count - 1
5
4
3
2
1
Here, the count variable is set to 5 which decrements after each iteration. Depending upon the while loop condition, we need to either increment or decrement the counter variable (the variable count, in our case) or the loop will continue forever.We can even use the else statement with the while loop. Essentially what the else statement does is that as soon as the while loop condition becomes False, the interpreter comes out of the while loop and the else statement is executed. x = 5
while (x &gt; 0): print(x) x = x - 1
else: print('counter is 0')
5
4
3
2
1
counter is 0
do..while is a loop in which a set of instructions will execute at least once (irrespective of the condition) and then the repetition of loop's body will depend on the condition passed at the end of the while loop. It is also known as an exit-controlled loop.To create a do while loop in Python, you need to modify the while loop a bit in order to get similar behavior to a do while loop.The most common technique to emulate a do-while loop in Python is to use an infinite while loop with a break statement wrapped in an if statement that checks a given condition and breaks the iteration if that condition becomes true:while True: number = int(input("Enter a positive number: ")) print(number) if not number &gt; 0: break
Enter a positive number: 1
1
Enter a positive number: 4
4
Enter a positive number: -1
-1
This loop uses True as its formal condition. This trick turns the loop into an infinite loop. Before the conditional statement, the loop runs all the required processing and updates the breaking condition. If this condition evaluates to true, then the break statement breaks out of the loop, and the program execution continues its normal path]]></description><link>https://soymadip.me/notes/1.-python/1.-procedural/day-1-28/18-while-loops-in-python..html</link><guid isPermaLink="false">1. Python/1. Procedural/Day 1 - 28/18 - while Loops in Python..md</guid><dc:creator><![CDATA[soymadip]]></dc:creator><pubDate>Thu, 22 Jun 2023 14:54:39 GMT</pubDate></item></channel></rss>